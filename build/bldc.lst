ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccq42Esw.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"bldc.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.DMA1_Channel1_IRQHandler,"ax",%progbits
  17              		.align	1
  18              		.global	DMA1_Channel1_IRQHandler
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	DMA1_Channel1_IRQHandler:
  25              	.LFB126:
  26              		.file 1 "Src/bldc.c"
   1:Src/bldc.c    **** /*
   2:Src/bldc.c    **** * This file has been re-implemented with 4 new selectable motor control methods.
   3:Src/bldc.c    **** * Recommended control method: 3 = Sinusoidal 3rd order. This control method offers superior perform
   4:Src/bldc.c    **** * compared to previous method. The new method features:
   5:Src/bldc.c    **** * ► reduced noise and vibrations
   6:Src/bldc.c    **** * ► smooth torque output
   7:Src/bldc.c    **** * ► improved motor efficiency -> lower energy consumption
   8:Src/bldc.c    **** *
   9:Src/bldc.c    **** * Copyright (C) 2019 Emanuel FERU <aerdronix@gmail.com>
  10:Src/bldc.c    **** *
  11:Src/bldc.c    **** * This program is free software: you can redistribute it and/or modify
  12:Src/bldc.c    **** * it under the terms of the GNU General Public License as published by
  13:Src/bldc.c    **** * the Free Software Foundation, either version 3 of the License, or
  14:Src/bldc.c    **** * (at your option) any later version.
  15:Src/bldc.c    **** *
  16:Src/bldc.c    **** * This program is distributed in the hope that it will be useful,
  17:Src/bldc.c    **** * but WITHOUT ANY WARRANTY; without even the implied warranty of
  18:Src/bldc.c    **** * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  19:Src/bldc.c    **** * GNU General Public License for more details.
  20:Src/bldc.c    **** *
  21:Src/bldc.c    **** * You should have received a copy of the GNU General Public License
  22:Src/bldc.c    **** * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  23:Src/bldc.c    **** */
  24:Src/bldc.c    **** 
  25:Src/bldc.c    **** #include "stm32f1xx_hal.h"
  26:Src/bldc.c    **** #include "rtwtypes.h"
  27:Src/bldc.c    **** #include "defines.h"
  28:Src/bldc.c    **** #include "setup.h"
  29:Src/bldc.c    **** #include "config.h"
  30:Src/bldc.c    **** 
  31:Src/bldc.c    **** // Matlab includes and defines - from auto-code generation
  32:Src/bldc.c    **** // ###############################################################################
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccq42Esw.s 			page 2


  33:Src/bldc.c    **** // #include "BLDC_controller.h"           /* Model's header file */
  34:Src/bldc.c    **** // #include "rtwtypes.h"
  35:Src/bldc.c    **** 
  36:Src/bldc.c    **** // extern RT_MODEL *const rtM_Left;
  37:Src/bldc.c    **** // extern RT_MODEL *const rtM_Right;
  38:Src/bldc.c    **** 
  39:Src/bldc.c    **** // extern DW rtDW_Left;                    /* Observable states */
  40:Src/bldc.c    **** // extern ExtU rtU_Left;                   /* External inputs */
  41:Src/bldc.c    **** // extern ExtY rtY_Left;                   /* External outputs */
  42:Src/bldc.c    **** 
  43:Src/bldc.c    **** // extern DW rtDW_Right;                   /* Observable states */
  44:Src/bldc.c    **** // extern ExtU rtU_Right;                  /* External inputs */
  45:Src/bldc.c    **** // extern ExtY rtY_Right;                  /* External outputs */
  46:Src/bldc.c    **** // ###############################################################################
  47:Src/bldc.c    **** 
  48:Src/bldc.c    **** 
  49:Src/bldc.c    **** // #ifdef CONTROL_DETECT_HALL
  50:Src/bldc.c    **** // 	volatile uint8_t hall_idx_left = 0;
  51:Src/bldc.c    **** // 	volatile uint8_t hall_idx_right = 0;
  52:Src/bldc.c    **** // #else
  53:Src/bldc.c    **** // 	const uint8_t hall_idx_left  = HALL_IDX_LEFT-1;
  54:Src/bldc.c    **** // 	const uint8_t hall_idx_right = HALL_IDX_RIGHT-1;
  55:Src/bldc.c    **** // #endif
  56:Src/bldc.c    **** 
  57:Src/bldc.c    **** void motor_run(void);
  58:Src/bldc.c    **** 
  59:Src/bldc.c    **** extern volatile adc_buf_t adc_buffer;
  60:Src/bldc.c    **** 
  61:Src/bldc.c    **** // extern volatile uint32_t timeout;
  62:Src/bldc.c    **** 
  63:Src/bldc.c    **** uint8_t buzzerFreq          = 0;
  64:Src/bldc.c    **** uint8_t buzzerPattern       = 0;
  65:Src/bldc.c    **** static uint32_t buzzerTimer = 0;
  66:Src/bldc.c    **** 
  67:Src/bldc.c    **** // uint8_t enable          = 0;
  68:Src/bldc.c    **** 
  69:Src/bldc.c    **** volatile unsigned  bldc_count_per_hall_counter[2] = {0,0};
  70:Src/bldc.c    **** 
  71:Src/bldc.c    **** // static int offsetcount = 0;
  72:Src/bldc.c    **** // static int offsetrl1   = 2000;
  73:Src/bldc.c    **** // static int offsetrl2   = 2000;
  74:Src/bldc.c    **** // static int offsetrr1   = 2000;
  75:Src/bldc.c    **** // static int offsetrr2   = 2000;
  76:Src/bldc.c    **** // static int offsetdcl   = 2000;
  77:Src/bldc.c    **** // static int offsetdcr   = 2000;
  78:Src/bldc.c    **** 
  79:Src/bldc.c    **** float batteryVoltage = BAT_NUMBER_OF_CELLS * 4.0;
  80:Src/bldc.c    **** 
  81:Src/bldc.c    **** //scan 8 channels (is it 10?) with 2ADCs @ 20 clk cycles per sample
  82:Src/bldc.c    **** //meaning ~80 ADC clock cycles @ 8MHz until new DMA interrupt =~ 100KHz
  83:Src/bldc.c    **** //=640 cpu cycles
  84:Src/bldc.c    **** void DMA1_Channel1_IRQHandler(void) {
  27              		.loc 1 84 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 10B5     		push	{r4, lr}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccq42Esw.s 			page 3


  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 14, -4
  85:Src/bldc.c    **** 
  86:Src/bldc.c    ****   DMA1->IFCR = DMA_IFCR_CTCIF1;
  36              		.loc 1 86 0
  37 0002 2A4B     		ldr	r3, .L8
  38 0004 0222     		movs	r2, #2
  39 0006 5A60     		str	r2, [r3, #4]
  87:Src/bldc.c    **** 
  88:Src/bldc.c    ****   if (buzzerTimer % 1000 == 0) {  // because you get float rounding errors if it would run every ti
  40              		.loc 1 88 0
  41 0008 294B     		ldr	r3, .L8+4
  42 000a 1A68     		ldr	r2, [r3]
  43 000c 294B     		ldr	r3, .L8+8
  44 000e A3FB0213 		umull	r1, r3, r3, r2
  45 0012 9B09     		lsrs	r3, r3, #6
  46 0014 4FF47A71 		mov	r1, #1000
  47 0018 01FB1323 		mls	r3, r1, r3, r2
  48 001c CBB9     		cbnz	r3, .L2
  89:Src/bldc.c    ****     batteryVoltage = batteryVoltage * 0.99f + ((float)adc_buffer.batt1 * ((float)BAT_CALIB_REAL_VOL
  49              		.loc 1 89 0
  50 001e 2649     		ldr	r1, .L8+12
  51 0020 D1ED007A 		vldr.32	s15, [r1]
  52 0024 9FED257A 		vldr.32	s14, .L8+16
  53 0028 27EE877A 		vmul.f32	s14, s15, s14
  54 002c 244B     		ldr	r3, .L8+20
  55 002e 9B89     		ldrh	r3, [r3, #12]
  56 0030 9BB2     		uxth	r3, r3
  57 0032 07EE903A 		vmov	s15, r3	@ int
  58 0036 F8EE677A 		vcvt.f32.u32	s15, s15
  59 003a DFED226A 		vldr.32	s13, .L8+24
  60 003e 67EEA67A 		vmul.f32	s15, s15, s13
  61 0042 DFED216A 		vldr.32	s13, .L8+28
  62 0046 67EEA67A 		vmul.f32	s15, s15, s13
  63 004a 77EE277A 		vadd.f32	s15, s14, s15
  64 004e C1ED007A 		vstr.32	s15, [r1]
  65              	.L2:
  90:Src/bldc.c    ****   }
  91:Src/bldc.c    **** 
  92:Src/bldc.c    ****   //create square wave for buzzer
  93:Src/bldc.c    ****   buzzerTimer++;
  66              		.loc 1 93 0
  67 0052 0132     		adds	r2, r2, #1
  68 0054 164B     		ldr	r3, .L8+4
  69 0056 1A60     		str	r2, [r3]
  94:Src/bldc.c    ****   if (buzzerFreq != 0 && (buzzerTimer / 5000) % (buzzerPattern + 1) == 0) {
  70              		.loc 1 94 0
  71 0058 1C4B     		ldr	r3, .L8+32
  72 005a 1C78     		ldrb	r4, [r3]	@ zero_extendqisi2
  73 005c ACB1     		cbz	r4, .L3
  74              		.loc 1 94 0 is_stmt 0 discriminator 1
  75 005e 1C4B     		ldr	r3, .L8+36
  76 0060 A3FB0213 		umull	r1, r3, r3, r2
  77 0064 1B0B     		lsrs	r3, r3, #12
  78 0066 1B49     		ldr	r1, .L8+40
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccq42Esw.s 			page 4


  79 0068 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
  80 006a 0131     		adds	r1, r1, #1
  81 006c B3FBF1F0 		udiv	r0, r3, r1
  82 0070 01FB1033 		mls	r3, r1, r0, r3
  83 0074 4BB9     		cbnz	r3, .L3
  95:Src/bldc.c    ****     if (buzzerTimer % buzzerFreq == 0) {
  84              		.loc 1 95 0 is_stmt 1
  85 0076 B2FBF4F3 		udiv	r3, r2, r4
  86 007a 04FB1322 		mls	r2, r4, r3, r2
  87 007e 4AB9     		cbnz	r2, .L4
  96:Src/bldc.c    ****       HAL_GPIO_TogglePin(BUZZER_PORT, BUZZER_PIN);
  88              		.loc 1 96 0
  89 0080 1021     		movs	r1, #16
  90 0082 1548     		ldr	r0, .L8+44
  91 0084 FFF7FEFF 		bl	HAL_GPIO_TogglePin
  92              	.LVL0:
  93 0088 04E0     		b	.L4
  94              	.L3:
  97:Src/bldc.c    ****     }
  98:Src/bldc.c    ****   } else {
  99:Src/bldc.c    ****       HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, 0);
  95              		.loc 1 99 0
  96 008a 0022     		movs	r2, #0
  97 008c 1021     		movs	r1, #16
  98 008e 1248     		ldr	r0, .L8+44
  99 0090 FFF7FEFF 		bl	HAL_GPIO_WritePin
 100              	.LVL1:
 101              	.L4:
 100:Src/bldc.c    ****   }
 101:Src/bldc.c    **** 
 102:Src/bldc.c    **** 
 103:Src/bldc.c    ****   static boolean_T OverrunFlag = false;
 104:Src/bldc.c    ****   /* Check for overrun */
 105:Src/bldc.c    ****   if (OverrunFlag) {
 102              		.loc 1 105 0
 103 0094 114B     		ldr	r3, .L8+48
 104 0096 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 105 0098 03B1     		cbz	r3, .L7
 106              	.L1:
 106:Src/bldc.c    ****     return;
 107:Src/bldc.c    ****   }
 108:Src/bldc.c    ****   OverrunFlag = true;
 109:Src/bldc.c    ****   
 110:Src/bldc.c    ****   motor_run();
 111:Src/bldc.c    **** 
 112:Src/bldc.c    ****   /* Indicate task complete */
 113:Src/bldc.c    ****   OverrunFlag = false;
 114:Src/bldc.c    **** }
 107              		.loc 1 114 0
 108 009a 10BD     		pop	{r4, pc}
 109              	.L7:
 108:Src/bldc.c    ****   
 110              		.loc 1 108 0
 111 009c 0F4C     		ldr	r4, .L8+48
 112 009e 0123     		movs	r3, #1
 113 00a0 2370     		strb	r3, [r4]
 110:Src/bldc.c    **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccq42Esw.s 			page 5


 114              		.loc 1 110 0
 115 00a2 FFF7FEFF 		bl	motor_run
 116              	.LVL2:
 113:Src/bldc.c    **** }
 117              		.loc 1 113 0
 118 00a6 0023     		movs	r3, #0
 119 00a8 2370     		strb	r3, [r4]
 120 00aa F6E7     		b	.L1
 121              	.L9:
 122              		.align	2
 123              	.L8:
 124 00ac 00000240 		.word	1073872896
 125 00b0 00000000 		.word	.LANCHOR0
 126 00b4 D34D6210 		.word	274877907
 127 00b8 00000000 		.word	.LANCHOR1
 128 00bc A4707D3F 		.word	1065185444
 129 00c0 00000000 		.word	adc_buffer
 130 00c4 B29CD13C 		.word	1020370098
 131 00c8 0AD7233C 		.word	1008981770
 132 00cc 00000000 		.word	.LANCHOR2
 133 00d0 5917B7D1 		.word	-776530087
 134 00d4 00000000 		.word	.LANCHOR3
 135 00d8 00080140 		.word	1073809408
 136 00dc 00000000 		.word	.LANCHOR4
 137              		.cfi_endproc
 138              	.LFE126:
 140              		.global	batteryVoltage
 141              		.global	bldc_count_per_hall_counter
 142              		.global	buzzerPattern
 143              		.global	buzzerFreq
 144              		.section	.bss.OverrunFlag.9196,"aw",%nobits
 145              		.set	.LANCHOR4,. + 0
 148              	OverrunFlag.9196:
 149 0000 00       		.space	1
 150              		.section	.bss.bldc_count_per_hall_counter,"aw",%nobits
 151              		.align	2
 154              	bldc_count_per_hall_counter:
 155 0000 00000000 		.space	8
 155      00000000 
 156              		.section	.bss.buzzerFreq,"aw",%nobits
 157              		.set	.LANCHOR2,. + 0
 160              	buzzerFreq:
 161 0000 00       		.space	1
 162              		.section	.bss.buzzerPattern,"aw",%nobits
 163              		.set	.LANCHOR3,. + 0
 166              	buzzerPattern:
 167 0000 00       		.space	1
 168              		.section	.bss.buzzerTimer,"aw",%nobits
 169              		.align	2
 170              		.set	.LANCHOR0,. + 0
 173              	buzzerTimer:
 174 0000 00000000 		.space	4
 175              		.section	.data.batteryVoltage,"aw",%progbits
 176              		.align	2
 177              		.set	.LANCHOR1,. + 0
 180              	batteryVoltage:
 181 0000 00002042 		.word	1109393408
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccq42Esw.s 			page 6


 182              		.text
 183              	.Letext0:
 184              		.file 2 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 185              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 186              		.file 4 "Drivers/CMSIS/CM4/CoreSupport/core_cm4.h"
 187              		.file 5 "Inc/system_at32f4xx.h"
 188              		.file 6 "Drivers/CMSIS/CM4/DeviceSupport/at32f4xx.h"
 189              		.file 7 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/lock.h"
 190              		.file 8 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_types.h"
 191              		.file 9 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 192              		.file 10 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/reent.h"
 193              		.file 11 "Inc/rtwtypes.h"
 194              		.file 12 "Inc/defines.h"
 195              		.file 13 "Drivers/Modified_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccq42Esw.s 			page 7


DEFINED SYMBOLS
                            *ABS*:0000000000000000 bldc.c
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccq42Esw.s:17     .text.DMA1_Channel1_IRQHandler:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccq42Esw.s:24     .text.DMA1_Channel1_IRQHandler:0000000000000000 DMA1_Channel1_IRQHandler
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccq42Esw.s:124    .text.DMA1_Channel1_IRQHandler:00000000000000ac $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccq42Esw.s:180    .data.batteryVoltage:0000000000000000 batteryVoltage
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccq42Esw.s:154    .bss.bldc_count_per_hall_counter:0000000000000000 bldc_count_per_hall_counter
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccq42Esw.s:166    .bss.buzzerPattern:0000000000000000 buzzerPattern
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccq42Esw.s:160    .bss.buzzerFreq:0000000000000000 buzzerFreq
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccq42Esw.s:148    .bss.OverrunFlag.9196:0000000000000000 OverrunFlag.9196
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccq42Esw.s:149    .bss.OverrunFlag.9196:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccq42Esw.s:151    .bss.bldc_count_per_hall_counter:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccq42Esw.s:161    .bss.buzzerFreq:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccq42Esw.s:167    .bss.buzzerPattern:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccq42Esw.s:169    .bss.buzzerTimer:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccq42Esw.s:173    .bss.buzzerTimer:0000000000000000 buzzerTimer
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccq42Esw.s:176    .data.batteryVoltage:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_TogglePin
HAL_GPIO_WritePin
motor_run
adc_buffer
