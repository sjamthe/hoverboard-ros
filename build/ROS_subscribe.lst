ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"ROS_subscribe.cpp"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text._ZN8std_msgs6Header11deserializeEPh,"axG",%progbits,_ZN8std_msgs6Header11deserializ
  17              		.align	1
  18              		.weak	_ZN8std_msgs6Header11deserializeEPh
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	_ZN8std_msgs6Header11deserializeEPh:
  25              		.fnstart
  26              	.LFB475:
  27              		.file 1 "ROSSerial/std_msgs/Header.h"
   1:ROSSerial/std_msgs/Header.h **** #ifndef _ROS_std_msgs_Header_h
   2:ROSSerial/std_msgs/Header.h **** #define _ROS_std_msgs_Header_h
   3:ROSSerial/std_msgs/Header.h **** 
   4:ROSSerial/std_msgs/Header.h **** #include <stdint.h>
   5:ROSSerial/std_msgs/Header.h **** #include <string.h>
   6:ROSSerial/std_msgs/Header.h **** #include <stdlib.h>
   7:ROSSerial/std_msgs/Header.h **** #include "ros/msg.h"
   8:ROSSerial/std_msgs/Header.h **** #include "ros/time.h"
   9:ROSSerial/std_msgs/Header.h **** 
  10:ROSSerial/std_msgs/Header.h **** namespace std_msgs
  11:ROSSerial/std_msgs/Header.h **** {
  12:ROSSerial/std_msgs/Header.h **** 
  13:ROSSerial/std_msgs/Header.h ****   class Header : public ros::Msg
  14:ROSSerial/std_msgs/Header.h ****   {
  15:ROSSerial/std_msgs/Header.h ****     public:
  16:ROSSerial/std_msgs/Header.h ****       uint32_t seq;
  17:ROSSerial/std_msgs/Header.h ****       ros::Time stamp;
  18:ROSSerial/std_msgs/Header.h ****       const char* frame_id;
  19:ROSSerial/std_msgs/Header.h **** 
  20:ROSSerial/std_msgs/Header.h ****     virtual int serialize(unsigned char *outbuffer) const
  21:ROSSerial/std_msgs/Header.h ****     {
  22:ROSSerial/std_msgs/Header.h ****       int offset = 0;
  23:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
  24:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
  25:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
  26:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
  27:ROSSerial/std_msgs/Header.h ****       offset += sizeof(this->seq);
  28:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
  29:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
  30:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
  31:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 2


  32:ROSSerial/std_msgs/Header.h ****       offset += sizeof(this->stamp.sec);
  33:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
  34:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
  35:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
  36:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
  37:ROSSerial/std_msgs/Header.h ****       offset += sizeof(this->stamp.nsec);
  38:ROSSerial/std_msgs/Header.h ****       uint32_t length_frame_id = strlen(this->frame_id);
  39:ROSSerial/std_msgs/Header.h ****       memcpy(outbuffer + offset, &length_frame_id, sizeof(uint32_t));
  40:ROSSerial/std_msgs/Header.h ****       offset += 4;
  41:ROSSerial/std_msgs/Header.h ****       memcpy(outbuffer + offset, this->frame_id, length_frame_id);
  42:ROSSerial/std_msgs/Header.h ****       offset += length_frame_id;
  43:ROSSerial/std_msgs/Header.h ****       return offset;
  44:ROSSerial/std_msgs/Header.h ****     }
  45:ROSSerial/std_msgs/Header.h **** 
  46:ROSSerial/std_msgs/Header.h ****     virtual int deserialize(unsigned char *inbuffer)
  28              		.loc 1 46 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34 0000 30B4     		push	{r4, r5}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 4, -8
  38              		.cfi_offset 5, -4
  39              	.LVL1:
  47:ROSSerial/std_msgs/Header.h ****     {
  48:ROSSerial/std_msgs/Header.h ****       int offset = 0;
  49:ROSSerial/std_msgs/Header.h ****       this->seq =  ((uint32_t) (*(inbuffer + offset)));
  40              		.loc 1 49 0
  41 0002 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
  42 0004 4360     		str	r3, [r0, #4]
  50:ROSSerial/std_msgs/Header.h ****       this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  43              		.loc 1 50 0
  44 0006 4A78     		ldrb	r2, [r1, #1]	@ zero_extendqisi2
  45 0008 43EA0223 		orr	r3, r3, r2, lsl #8
  46 000c 4360     		str	r3, [r0, #4]
  51:ROSSerial/std_msgs/Header.h ****       this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  47              		.loc 1 51 0
  48 000e 8A78     		ldrb	r2, [r1, #2]	@ zero_extendqisi2
  49 0010 43EA0243 		orr	r3, r3, r2, lsl #16
  50 0014 4360     		str	r3, [r0, #4]
  52:ROSSerial/std_msgs/Header.h ****       this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  51              		.loc 1 52 0
  52 0016 CA78     		ldrb	r2, [r1, #3]	@ zero_extendqisi2
  53 0018 43EA0263 		orr	r3, r3, r2, lsl #24
  54 001c 4360     		str	r3, [r0, #4]
  55              	.LVL2:
  53:ROSSerial/std_msgs/Header.h ****       offset += sizeof(this->seq);
  54:ROSSerial/std_msgs/Header.h ****       this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
  56              		.loc 1 54 0
  57 001e 0B79     		ldrb	r3, [r1, #4]	@ zero_extendqisi2
  58 0020 8360     		str	r3, [r0, #8]
  55:ROSSerial/std_msgs/Header.h ****       this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  59              		.loc 1 55 0
  60 0022 4A79     		ldrb	r2, [r1, #5]	@ zero_extendqisi2
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 3


  61 0024 43EA0223 		orr	r3, r3, r2, lsl #8
  62 0028 8360     		str	r3, [r0, #8]
  56:ROSSerial/std_msgs/Header.h ****       this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  63              		.loc 1 56 0
  64 002a 8A79     		ldrb	r2, [r1, #6]	@ zero_extendqisi2
  65 002c 43EA0243 		orr	r3, r3, r2, lsl #16
  66 0030 8360     		str	r3, [r0, #8]
  57:ROSSerial/std_msgs/Header.h ****       this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  67              		.loc 1 57 0
  68 0032 CA79     		ldrb	r2, [r1, #7]	@ zero_extendqisi2
  69 0034 43EA0263 		orr	r3, r3, r2, lsl #24
  70 0038 8360     		str	r3, [r0, #8]
  71              	.LVL3:
  58:ROSSerial/std_msgs/Header.h ****       offset += sizeof(this->stamp.sec);
  59:ROSSerial/std_msgs/Header.h ****       this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
  72              		.loc 1 59 0
  73 003a 0B7A     		ldrb	r3, [r1, #8]	@ zero_extendqisi2
  74 003c C360     		str	r3, [r0, #12]
  60:ROSSerial/std_msgs/Header.h ****       this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  75              		.loc 1 60 0
  76 003e 4A7A     		ldrb	r2, [r1, #9]	@ zero_extendqisi2
  77 0040 43EA0223 		orr	r3, r3, r2, lsl #8
  78 0044 C360     		str	r3, [r0, #12]
  61:ROSSerial/std_msgs/Header.h ****       this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  79              		.loc 1 61 0
  80 0046 8A7A     		ldrb	r2, [r1, #10]	@ zero_extendqisi2
  81 0048 43EA0243 		orr	r3, r3, r2, lsl #16
  82 004c C360     		str	r3, [r0, #12]
  62:ROSSerial/std_msgs/Header.h ****       this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  83              		.loc 1 62 0
  84 004e CA7A     		ldrb	r2, [r1, #11]	@ zero_extendqisi2
  85 0050 43EA0263 		orr	r3, r3, r2, lsl #24
  86 0054 C360     		str	r3, [r0, #12]
  87              	.LVL4:
  63:ROSSerial/std_msgs/Header.h ****       offset += sizeof(this->stamp.nsec);
  64:ROSSerial/std_msgs/Header.h ****       uint32_t length_frame_id;
  65:ROSSerial/std_msgs/Header.h ****       memcpy(&length_frame_id, (inbuffer + offset), sizeof(uint32_t));
  88              		.loc 1 65 0
  89 0056 CD68     		ldr	r5, [r1, #12]	@ unaligned
  90              	.LVL5:
  91              	.LBB85:
  66:ROSSerial/std_msgs/Header.h ****       offset += 4;
  67:ROSSerial/std_msgs/Header.h ****       for(unsigned int k= offset; k< offset+length_frame_id; ++k){
  92              		.loc 1 67 0
  93 0058 1023     		movs	r3, #16
  94              	.LVL6:
  95              	.L3:
  96              		.loc 1 67 0 is_stmt 0 discriminator 3
  97 005a 05F11002 		add	r2, r5, #16
  98 005e 9A42     		cmp	r2, r3
  99 0060 04D9     		bls	.L2
  68:ROSSerial/std_msgs/Header.h ****           inbuffer[k-1]=inbuffer[k];
 100              		.loc 1 68 0 is_stmt 1 discriminator 2
 101 0062 5A1E     		subs	r2, r3, #1
 102 0064 CC5C     		ldrb	r4, [r1, r3]	@ zero_extendqisi2
 103 0066 8C54     		strb	r4, [r1, r2]
  67:ROSSerial/std_msgs/Header.h ****           inbuffer[k-1]=inbuffer[k];
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 4


 104              		.loc 1 67 0 discriminator 2
 105 0068 0133     		adds	r3, r3, #1
 106              	.LVL7:
 107 006a F6E7     		b	.L3
 108              	.L2:
 109              	.LBE85:
  69:ROSSerial/std_msgs/Header.h ****       }
  70:ROSSerial/std_msgs/Header.h ****       inbuffer[offset+length_frame_id-1]=0;
 110              		.loc 1 70 0
 111 006c 0F35     		adds	r5, r5, #15
 112              	.LVL8:
 113 006e 0023     		movs	r3, #0
 114              	.LVL9:
 115 0070 4B55     		strb	r3, [r1, r5]
  71:ROSSerial/std_msgs/Header.h ****       this->frame_id = (char *)(inbuffer + offset-1);
 116              		.loc 1 71 0
 117 0072 0F31     		adds	r1, r1, #15
 118              	.LVL10:
 119 0074 0161     		str	r1, [r0, #16]
 120              	.LVL11:
  72:ROSSerial/std_msgs/Header.h ****       offset += length_frame_id;
  73:ROSSerial/std_msgs/Header.h ****      return offset;
  74:ROSSerial/std_msgs/Header.h ****     }
 121              		.loc 1 74 0
 122 0076 1046     		mov	r0, r2
 123              	.LVL12:
 124 0078 30BC     		pop	{r4, r5}
 125              	.LCFI1:
 126              		.cfi_restore 5
 127              		.cfi_restore 4
 128              		.cfi_def_cfa_offset 0
 129 007a 7047     		bx	lr
 130              		.cfi_endproc
 131              	.LFE475:
 132              		.cantunwind
 133              		.fnend
 135              		.section	.text._ZN8std_msgs6Header7getTypeEv,"axG",%progbits,_ZN8std_msgs6Header7getTypeEv,comdat
 136              		.align	1
 137              		.weak	_ZN8std_msgs6Header7getTypeEv
 138              		.syntax unified
 139              		.thumb
 140              		.thumb_func
 141              		.fpu fpv4-sp-d16
 143              	_ZN8std_msgs6Header7getTypeEv:
 144              		.fnstart
 145              	.LFB476:
  75:ROSSerial/std_msgs/Header.h **** 
  76:ROSSerial/std_msgs/Header.h ****     const char * getType(){ return "std_msgs/Header"; };
 146              		.loc 1 76 0
 147              		.cfi_startproc
 148              		@ args = 0, pretend = 0, frame = 0
 149              		@ frame_needed = 0, uses_anonymous_args = 0
 150              		@ link register save eliminated.
 151              	.LVL13:
 152              		.loc 1 76 0
 153 0000 0048     		ldr	r0, .L6
 154              	.LVL14:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 5


 155 0002 7047     		bx	lr
 156              	.L7:
 157              		.align	2
 158              	.L6:
 159 0004 00000000 		.word	.LC0
 160              		.cfi_endproc
 161              	.LFE476:
 162              		.cantunwind
 163              		.fnend
 165              		.section	.text._ZN8std_msgs6Header6getMD5Ev,"axG",%progbits,_ZN8std_msgs6Header6getMD5Ev,comdat
 166              		.align	1
 167              		.weak	_ZN8std_msgs6Header6getMD5Ev
 168              		.syntax unified
 169              		.thumb
 170              		.thumb_func
 171              		.fpu fpv4-sp-d16
 173              	_ZN8std_msgs6Header6getMD5Ev:
 174              		.fnstart
 175              	.LFB477:
  77:ROSSerial/std_msgs/Header.h ****     const char * getMD5(){ return "2176decaecbce78abc3b96ef049fabed"; };
 176              		.loc 1 77 0
 177              		.cfi_startproc
 178              		@ args = 0, pretend = 0, frame = 0
 179              		@ frame_needed = 0, uses_anonymous_args = 0
 180              		@ link register save eliminated.
 181              	.LVL15:
 182              		.loc 1 77 0
 183 0000 0048     		ldr	r0, .L9
 184              	.LVL16:
 185 0002 7047     		bx	lr
 186              	.L10:
 187              		.align	2
 188              	.L9:
 189 0004 00000000 		.word	.LC1
 190              		.cfi_endproc
 191              	.LFE477:
 192              		.cantunwind
 193              		.fnend
 195              		.section	.text._ZN11sensor_msgs10JointState7getTypeEv,"axG",%progbits,_ZN11sensor_msgs10JointState
 196              		.align	1
 197              		.weak	_ZN11sensor_msgs10JointState7getTypeEv
 198              		.syntax unified
 199              		.thumb
 200              		.thumb_func
 201              		.fpu fpv4-sp-d16
 203              	_ZN11sensor_msgs10JointState7getTypeEv:
 204              		.fnstart
 205              	.LFB489:
 206              		.file 2 "ROSSerial/sensor_msgs/JointState.h"
   1:ROSSerial/sensor_msgs/JointState.h **** #ifndef _ROS_sensor_msgs_JointState_h
   2:ROSSerial/sensor_msgs/JointState.h **** #define _ROS_sensor_msgs_JointState_h
   3:ROSSerial/sensor_msgs/JointState.h **** 
   4:ROSSerial/sensor_msgs/JointState.h **** #include <stdint.h>
   5:ROSSerial/sensor_msgs/JointState.h **** #include <string.h>
   6:ROSSerial/sensor_msgs/JointState.h **** #include <stdlib.h>
   7:ROSSerial/sensor_msgs/JointState.h **** #include "ros/msg.h"
   8:ROSSerial/sensor_msgs/JointState.h **** #include "std_msgs/Header.h"
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 6


   9:ROSSerial/sensor_msgs/JointState.h **** 
  10:ROSSerial/sensor_msgs/JointState.h **** namespace sensor_msgs
  11:ROSSerial/sensor_msgs/JointState.h **** {
  12:ROSSerial/sensor_msgs/JointState.h **** 
  13:ROSSerial/sensor_msgs/JointState.h ****   class JointState : public ros::Msg
  14:ROSSerial/sensor_msgs/JointState.h ****   {
  15:ROSSerial/sensor_msgs/JointState.h ****     public:
  16:ROSSerial/sensor_msgs/JointState.h ****       typedef std_msgs::Header _header_type;
  17:ROSSerial/sensor_msgs/JointState.h ****       _header_type header;
  18:ROSSerial/sensor_msgs/JointState.h ****       uint32_t name_length;
  19:ROSSerial/sensor_msgs/JointState.h ****       typedef char* _name_type;
  20:ROSSerial/sensor_msgs/JointState.h ****       _name_type st_name;
  21:ROSSerial/sensor_msgs/JointState.h ****       _name_type * name;
  22:ROSSerial/sensor_msgs/JointState.h ****       uint32_t position_length;
  23:ROSSerial/sensor_msgs/JointState.h ****       typedef float _position_type;
  24:ROSSerial/sensor_msgs/JointState.h ****       _position_type st_position;
  25:ROSSerial/sensor_msgs/JointState.h ****       _position_type * position;
  26:ROSSerial/sensor_msgs/JointState.h ****       uint32_t velocity_length;
  27:ROSSerial/sensor_msgs/JointState.h ****       typedef float _velocity_type;
  28:ROSSerial/sensor_msgs/JointState.h ****       _velocity_type st_velocity;
  29:ROSSerial/sensor_msgs/JointState.h ****       _velocity_type * velocity;
  30:ROSSerial/sensor_msgs/JointState.h ****       uint32_t effort_length;
  31:ROSSerial/sensor_msgs/JointState.h ****       typedef float _effort_type;
  32:ROSSerial/sensor_msgs/JointState.h ****       _effort_type st_effort;
  33:ROSSerial/sensor_msgs/JointState.h ****       _effort_type * effort;
  34:ROSSerial/sensor_msgs/JointState.h **** 
  35:ROSSerial/sensor_msgs/JointState.h ****     JointState():
  36:ROSSerial/sensor_msgs/JointState.h ****       header(),
  37:ROSSerial/sensor_msgs/JointState.h ****       name_length(0), name(NULL),
  38:ROSSerial/sensor_msgs/JointState.h ****       position_length(0), position(NULL),
  39:ROSSerial/sensor_msgs/JointState.h ****       velocity_length(0), velocity(NULL),
  40:ROSSerial/sensor_msgs/JointState.h ****       effort_length(0), effort(NULL)
  41:ROSSerial/sensor_msgs/JointState.h ****     {
  42:ROSSerial/sensor_msgs/JointState.h ****     }
  43:ROSSerial/sensor_msgs/JointState.h **** 
  44:ROSSerial/sensor_msgs/JointState.h ****     virtual int serialize(unsigned char *outbuffer) const
  45:ROSSerial/sensor_msgs/JointState.h ****     {
  46:ROSSerial/sensor_msgs/JointState.h ****       int offset = 0;
  47:ROSSerial/sensor_msgs/JointState.h ****       offset += this->header.serialize(outbuffer + offset);
  48:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 0) = (this->name_length >> (8 * 0)) & 0xFF;
  49:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 1) = (this->name_length >> (8 * 1)) & 0xFF;
  50:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 2) = (this->name_length >> (8 * 2)) & 0xFF;
  51:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 3) = (this->name_length >> (8 * 3)) & 0xFF;
  52:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->name_length);
  53:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < name_length; i++){
  54:ROSSerial/sensor_msgs/JointState.h ****       uint32_t length_namei = strlen(this->name[i]);
  55:ROSSerial/sensor_msgs/JointState.h ****       varToArr(outbuffer + offset, length_namei);
  56:ROSSerial/sensor_msgs/JointState.h ****       offset += 4;
  57:ROSSerial/sensor_msgs/JointState.h ****       memcpy(outbuffer + offset, this->name[i], length_namei);
  58:ROSSerial/sensor_msgs/JointState.h ****       offset += length_namei;
  59:ROSSerial/sensor_msgs/JointState.h ****       }
  60:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 0) = (this->position_length >> (8 * 0)) & 0xFF;
  61:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 1) = (this->position_length >> (8 * 1)) & 0xFF;
  62:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 2) = (this->position_length >> (8 * 2)) & 0xFF;
  63:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 3) = (this->position_length >> (8 * 3)) & 0xFF;
  64:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->position_length);
  65:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < position_length; i++){
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 7


  66:ROSSerial/sensor_msgs/JointState.h ****       offset += serializeAvrFloat64(outbuffer + offset, this->position[i]);
  67:ROSSerial/sensor_msgs/JointState.h ****       }
  68:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 0) = (this->velocity_length >> (8 * 0)) & 0xFF;
  69:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 1) = (this->velocity_length >> (8 * 1)) & 0xFF;
  70:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 2) = (this->velocity_length >> (8 * 2)) & 0xFF;
  71:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 3) = (this->velocity_length >> (8 * 3)) & 0xFF;
  72:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->velocity_length);
  73:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < velocity_length; i++){
  74:ROSSerial/sensor_msgs/JointState.h ****       offset += serializeAvrFloat64(outbuffer + offset, this->velocity[i]);
  75:ROSSerial/sensor_msgs/JointState.h ****       }
  76:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 0) = (this->effort_length >> (8 * 0)) & 0xFF;
  77:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 1) = (this->effort_length >> (8 * 1)) & 0xFF;
  78:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 2) = (this->effort_length >> (8 * 2)) & 0xFF;
  79:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 3) = (this->effort_length >> (8 * 3)) & 0xFF;
  80:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->effort_length);
  81:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < effort_length; i++){
  82:ROSSerial/sensor_msgs/JointState.h ****       offset += serializeAvrFloat64(outbuffer + offset, this->effort[i]);
  83:ROSSerial/sensor_msgs/JointState.h ****       }
  84:ROSSerial/sensor_msgs/JointState.h ****       return offset;
  85:ROSSerial/sensor_msgs/JointState.h ****     }
  86:ROSSerial/sensor_msgs/JointState.h **** 
  87:ROSSerial/sensor_msgs/JointState.h ****     virtual int deserialize(unsigned char *inbuffer)
  88:ROSSerial/sensor_msgs/JointState.h ****     {
  89:ROSSerial/sensor_msgs/JointState.h ****       int offset = 0;
  90:ROSSerial/sensor_msgs/JointState.h ****       offset += this->header.deserialize(inbuffer + offset);
  91:ROSSerial/sensor_msgs/JointState.h ****       uint32_t name_lengthT = ((uint32_t) (*(inbuffer + offset))); 
  92:ROSSerial/sensor_msgs/JointState.h ****       name_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
  93:ROSSerial/sensor_msgs/JointState.h ****       name_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
  94:ROSSerial/sensor_msgs/JointState.h ****       name_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
  95:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->name_length);
  96:ROSSerial/sensor_msgs/JointState.h ****       if(name_lengthT > name_length)
  97:ROSSerial/sensor_msgs/JointState.h ****         this->name = (char**)realloc(this->name, name_lengthT * sizeof(char*));
  98:ROSSerial/sensor_msgs/JointState.h ****       name_length = name_lengthT;
  99:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < name_length; i++){
 100:ROSSerial/sensor_msgs/JointState.h ****       uint32_t length_st_name;
 101:ROSSerial/sensor_msgs/JointState.h ****       arrToVar(length_st_name, (inbuffer + offset));
 102:ROSSerial/sensor_msgs/JointState.h ****       offset += 4;
 103:ROSSerial/sensor_msgs/JointState.h ****       for(unsigned int k= offset; k< offset+length_st_name; ++k){
 104:ROSSerial/sensor_msgs/JointState.h ****           inbuffer[k-1]=inbuffer[k];
 105:ROSSerial/sensor_msgs/JointState.h ****       }
 106:ROSSerial/sensor_msgs/JointState.h ****       inbuffer[offset+length_st_name-1]=0;
 107:ROSSerial/sensor_msgs/JointState.h ****       this->st_name = (char *)(inbuffer + offset-1);
 108:ROSSerial/sensor_msgs/JointState.h ****       offset += length_st_name;
 109:ROSSerial/sensor_msgs/JointState.h ****         memcpy( &(this->name[i]), &(this->st_name), sizeof(char*));
 110:ROSSerial/sensor_msgs/JointState.h ****       }
 111:ROSSerial/sensor_msgs/JointState.h ****       uint32_t position_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 112:ROSSerial/sensor_msgs/JointState.h ****       position_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 113:ROSSerial/sensor_msgs/JointState.h ****       position_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 114:ROSSerial/sensor_msgs/JointState.h ****       position_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 115:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->position_length);
 116:ROSSerial/sensor_msgs/JointState.h ****       if(position_lengthT > position_length)
 117:ROSSerial/sensor_msgs/JointState.h ****         this->position = (float*)realloc(this->position, position_lengthT * sizeof(float));
 118:ROSSerial/sensor_msgs/JointState.h ****       position_length = position_lengthT;
 119:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < position_length; i++){
 120:ROSSerial/sensor_msgs/JointState.h ****       offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_position));
 121:ROSSerial/sensor_msgs/JointState.h ****         memcpy( &(this->position[i]), &(this->st_position), sizeof(float));
 122:ROSSerial/sensor_msgs/JointState.h ****       }
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 8


 123:ROSSerial/sensor_msgs/JointState.h ****       uint32_t velocity_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 124:ROSSerial/sensor_msgs/JointState.h ****       velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 125:ROSSerial/sensor_msgs/JointState.h ****       velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 126:ROSSerial/sensor_msgs/JointState.h ****       velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 127:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->velocity_length);
 128:ROSSerial/sensor_msgs/JointState.h ****       if(velocity_lengthT > velocity_length)
 129:ROSSerial/sensor_msgs/JointState.h ****         this->velocity = (float*)realloc(this->velocity, velocity_lengthT * sizeof(float));
 130:ROSSerial/sensor_msgs/JointState.h ****       velocity_length = velocity_lengthT;
 131:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < velocity_length; i++){
 132:ROSSerial/sensor_msgs/JointState.h ****       offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_velocity));
 133:ROSSerial/sensor_msgs/JointState.h ****         memcpy( &(this->velocity[i]), &(this->st_velocity), sizeof(float));
 134:ROSSerial/sensor_msgs/JointState.h ****       }
 135:ROSSerial/sensor_msgs/JointState.h ****       uint32_t effort_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 136:ROSSerial/sensor_msgs/JointState.h ****       effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 137:ROSSerial/sensor_msgs/JointState.h ****       effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 138:ROSSerial/sensor_msgs/JointState.h ****       effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 139:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->effort_length);
 140:ROSSerial/sensor_msgs/JointState.h ****       if(effort_lengthT > effort_length)
 141:ROSSerial/sensor_msgs/JointState.h ****         this->effort = (float*)realloc(this->effort, effort_lengthT * sizeof(float));
 142:ROSSerial/sensor_msgs/JointState.h ****       effort_length = effort_lengthT;
 143:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < effort_length; i++){
 144:ROSSerial/sensor_msgs/JointState.h ****       offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_effort));
 145:ROSSerial/sensor_msgs/JointState.h ****         memcpy( &(this->effort[i]), &(this->st_effort), sizeof(float));
 146:ROSSerial/sensor_msgs/JointState.h ****       }
 147:ROSSerial/sensor_msgs/JointState.h ****      return offset;
 148:ROSSerial/sensor_msgs/JointState.h ****     }
 149:ROSSerial/sensor_msgs/JointState.h **** 
 150:ROSSerial/sensor_msgs/JointState.h ****     const char * getType(){ return "sensor_msgs/JointState"; };
 207              		.loc 2 150 0
 208              		.cfi_startproc
 209              		@ args = 0, pretend = 0, frame = 0
 210              		@ frame_needed = 0, uses_anonymous_args = 0
 211              		@ link register save eliminated.
 212              	.LVL17:
 213              		.loc 2 150 0
 214 0000 0048     		ldr	r0, .L12
 215              	.LVL18:
 216 0002 7047     		bx	lr
 217              	.L13:
 218              		.align	2
 219              	.L12:
 220 0004 00000000 		.word	.LC2
 221              		.cfi_endproc
 222              	.LFE489:
 223              		.cantunwind
 224              		.fnend
 226              		.section	.text._ZN11sensor_msgs10JointState6getMD5Ev,"axG",%progbits,_ZN11sensor_msgs10JointState6
 227              		.align	1
 228              		.weak	_ZN11sensor_msgs10JointState6getMD5Ev
 229              		.syntax unified
 230              		.thumb
 231              		.thumb_func
 232              		.fpu fpv4-sp-d16
 234              	_ZN11sensor_msgs10JointState6getMD5Ev:
 235              		.fnstart
 236              	.LFB490:
 151:ROSSerial/sensor_msgs/JointState.h ****     const char * getMD5(){ return "3066dcd76a6cfaef579bd0f34173e9fd"; };
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 9


 237              		.loc 2 151 0
 238              		.cfi_startproc
 239              		@ args = 0, pretend = 0, frame = 0
 240              		@ frame_needed = 0, uses_anonymous_args = 0
 241              		@ link register save eliminated.
 242              	.LVL19:
 243              		.loc 2 151 0
 244 0000 0048     		ldr	r0, .L15
 245              	.LVL20:
 246 0002 7047     		bx	lr
 247              	.L16:
 248              		.align	2
 249              	.L15:
 250 0004 00000000 		.word	.LC3
 251              		.cfi_endproc
 252              	.LFE490:
 253              		.cantunwind
 254              		.fnend
 256              		.section	.text._Z41__static_initialization_and_destruction_0ii,"ax",%progbits
 257              		.align	1
 258              		.syntax unified
 259              		.thumb
 260              		.thumb_func
 261              		.fpu fpv4-sp-d16
 263              	_Z41__static_initialization_and_destruction_0ii:
 264              		.fnstart
 265              	.LFB506:
 266              		.file 3 "./Src/ROS_subscribe.cpp"
   1:./Src/ROS_subscribe.cpp **** /*
   2:./Src/ROS_subscribe.cpp ****  * ros_subscribe.cpp
   3:./Src/ROS_subscribe.cpp ****  *
   4:./Src/ROS_subscribe.cpp ****  *  Created on: Mar 18, 2019
   5:./Src/ROS_subscribe.cpp ****  *      Author: Shirish Jamthe
   6:./Src/ROS_subscribe.cpp ****  * 
   7:./Src/ROS_subscribe.cpp ****  */
   8:./Src/ROS_subscribe.cpp **** 
   9:./Src/ROS_subscribe.cpp **** #include "ROS_subscribe.h"
  10:./Src/ROS_subscribe.cpp **** 
  11:./Src/ROS_subscribe.cpp **** static sensor_msgs::JointState wheelPositions;
  12:./Src/ROS_subscribe.cpp **** 
  13:./Src/ROS_subscribe.cpp **** void wheels_cmd_cb(unsigned char* msg)
  14:./Src/ROS_subscribe.cpp **** {
  15:./Src/ROS_subscribe.cpp **** 	wheelPositions.deserialize(msg);  
  16:./Src/ROS_subscribe.cpp **** }
  17:./Src/ROS_subscribe.cpp **** 
  18:./Src/ROS_subscribe.cpp **** sensor_msgs::JointState getWheelPositions()
  19:./Src/ROS_subscribe.cpp **** {
  20:./Src/ROS_subscribe.cpp **** 	return wheelPositions;
  21:./Src/ROS_subscribe.cpp **** }
  22:./Src/ROS_subscribe.cpp **** 
  23:./Src/ROS_subscribe.cpp **** uint32_t rosSubscribeWheelsCmd(ros::NodeHandle *nh)
  24:./Src/ROS_subscribe.cpp **** {
  25:./Src/ROS_subscribe.cpp ****     ros::SubscriberType sub ;
  26:./Src/ROS_subscribe.cpp ****     const sensor_msgs::JointState msg;
  27:./Src/ROS_subscribe.cpp **** 	sub.topic_name = "wheels_cmd";
  28:./Src/ROS_subscribe.cpp **** 	sub.message_type = msg.getType();
  29:./Src/ROS_subscribe.cpp **** 	sub.md5sum = msg.getMD5();
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 10


  30:./Src/ROS_subscribe.cpp **** 	sub.callback = wheels_cmd_cb;
  31:./Src/ROS_subscribe.cpp **** 	
  32:./Src/ROS_subscribe.cpp **** 	nh->addSubscriber(sub);
  33:./Src/ROS_subscribe.cpp **** 	
  34:./Src/ROS_subscribe.cpp ****     return 1;
  35:./Src/ROS_subscribe.cpp **** }
 267              		.loc 3 35 0
 268              		.cfi_startproc
 269              		@ args = 0, pretend = 0, frame = 0
 270              		@ frame_needed = 0, uses_anonymous_args = 0
 271              		@ link register save eliminated.
 272              	.LVL21:
 273              		.loc 3 35 0
 274 0000 0128     		cmp	r0, #1
 275 0002 00D0     		beq	.L19
 276              	.LVL22:
 277              	.L17:
 278 0004 7047     		bx	lr
 279              	.LVL23:
 280              	.L19:
 281              		.loc 3 35 0 is_stmt 0 discriminator 1
 282 0006 4FF6FF73 		movw	r3, #65535
 283 000a 9942     		cmp	r1, r3
 284 000c FAD1     		bne	.L17
 285              	.LVL24:
 286              	.LBB86:
 287              	.LBB87:
 288              	.LBB88:
  40:ROSSerial/sensor_msgs/JointState.h ****     {
 289              		.loc 2 40 0 is_stmt 1
 290 000e 0A4B     		ldr	r3, .L20
 291 0010 1946     		mov	r1, r3
 292              	.LVL25:
 293 0012 0A4A     		ldr	r2, .L20+4
 294 0014 41F8082B 		str	r2, [r1], #8
 295 0018 0022     		movs	r2, #0
 296 001a 9A60     		str	r2, [r3, #8]
 297 001c CA60     		str	r2, [r1, #12]
 298              	.LVL26:
 299              	.LBB89:
 300              	.LBB90:
  13:ROSSerial/std_msgs/Header.h ****   {
 301              		.loc 1 13 0
 302 001e 0849     		ldr	r1, .L20+8
 303 0020 5960     		str	r1, [r3, #4]
 304              	.LVL27:
 305              	.LBB91:
 306              	.LBB92:
 307              	.LBB93:
 308              		.file 4 "ROSSerial/ros/time.h"
   1:ROSSerial/ros/time.h **** /*
   2:ROSSerial/ros/time.h ****  * Software License Agreement (BSD License)
   3:ROSSerial/ros/time.h ****  *
   4:ROSSerial/ros/time.h ****  * Copyright (c) 2011, Willow Garage, Inc.
   5:ROSSerial/ros/time.h ****  * All rights reserved.
   6:ROSSerial/ros/time.h ****  *
   7:ROSSerial/ros/time.h ****  * Redistribution and use in source and binary forms, with or without
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 11


   8:ROSSerial/ros/time.h ****  * modification, are permitted provided that the following conditions
   9:ROSSerial/ros/time.h ****  * are met:
  10:ROSSerial/ros/time.h ****  *
  11:ROSSerial/ros/time.h ****  *  * Redistributions of source code must retain the above copyright
  12:ROSSerial/ros/time.h ****  *    notice, this list of conditions and the following disclaimer.
  13:ROSSerial/ros/time.h ****  *  * Redistributions in binary form must reproduce the above
  14:ROSSerial/ros/time.h ****  *    copyright notice, this list of conditions and the following
  15:ROSSerial/ros/time.h ****  *    disclaimer in the documentation and/or other materials provided
  16:ROSSerial/ros/time.h ****  *    with the distribution.
  17:ROSSerial/ros/time.h ****  *  * Neither the name of Willow Garage, Inc. nor the names of its
  18:ROSSerial/ros/time.h ****  *    contributors may be used to endorse or promote prducts derived
  19:ROSSerial/ros/time.h ****  *    from this software without specific prior written permission.
  20:ROSSerial/ros/time.h ****  *
  21:ROSSerial/ros/time.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  22:ROSSerial/ros/time.h ****  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  23:ROSSerial/ros/time.h ****  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  24:ROSSerial/ros/time.h ****  * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
  25:ROSSerial/ros/time.h ****  * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  26:ROSSerial/ros/time.h ****  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  27:ROSSerial/ros/time.h ****  * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  28:ROSSerial/ros/time.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:ROSSerial/ros/time.h ****  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  30:ROSSerial/ros/time.h ****  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  31:ROSSerial/ros/time.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  32:ROSSerial/ros/time.h ****  * POSSIBILITY OF SUCH DAMAGE.
  33:ROSSerial/ros/time.h ****  */
  34:ROSSerial/ros/time.h **** 
  35:ROSSerial/ros/time.h **** #ifndef ROS_TIME_H_
  36:ROSSerial/ros/time.h **** #define ROS_TIME_H_
  37:ROSSerial/ros/time.h **** 
  38:ROSSerial/ros/time.h **** #include "ros/duration.h"
  39:ROSSerial/ros/time.h **** #include <math.h>
  40:ROSSerial/ros/time.h **** #include <stdint.h>
  41:ROSSerial/ros/time.h **** 
  42:ROSSerial/ros/time.h **** namespace ros
  43:ROSSerial/ros/time.h **** {
  44:ROSSerial/ros/time.h **** void normalizeSecNSec(uint32_t &sec, uint32_t &nsec);
  45:ROSSerial/ros/time.h **** 
  46:ROSSerial/ros/time.h **** class Time
  47:ROSSerial/ros/time.h **** {
  48:ROSSerial/ros/time.h **** public:
  49:ROSSerial/ros/time.h ****   uint32_t sec, nsec;
  50:ROSSerial/ros/time.h **** 
  51:ROSSerial/ros/time.h ****   Time() : sec(0), nsec(0) {}
 309              		.loc 4 51 0
 310 0022 DA60     		str	r2, [r3, #12]
 311 0024 1A61     		str	r2, [r3, #16]
 312              	.LVL28:
 313              	.LBE93:
 314              	.LBE92:
 315              	.LBE91:
 316              	.LBE90:
 317              	.LBE89:
  40:ROSSerial/sensor_msgs/JointState.h ****     {
 318              		.loc 2 40 0
 319 0026 9A61     		str	r2, [r3, #24]
 320 0028 1A62     		str	r2, [r3, #32]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 12


 321 002a 5A62     		str	r2, [r3, #36]
 322 002c DA62     		str	r2, [r3, #44]
 323 002e 1A63     		str	r2, [r3, #48]
 324 0030 9A63     		str	r2, [r3, #56]
 325 0032 DA63     		str	r2, [r3, #60]
 326 0034 5A64     		str	r2, [r3, #68]
 327              	.LBE88:
 328              	.LBE87:
 329              	.LBE86:
 330              		.loc 3 35 0
 331 0036 E5E7     		b	.L17
 332              	.L21:
 333              		.align	2
 334              	.L20:
 335 0038 00000000 		.word	.LANCHOR0
 336 003c 08000000 		.word	_ZTVN11sensor_msgs10JointStateE+8
 337 0040 08000000 		.word	_ZTVN8std_msgs6HeaderE+8
 338              		.cfi_endproc
 339              	.LFE506:
 340              		.cantunwind
 341              		.fnend
 343              		.section	.text._ZNK8std_msgs6Header9serializeEPh,"axG",%progbits,_ZNK8std_msgs6Header9serializeEPh
 344              		.align	1
 345              		.weak	_ZNK8std_msgs6Header9serializeEPh
 346              		.syntax unified
 347              		.thumb
 348              		.thumb_func
 349              		.fpu fpv4-sp-d16
 351              	_ZNK8std_msgs6Header9serializeEPh:
 352              		.fnstart
 353              	.LFB474:
  20:ROSSerial/std_msgs/Header.h ****     {
 354              		.loc 1 20 0
 355              		.cfi_startproc
 356              		@ args = 0, pretend = 0, frame = 0
 357              		@ frame_needed = 0, uses_anonymous_args = 0
 358              	.LVL29:
 359 0000 70B5     		push	{r4, r5, r6, lr}
 360              	.LCFI2:
 361              		.cfi_def_cfa_offset 16
 362              		.cfi_offset 4, -16
 363              		.cfi_offset 5, -12
 364              		.cfi_offset 6, -8
 365              		.cfi_offset 14, -4
 366 0002 0546     		mov	r5, r0
 367 0004 0C46     		mov	r4, r1
 368              	.LVL30:
  23:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 369              		.loc 1 23 0
 370 0006 4368     		ldr	r3, [r0, #4]
 371 0008 0B70     		strb	r3, [r1]
  24:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 372              		.loc 1 24 0
 373 000a 4368     		ldr	r3, [r0, #4]
 374 000c 1B0A     		lsrs	r3, r3, #8
 375 000e 4B70     		strb	r3, [r1, #1]
  25:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 13


 376              		.loc 1 25 0
 377 0010 C388     		ldrh	r3, [r0, #6]
 378 0012 8B70     		strb	r3, [r1, #2]
  26:ROSSerial/std_msgs/Header.h ****       offset += sizeof(this->seq);
 379              		.loc 1 26 0
 380 0014 C379     		ldrb	r3, [r0, #7]	@ zero_extendqisi2
 381 0016 CB70     		strb	r3, [r1, #3]
 382              	.LVL31:
  28:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 383              		.loc 1 28 0
 384 0018 8368     		ldr	r3, [r0, #8]
 385 001a 0B71     		strb	r3, [r1, #4]
  29:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 386              		.loc 1 29 0
 387 001c 8368     		ldr	r3, [r0, #8]
 388 001e 1B0A     		lsrs	r3, r3, #8
 389 0020 4B71     		strb	r3, [r1, #5]
  30:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 390              		.loc 1 30 0
 391 0022 4389     		ldrh	r3, [r0, #10]
 392 0024 8B71     		strb	r3, [r1, #6]
  31:ROSSerial/std_msgs/Header.h ****       offset += sizeof(this->stamp.sec);
 393              		.loc 1 31 0
 394 0026 C37A     		ldrb	r3, [r0, #11]	@ zero_extendqisi2
 395 0028 CB71     		strb	r3, [r1, #7]
 396              	.LVL32:
  33:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 397              		.loc 1 33 0
 398 002a C368     		ldr	r3, [r0, #12]
 399 002c 0B72     		strb	r3, [r1, #8]
  34:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 400              		.loc 1 34 0
 401 002e C368     		ldr	r3, [r0, #12]
 402 0030 1B0A     		lsrs	r3, r3, #8
 403 0032 4B72     		strb	r3, [r1, #9]
  35:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 404              		.loc 1 35 0
 405 0034 C389     		ldrh	r3, [r0, #14]
 406 0036 8B72     		strb	r3, [r1, #10]
  36:ROSSerial/std_msgs/Header.h ****       offset += sizeof(this->stamp.nsec);
 407              		.loc 1 36 0
 408 0038 C37B     		ldrb	r3, [r0, #15]	@ zero_extendqisi2
 409 003a CB72     		strb	r3, [r1, #11]
 410              	.LVL33:
  38:ROSSerial/std_msgs/Header.h ****       memcpy(outbuffer + offset, &length_frame_id, sizeof(uint32_t));
 411              		.loc 1 38 0
 412 003c 0069     		ldr	r0, [r0, #16]
 413              	.LVL34:
 414 003e FFF7FEFF 		bl	strlen
 415              	.LVL35:
 416 0042 0646     		mov	r6, r0
 417              	.LVL36:
  39:ROSSerial/std_msgs/Header.h ****       offset += 4;
 418              		.loc 1 39 0
 419 0044 E060     		str	r0, [r4, #12]	@ unaligned
 420              	.LVL37:
  41:ROSSerial/std_msgs/Header.h ****       offset += length_frame_id;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 14


 421              		.loc 1 41 0
 422 0046 0246     		mov	r2, r0
 423 0048 2969     		ldr	r1, [r5, #16]
 424 004a 04F11000 		add	r0, r4, #16
 425              	.LVL38:
 426 004e FFF7FEFF 		bl	memcpy
 427              	.LVL39:
  44:ROSSerial/std_msgs/Header.h **** 
 428              		.loc 1 44 0
 429 0052 06F11000 		add	r0, r6, #16
 430              	.LVL40:
 431 0056 70BD     		pop	{r4, r5, r6, pc}
 432              		.cfi_endproc
 433              	.LFE474:
 434              		.cantunwind
 435              		.fnend
 437              		.section	.text._ZNK11sensor_msgs10JointState9serializeEPh,"axG",%progbits,_ZNK11sensor_msgs10Joint
 438              		.align	1
 439              		.weak	_ZNK11sensor_msgs10JointState9serializeEPh
 440              		.syntax unified
 441              		.thumb
 442              		.thumb_func
 443              		.fpu fpv4-sp-d16
 445              	_ZNK11sensor_msgs10JointState9serializeEPh:
 446              		.fnstart
 447              	.LFB487:
  44:ROSSerial/sensor_msgs/JointState.h ****     {
 448              		.loc 2 44 0
 449              		.cfi_startproc
 450              		@ args = 0, pretend = 0, frame = 0
 451              		@ frame_needed = 0, uses_anonymous_args = 0
 452              	.LVL41:
 453 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 454              	.LCFI3:
 455              		.cfi_def_cfa_offset 32
 456              		.cfi_offset 3, -32
 457              		.cfi_offset 4, -28
 458              		.cfi_offset 5, -24
 459              		.cfi_offset 6, -20
 460              		.cfi_offset 7, -16
 461              		.cfi_offset 8, -12
 462              		.cfi_offset 9, -8
 463              		.cfi_offset 14, -4
 464 0004 0646     		mov	r6, r0
 465 0006 0D46     		mov	r5, r1
 466              	.LVL42:
 467              	.LBB109:
 468              	.LBB110:
  23:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 469              		.loc 1 23 0
 470 0008 8368     		ldr	r3, [r0, #8]
 471 000a 0B70     		strb	r3, [r1]
  24:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 472              		.loc 1 24 0
 473 000c 8368     		ldr	r3, [r0, #8]
 474 000e 1B0A     		lsrs	r3, r3, #8
 475 0010 4B70     		strb	r3, [r1, #1]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 15


  25:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 476              		.loc 1 25 0
 477 0012 4389     		ldrh	r3, [r0, #10]
 478 0014 8B70     		strb	r3, [r1, #2]
  26:ROSSerial/std_msgs/Header.h ****       offset += sizeof(this->seq);
 479              		.loc 1 26 0
 480 0016 C37A     		ldrb	r3, [r0, #11]	@ zero_extendqisi2
 481 0018 CB70     		strb	r3, [r1, #3]
 482              	.LVL43:
  28:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 483              		.loc 1 28 0
 484 001a C368     		ldr	r3, [r0, #12]
 485 001c 0B71     		strb	r3, [r1, #4]
  29:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 486              		.loc 1 29 0
 487 001e C368     		ldr	r3, [r0, #12]
 488 0020 1B0A     		lsrs	r3, r3, #8
 489 0022 4B71     		strb	r3, [r1, #5]
  30:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 490              		.loc 1 30 0
 491 0024 C389     		ldrh	r3, [r0, #14]
 492 0026 8B71     		strb	r3, [r1, #6]
  31:ROSSerial/std_msgs/Header.h ****       offset += sizeof(this->stamp.sec);
 493              		.loc 1 31 0
 494 0028 C37B     		ldrb	r3, [r0, #15]	@ zero_extendqisi2
 495 002a CB71     		strb	r3, [r1, #7]
 496              	.LVL44:
  33:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 497              		.loc 1 33 0
 498 002c 0369     		ldr	r3, [r0, #16]
 499 002e 0B72     		strb	r3, [r1, #8]
  34:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 500              		.loc 1 34 0
 501 0030 0369     		ldr	r3, [r0, #16]
 502 0032 1B0A     		lsrs	r3, r3, #8
 503 0034 4B72     		strb	r3, [r1, #9]
  35:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 504              		.loc 1 35 0
 505 0036 438A     		ldrh	r3, [r0, #18]
 506 0038 8B72     		strb	r3, [r1, #10]
  36:ROSSerial/std_msgs/Header.h ****       offset += sizeof(this->stamp.nsec);
 507              		.loc 1 36 0
 508 003a C37C     		ldrb	r3, [r0, #19]	@ zero_extendqisi2
 509 003c CB72     		strb	r3, [r1, #11]
 510              	.LVL45:
  38:ROSSerial/std_msgs/Header.h ****       memcpy(outbuffer + offset, &length_frame_id, sizeof(uint32_t));
 511              		.loc 1 38 0
 512 003e 4069     		ldr	r0, [r0, #20]
 513              	.LVL46:
 514 0040 FFF7FEFF 		bl	strlen
 515              	.LVL47:
 516 0044 0446     		mov	r4, r0
 517              	.LVL48:
  39:ROSSerial/std_msgs/Header.h ****       offset += 4;
 518              		.loc 1 39 0
 519 0046 E860     		str	r0, [r5, #12]	@ unaligned
 520              	.LVL49:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 16


  41:ROSSerial/std_msgs/Header.h ****       offset += length_frame_id;
 521              		.loc 1 41 0
 522 0048 0246     		mov	r2, r0
 523 004a 7169     		ldr	r1, [r6, #20]
 524 004c 05F11000 		add	r0, r5, #16
 525              	.LVL50:
 526 0050 FFF7FEFF 		bl	memcpy
 527              	.LVL51:
  42:ROSSerial/std_msgs/Header.h ****       return offset;
 528              		.loc 1 42 0
 529 0054 04F11003 		add	r3, r4, #16
 530              	.LVL52:
 531              	.LBE110:
 532              	.LBE109:
  48:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 1) = (this->name_length >> (8 * 1)) & 0xFF;
 533              		.loc 2 48 0
 534 0058 B269     		ldr	r2, [r6, #24]
 535 005a EA54     		strb	r2, [r5, r3]
  49:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 2) = (this->name_length >> (8 * 2)) & 0xFF;
 536              		.loc 2 49 0
 537 005c B369     		ldr	r3, [r6, #24]
 538 005e 1B0A     		lsrs	r3, r3, #8
 539 0060 04F11102 		add	r2, r4, #17
 540 0064 AB54     		strb	r3, [r5, r2]
  50:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 3) = (this->name_length >> (8 * 3)) & 0xFF;
 541              		.loc 2 50 0
 542 0066 728B     		ldrh	r2, [r6, #26]
 543 0068 04F11203 		add	r3, r4, #18
 544 006c EA54     		strb	r2, [r5, r3]
  51:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->name_length);
 545              		.loc 2 51 0
 546 006e F27E     		ldrb	r2, [r6, #27]	@ zero_extendqisi2
 547 0070 04F11303 		add	r3, r4, #19
 548 0074 EA54     		strb	r2, [r5, r3]
  52:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < name_length; i++){
 549              		.loc 2 52 0
 550 0076 1434     		adds	r4, r4, #20
 551              	.LVL53:
 552              	.LBB111:
  53:ROSSerial/sensor_msgs/JointState.h ****       uint32_t length_namei = strlen(this->name[i]);
 553              		.loc 2 53 0
 554 0078 4FF00008 		mov	r8, #0
 555 007c 0AE0     		b	.L28
 556              	.LVL54:
 557              	.L26:
 558              	.LBB112:
  56:ROSSerial/sensor_msgs/JointState.h ****       memcpy(outbuffer + offset, this->name[i], length_namei);
 559              		.loc 2 56 0 discriminator 2
 560 007e 0434     		adds	r4, r4, #4
 561              	.LVL55:
  57:ROSSerial/sensor_msgs/JointState.h ****       offset += length_namei;
 562              		.loc 2 57 0 discriminator 2
 563 0080 336A     		ldr	r3, [r6, #32]
 564 0082 3A46     		mov	r2, r7
 565 0084 53F80910 		ldr	r1, [r3, r9]
 566 0088 2819     		adds	r0, r5, r4
 567 008a FFF7FEFF 		bl	memcpy
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 17


 568              	.LVL56:
  58:ROSSerial/sensor_msgs/JointState.h ****       }
 569              		.loc 2 58 0 discriminator 2
 570 008e 3C44     		add	r4, r4, r7
 571              	.LVL57:
 572              	.LBE112:
  53:ROSSerial/sensor_msgs/JointState.h ****       uint32_t length_namei = strlen(this->name[i]);
 573              		.loc 2 53 0 discriminator 2
 574 0090 08F10108 		add	r8, r8, #1
 575              	.LVL58:
 576              	.L28:
  53:ROSSerial/sensor_msgs/JointState.h ****       uint32_t length_namei = strlen(this->name[i]);
 577              		.loc 2 53 0 is_stmt 0 discriminator 3
 578 0094 B369     		ldr	r3, [r6, #24]
 579 0096 4345     		cmp	r3, r8
 580 0098 12D9     		bls	.L25
 581              	.LBB115:
  54:ROSSerial/sensor_msgs/JointState.h ****       varToArr(outbuffer + offset, length_namei);
 582              		.loc 2 54 0 is_stmt 1 discriminator 2
 583 009a 336A     		ldr	r3, [r6, #32]
 584 009c 4FEA8809 		lsl	r9, r8, #2
 585 00a0 53F82800 		ldr	r0, [r3, r8, lsl #2]
 586 00a4 FFF7FEFF 		bl	strlen
 587              	.LVL59:
 588 00a8 0746     		mov	r7, r0
 589              	.LVL60:
  55:ROSSerial/sensor_msgs/JointState.h ****       offset += 4;
 590              		.loc 2 55 0 discriminator 2
 591 00aa 2046     		mov	r0, r4
 592              	.LVL61:
 593              	.LBB113:
 594              	.LBB114:
 595              		.file 5 "ROSSerial/ros/msg.h"
   1:ROSSerial/ros/msg.h **** /*
   2:ROSSerial/ros/msg.h ****  * Software License Agreement (BSD License)
   3:ROSSerial/ros/msg.h ****  *
   4:ROSSerial/ros/msg.h ****  * Copyright (c) 2011, Willow Garage, Inc.
   5:ROSSerial/ros/msg.h ****  * All rights reserved.
   6:ROSSerial/ros/msg.h ****  *
   7:ROSSerial/ros/msg.h ****  * Redistribution and use in source and binary forms, with or without
   8:ROSSerial/ros/msg.h ****  * modification, are permitted provided that the following conditions
   9:ROSSerial/ros/msg.h ****  * are met:
  10:ROSSerial/ros/msg.h ****  *
  11:ROSSerial/ros/msg.h ****  *  * Redistributions of source code must retain the above copyright
  12:ROSSerial/ros/msg.h ****  *    notice, this list of conditions and the following disclaimer.
  13:ROSSerial/ros/msg.h ****  *  * Redistributions in binary form must reproduce the above
  14:ROSSerial/ros/msg.h ****  *    copyright notice, this list of conditions and the following
  15:ROSSerial/ros/msg.h ****  *    disclaimer in the documentation and/or other materials provided
  16:ROSSerial/ros/msg.h ****  *    with the distribution.
  17:ROSSerial/ros/msg.h ****  *  * Neither the name of Willow Garage, Inc. nor the names of its
  18:ROSSerial/ros/msg.h ****  *    contributors may be used to endorse or promote prducts derived
  19:ROSSerial/ros/msg.h ****  *    from this software without specific prior written permission.
  20:ROSSerial/ros/msg.h ****  *
  21:ROSSerial/ros/msg.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  22:ROSSerial/ros/msg.h ****  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  23:ROSSerial/ros/msg.h ****  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  24:ROSSerial/ros/msg.h ****  * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 18


  25:ROSSerial/ros/msg.h ****  * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  26:ROSSerial/ros/msg.h ****  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  27:ROSSerial/ros/msg.h ****  * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  28:ROSSerial/ros/msg.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:ROSSerial/ros/msg.h ****  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  30:ROSSerial/ros/msg.h ****  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  31:ROSSerial/ros/msg.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  32:ROSSerial/ros/msg.h ****  * POSSIBILITY OF SUCH DAMAGE.
  33:ROSSerial/ros/msg.h ****  */
  34:ROSSerial/ros/msg.h **** 
  35:ROSSerial/ros/msg.h **** #ifndef _ROS_MSG_H_
  36:ROSSerial/ros/msg.h **** #define _ROS_MSG_H_
  37:ROSSerial/ros/msg.h **** 
  38:ROSSerial/ros/msg.h **** #include <stdint.h>
  39:ROSSerial/ros/msg.h **** #include <stddef.h>
  40:ROSSerial/ros/msg.h **** 
  41:ROSSerial/ros/msg.h **** namespace ros
  42:ROSSerial/ros/msg.h **** {
  43:ROSSerial/ros/msg.h **** 
  44:ROSSerial/ros/msg.h **** /* Base Message Type */
  45:ROSSerial/ros/msg.h **** class Msg
  46:ROSSerial/ros/msg.h **** {
  47:ROSSerial/ros/msg.h **** public:
  48:ROSSerial/ros/msg.h ****   virtual int serialize(unsigned char *outbuffer) const = 0;
  49:ROSSerial/ros/msg.h ****   virtual int deserialize(unsigned char *data) = 0;
  50:ROSSerial/ros/msg.h ****   virtual const char * getType() = 0;
  51:ROSSerial/ros/msg.h ****   virtual const char * getMD5() = 0;
  52:ROSSerial/ros/msg.h **** 
  53:ROSSerial/ros/msg.h ****   /**
  54:ROSSerial/ros/msg.h ****    * @brief This tricky function handles promoting a 32bit float to a 64bit
  55:ROSSerial/ros/msg.h ****    *        double, so that AVR can publish messages containing float64
  56:ROSSerial/ros/msg.h ****    *        fields, despite AVV having no native support for double.
  57:ROSSerial/ros/msg.h ****    *
  58:ROSSerial/ros/msg.h ****    * @param[out] outbuffer pointer for buffer to serialize to.
  59:ROSSerial/ros/msg.h ****    * @param[in] f value to serialize.
  60:ROSSerial/ros/msg.h ****    *
  61:ROSSerial/ros/msg.h ****    * @return number of bytes to advance the buffer pointer.
  62:ROSSerial/ros/msg.h ****    *
  63:ROSSerial/ros/msg.h ****    */
  64:ROSSerial/ros/msg.h ****   static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
  65:ROSSerial/ros/msg.h ****   {
  66:ROSSerial/ros/msg.h ****     const int32_t* val = (int32_t*) &f;
  67:ROSSerial/ros/msg.h ****     int32_t exp = ((*val >> 23) & 255);
  68:ROSSerial/ros/msg.h ****     if (exp != 0)
  69:ROSSerial/ros/msg.h ****     {
  70:ROSSerial/ros/msg.h ****       exp += 1023 - 127;
  71:ROSSerial/ros/msg.h ****     }
  72:ROSSerial/ros/msg.h **** 
  73:ROSSerial/ros/msg.h ****     int32_t sig = *val;
  74:ROSSerial/ros/msg.h ****     *(outbuffer++) = 0;
  75:ROSSerial/ros/msg.h ****     *(outbuffer++) = 0;
  76:ROSSerial/ros/msg.h ****     *(outbuffer++) = 0;
  77:ROSSerial/ros/msg.h ****     *(outbuffer++) = (sig << 5) & 0xff;
  78:ROSSerial/ros/msg.h ****     *(outbuffer++) = (sig >> 3) & 0xff;
  79:ROSSerial/ros/msg.h ****     *(outbuffer++) = (sig >> 11) & 0xff;
  80:ROSSerial/ros/msg.h ****     *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
  81:ROSSerial/ros/msg.h ****     *(outbuffer++) = (exp >> 4) & 0x7F;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 19


  82:ROSSerial/ros/msg.h **** 
  83:ROSSerial/ros/msg.h ****     // Mark negative bit as necessary.
  84:ROSSerial/ros/msg.h ****     if (f < 0)
  85:ROSSerial/ros/msg.h ****     {
  86:ROSSerial/ros/msg.h ****       *(outbuffer - 1) |= 0x80;
  87:ROSSerial/ros/msg.h ****     }
  88:ROSSerial/ros/msg.h **** 
  89:ROSSerial/ros/msg.h ****     return 8;
  90:ROSSerial/ros/msg.h ****   }
  91:ROSSerial/ros/msg.h **** 
  92:ROSSerial/ros/msg.h ****   /**
  93:ROSSerial/ros/msg.h ****    * @brief This tricky function handles demoting a 64bit double to a
  94:ROSSerial/ros/msg.h ****    *        32bit float, so that AVR can understand messages containing
  95:ROSSerial/ros/msg.h ****    *        float64 fields, despite AVR having no native support for double.
  96:ROSSerial/ros/msg.h ****    *
  97:ROSSerial/ros/msg.h ****    * @param[in] inbuffer pointer for buffer to deserialize from.
  98:ROSSerial/ros/msg.h ****    * @param[out] f pointer to place the deserialized value in.
  99:ROSSerial/ros/msg.h ****    *
 100:ROSSerial/ros/msg.h ****    * @return number of bytes to advance the buffer pointer.
 101:ROSSerial/ros/msg.h ****    */
 102:ROSSerial/ros/msg.h ****   static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 103:ROSSerial/ros/msg.h ****   {
 104:ROSSerial/ros/msg.h ****     uint32_t* val = (uint32_t*)f;
 105:ROSSerial/ros/msg.h ****     inbuffer += 3;
 106:ROSSerial/ros/msg.h **** 
 107:ROSSerial/ros/msg.h ****     // Copy truncated mantissa.
 108:ROSSerial/ros/msg.h ****     *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 109:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 110:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 111:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 112:ROSSerial/ros/msg.h **** 
 113:ROSSerial/ros/msg.h ****     // Copy truncated exponent.
 114:ROSSerial/ros/msg.h ****     uint32_t exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 115:ROSSerial/ros/msg.h ****     exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 116:ROSSerial/ros/msg.h ****     if (exp != 0)
 117:ROSSerial/ros/msg.h ****     {
 118:ROSSerial/ros/msg.h ****       *val |= ((exp) - 1023 + 127) << 23;
 119:ROSSerial/ros/msg.h ****     }
 120:ROSSerial/ros/msg.h **** 
 121:ROSSerial/ros/msg.h ****     // Copy negative sign.
 122:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 123:ROSSerial/ros/msg.h **** 
 124:ROSSerial/ros/msg.h ****     return 8;
 125:ROSSerial/ros/msg.h ****   }
 126:ROSSerial/ros/msg.h **** 
 127:ROSSerial/ros/msg.h ****   // Copy data from variable into a byte array
 128:ROSSerial/ros/msg.h ****   template<typename A, typename V>
 129:ROSSerial/ros/msg.h ****   static void varToArr(A arr, const V var)
 130:ROSSerial/ros/msg.h ****   {
 131:ROSSerial/ros/msg.h ****     for (size_t i = 0; i < sizeof(V); i++)
 596              		.loc 5 131 0 discriminator 2
 597 00ac 0023     		movs	r3, #0
 598              	.LVL62:
 599              	.L27:
 600              		.loc 5 131 0 is_stmt 0
 601 00ae 032B     		cmp	r3, #3
 602 00b0 E5D8     		bhi	.L26
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 20


 132:ROSSerial/ros/msg.h ****       arr[i] = (var >> (8 * i));
 603              		.loc 5 132 0 is_stmt 1
 604 00b2 DA00     		lsls	r2, r3, #3
 605 00b4 27FA02F2 		lsr	r2, r7, r2
 606 00b8 C118     		adds	r1, r0, r3
 607 00ba 6A54     		strb	r2, [r5, r1]
 131:ROSSerial/ros/msg.h ****       arr[i] = (var >> (8 * i));
 608              		.loc 5 131 0
 609 00bc 0133     		adds	r3, r3, #1
 610              	.LVL63:
 611 00be F6E7     		b	.L27
 612              	.LVL64:
 613              	.L25:
 614              	.LBE114:
 615              	.LBE113:
 616              	.LBE115:
 617              	.LBE111:
  60:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 1) = (this->position_length >> (8 * 1)) & 0xFF;
 618              		.loc 2 60 0
 619 00c0 736A     		ldr	r3, [r6, #36]
 620 00c2 2B55     		strb	r3, [r5, r4]
  61:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 2) = (this->position_length >> (8 * 2)) & 0xFF;
 621              		.loc 2 61 0
 622 00c4 736A     		ldr	r3, [r6, #36]
 623 00c6 1B0A     		lsrs	r3, r3, #8
 624 00c8 621C     		adds	r2, r4, #1
 625 00ca AB54     		strb	r3, [r5, r2]
  62:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 3) = (this->position_length >> (8 * 3)) & 0xFF;
 626              		.loc 2 62 0
 627 00cc F28C     		ldrh	r2, [r6, #38]
 628 00ce A31C     		adds	r3, r4, #2
 629 00d0 EA54     		strb	r2, [r5, r3]
  63:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->position_length);
 630              		.loc 2 63 0
 631 00d2 96F82720 		ldrb	r2, [r6, #39]	@ zero_extendqisi2
 632 00d6 E31C     		adds	r3, r4, #3
 633 00d8 EA54     		strb	r2, [r5, r3]
  64:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < position_length; i++){
 634              		.loc 2 64 0
 635 00da 201D     		adds	r0, r4, #4
 636              	.LVL65:
 637              	.LBB116:
  65:ROSSerial/sensor_msgs/JointState.h ****       offset += serializeAvrFloat64(outbuffer + offset, this->position[i]);
 638              		.loc 2 65 0
 639 00dc 0027     		movs	r7, #0
 640 00de 17E0     		b	.L33
 641              	.LVL66:
 642              	.L30:
 643              	.LBB117:
 644              	.LBB118:
  74:ROSSerial/ros/msg.h ****     *(outbuffer++) = 0;
 645              		.loc 5 74 0
 646 00e0 0024     		movs	r4, #0
 647 00e2 1470     		strb	r4, [r2]
 648              	.LVL67:
  75:ROSSerial/ros/msg.h ****     *(outbuffer++) = 0;
 649              		.loc 5 75 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 21


 650 00e4 5470     		strb	r4, [r2, #1]
 651              	.LVL68:
  76:ROSSerial/ros/msg.h ****     *(outbuffer++) = (sig << 5) & 0xff;
 652              		.loc 5 76 0
 653 00e6 9470     		strb	r4, [r2, #2]
  77:ROSSerial/ros/msg.h ****     *(outbuffer++) = (sig >> 3) & 0xff;
 654              		.loc 5 77 0
 655 00e8 5C01     		lsls	r4, r3, #5
 656              	.LVL69:
 657 00ea D470     		strb	r4, [r2, #3]
  78:ROSSerial/ros/msg.h ****     *(outbuffer++) = (sig >> 11) & 0xff;
 658              		.loc 5 78 0
 659 00ec DC10     		asrs	r4, r3, #3
 660              	.LVL70:
 661 00ee 1471     		strb	r4, [r2, #4]
  79:ROSSerial/ros/msg.h ****     *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 662              		.loc 5 79 0
 663 00f0 DC12     		asrs	r4, r3, #11
 664              	.LVL71:
 665 00f2 5471     		strb	r4, [r2, #5]
  80:ROSSerial/ros/msg.h ****     *(outbuffer++) = (exp >> 4) & 0x7F;
 666              		.loc 5 80 0
 667 00f4 C3F3C343 		ubfx	r3, r3, #19, #4
 668              	.LVL72:
 669 00f8 43EA0113 		orr	r3, r3, r1, lsl #4
 670 00fc 9371     		strb	r3, [r2, #6]
 671              	.LVL73:
  81:ROSSerial/ros/msg.h **** 
 672              		.loc 5 81 0
 673 00fe 0909     		lsrs	r1, r1, #4
 674              	.LVL74:
 675 0100 D171     		strb	r1, [r2, #7]
  84:ROSSerial/ros/msg.h ****     {
 676              		.loc 5 84 0
 677 0102 F5EEC07A 		vcmpe.f32	s15, #0
 678 0106 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 679 010a 13D4     		bmi	.L48
 680              	.L31:
 681              	.LVL75:
 682              	.LBE118:
 683              	.LBE117:
  66:ROSSerial/sensor_msgs/JointState.h ****       }
 684              		.loc 2 66 0
 685 010c 0830     		adds	r0, r0, #8
 686              	.LVL76:
  65:ROSSerial/sensor_msgs/JointState.h ****       offset += serializeAvrFloat64(outbuffer + offset, this->position[i]);
 687              		.loc 2 65 0
 688 010e 0137     		adds	r7, r7, #1
 689              	.LVL77:
 690              	.L33:
  65:ROSSerial/sensor_msgs/JointState.h ****       offset += serializeAvrFloat64(outbuffer + offset, this->position[i]);
 691              		.loc 2 65 0 is_stmt 0 discriminator 3
 692 0110 736A     		ldr	r3, [r6, #36]
 693 0112 BB42     		cmp	r3, r7
 694 0114 12D9     		bls	.L29
  66:ROSSerial/sensor_msgs/JointState.h ****       }
 695              		.loc 2 66 0 is_stmt 1 discriminator 2
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 22


 696 0116 2A18     		adds	r2, r5, r0
 697 0118 F36A     		ldr	r3, [r6, #44]
 698 011a 03EB8703 		add	r3, r3, r7, lsl #2
 699 011e D3ED007A 		vldr.32	s15, [r3]
 700              	.LVL78:
 701              	.LBB120:
 702              	.LBB119:
  67:ROSSerial/ros/msg.h ****     if (exp != 0)
 703              		.loc 5 67 0 discriminator 2
 704 0122 17EE903A 		vmov	r3, s15	@ int
 705 0126 C3F3C751 		ubfx	r1, r3, #23, #8
 706              	.LVL79:
  68:ROSSerial/ros/msg.h ****     {
 707              		.loc 5 68 0 discriminator 2
 708 012a 0029     		cmp	r1, #0
 709 012c D8D0     		beq	.L30
  70:ROSSerial/ros/msg.h ****     }
 710              		.loc 5 70 0
 711 012e 01F56071 		add	r1, r1, #896
 712              	.LVL80:
 713 0132 D5E7     		b	.L30
 714              	.LVL81:
 715              	.L48:
  86:ROSSerial/ros/msg.h ****     }
 716              		.loc 5 86 0
 717 0134 61F07F01 		orn	r1, r1, #127
 718 0138 D171     		strb	r1, [r2, #7]
 719 013a E7E7     		b	.L31
 720              	.LVL82:
 721              	.L29:
 722              	.LBE119:
 723              	.LBE120:
 724              	.LBE116:
  68:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 1) = (this->velocity_length >> (8 * 1)) & 0xFF;
 725              		.loc 2 68 0
 726 013c 336B     		ldr	r3, [r6, #48]
 727 013e 2B54     		strb	r3, [r5, r0]
  69:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 2) = (this->velocity_length >> (8 * 2)) & 0xFF;
 728              		.loc 2 69 0
 729 0140 336B     		ldr	r3, [r6, #48]
 730 0142 1B0A     		lsrs	r3, r3, #8
 731 0144 421C     		adds	r2, r0, #1
 732 0146 AB54     		strb	r3, [r5, r2]
  70:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 3) = (this->velocity_length >> (8 * 3)) & 0xFF;
 733              		.loc 2 70 0
 734 0148 728E     		ldrh	r2, [r6, #50]
 735 014a 831C     		adds	r3, r0, #2
 736 014c EA54     		strb	r2, [r5, r3]
  71:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->velocity_length);
 737              		.loc 2 71 0
 738 014e 96F83320 		ldrb	r2, [r6, #51]	@ zero_extendqisi2
 739 0152 C31C     		adds	r3, r0, #3
 740 0154 EA54     		strb	r2, [r5, r3]
  72:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < velocity_length; i++){
 741              		.loc 2 72 0
 742 0156 0430     		adds	r0, r0, #4
 743              	.LVL83:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 23


 744              	.LBB121:
  73:ROSSerial/sensor_msgs/JointState.h ****       offset += serializeAvrFloat64(outbuffer + offset, this->velocity[i]);
 745              		.loc 2 73 0
 746 0158 0024     		movs	r4, #0
 747 015a 17E0     		b	.L38
 748              	.LVL84:
 749              	.L35:
 750              	.LBB122:
 751              	.LBB123:
  74:ROSSerial/ros/msg.h ****     *(outbuffer++) = 0;
 752              		.loc 5 74 0
 753 015c 0027     		movs	r7, #0
 754 015e 1770     		strb	r7, [r2]
 755              	.LVL85:
  75:ROSSerial/ros/msg.h ****     *(outbuffer++) = 0;
 756              		.loc 5 75 0
 757 0160 5770     		strb	r7, [r2, #1]
 758              	.LVL86:
  76:ROSSerial/ros/msg.h ****     *(outbuffer++) = (sig << 5) & 0xff;
 759              		.loc 5 76 0
 760 0162 9770     		strb	r7, [r2, #2]
  77:ROSSerial/ros/msg.h ****     *(outbuffer++) = (sig >> 3) & 0xff;
 761              		.loc 5 77 0
 762 0164 5F01     		lsls	r7, r3, #5
 763              	.LVL87:
 764 0166 D770     		strb	r7, [r2, #3]
  78:ROSSerial/ros/msg.h ****     *(outbuffer++) = (sig >> 11) & 0xff;
 765              		.loc 5 78 0
 766 0168 DF10     		asrs	r7, r3, #3
 767              	.LVL88:
 768 016a 1771     		strb	r7, [r2, #4]
  79:ROSSerial/ros/msg.h ****     *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 769              		.loc 5 79 0
 770 016c DF12     		asrs	r7, r3, #11
 771              	.LVL89:
 772 016e 5771     		strb	r7, [r2, #5]
  80:ROSSerial/ros/msg.h ****     *(outbuffer++) = (exp >> 4) & 0x7F;
 773              		.loc 5 80 0
 774 0170 C3F3C343 		ubfx	r3, r3, #19, #4
 775              	.LVL90:
 776 0174 43EA0113 		orr	r3, r3, r1, lsl #4
 777 0178 9371     		strb	r3, [r2, #6]
 778              	.LVL91:
  81:ROSSerial/ros/msg.h **** 
 779              		.loc 5 81 0
 780 017a 0909     		lsrs	r1, r1, #4
 781              	.LVL92:
 782 017c D171     		strb	r1, [r2, #7]
  84:ROSSerial/ros/msg.h ****     {
 783              		.loc 5 84 0
 784 017e F5EEC07A 		vcmpe.f32	s15, #0
 785 0182 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 786 0186 13D4     		bmi	.L49
 787              	.L36:
 788              	.LVL93:
 789              	.LBE123:
 790              	.LBE122:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 24


  74:ROSSerial/sensor_msgs/JointState.h ****       }
 791              		.loc 2 74 0
 792 0188 0830     		adds	r0, r0, #8
 793              	.LVL94:
  73:ROSSerial/sensor_msgs/JointState.h ****       offset += serializeAvrFloat64(outbuffer + offset, this->velocity[i]);
 794              		.loc 2 73 0
 795 018a 0134     		adds	r4, r4, #1
 796              	.LVL95:
 797              	.L38:
  73:ROSSerial/sensor_msgs/JointState.h ****       offset += serializeAvrFloat64(outbuffer + offset, this->velocity[i]);
 798              		.loc 2 73 0 is_stmt 0 discriminator 3
 799 018c 336B     		ldr	r3, [r6, #48]
 800 018e A342     		cmp	r3, r4
 801 0190 12D9     		bls	.L34
  74:ROSSerial/sensor_msgs/JointState.h ****       }
 802              		.loc 2 74 0 is_stmt 1 discriminator 2
 803 0192 2A18     		adds	r2, r5, r0
 804 0194 B36B     		ldr	r3, [r6, #56]
 805 0196 03EB8403 		add	r3, r3, r4, lsl #2
 806 019a D3ED007A 		vldr.32	s15, [r3]
 807              	.LVL96:
 808              	.LBB125:
 809              	.LBB124:
  67:ROSSerial/ros/msg.h ****     if (exp != 0)
 810              		.loc 5 67 0 discriminator 2
 811 019e 17EE903A 		vmov	r3, s15	@ int
 812 01a2 C3F3C751 		ubfx	r1, r3, #23, #8
 813              	.LVL97:
  68:ROSSerial/ros/msg.h ****     {
 814              		.loc 5 68 0 discriminator 2
 815 01a6 0029     		cmp	r1, #0
 816 01a8 D8D0     		beq	.L35
  70:ROSSerial/ros/msg.h ****     }
 817              		.loc 5 70 0
 818 01aa 01F56071 		add	r1, r1, #896
 819              	.LVL98:
 820 01ae D5E7     		b	.L35
 821              	.LVL99:
 822              	.L49:
  86:ROSSerial/ros/msg.h ****     }
 823              		.loc 5 86 0
 824 01b0 61F07F01 		orn	r1, r1, #127
 825 01b4 D171     		strb	r1, [r2, #7]
 826 01b6 E7E7     		b	.L36
 827              	.LVL100:
 828              	.L34:
 829              	.LBE124:
 830              	.LBE125:
 831              	.LBE121:
  76:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 1) = (this->effort_length >> (8 * 1)) & 0xFF;
 832              		.loc 2 76 0
 833 01b8 F36B     		ldr	r3, [r6, #60]
 834 01ba 2B54     		strb	r3, [r5, r0]
  77:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 2) = (this->effort_length >> (8 * 2)) & 0xFF;
 835              		.loc 2 77 0
 836 01bc F36B     		ldr	r3, [r6, #60]
 837 01be 1B0A     		lsrs	r3, r3, #8
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 25


 838 01c0 421C     		adds	r2, r0, #1
 839 01c2 AB54     		strb	r3, [r5, r2]
  78:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 3) = (this->effort_length >> (8 * 3)) & 0xFF;
 840              		.loc 2 78 0
 841 01c4 F28F     		ldrh	r2, [r6, #62]
 842 01c6 831C     		adds	r3, r0, #2
 843 01c8 EA54     		strb	r2, [r5, r3]
  79:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->effort_length);
 844              		.loc 2 79 0
 845 01ca 96F83F20 		ldrb	r2, [r6, #63]	@ zero_extendqisi2
 846 01ce C31C     		adds	r3, r0, #3
 847 01d0 EA54     		strb	r2, [r5, r3]
  80:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < effort_length; i++){
 848              		.loc 2 80 0
 849 01d2 0430     		adds	r0, r0, #4
 850              	.LVL101:
 851              	.LBB126:
  81:ROSSerial/sensor_msgs/JointState.h ****       offset += serializeAvrFloat64(outbuffer + offset, this->effort[i]);
 852              		.loc 2 81 0
 853 01d4 0024     		movs	r4, #0
 854              	.LVL102:
 855 01d6 17E0     		b	.L43
 856              	.LVL103:
 857              	.L40:
 858              	.LBB127:
 859              	.LBB128:
  74:ROSSerial/ros/msg.h ****     *(outbuffer++) = 0;
 860              		.loc 5 74 0
 861 01d8 0027     		movs	r7, #0
 862 01da 1770     		strb	r7, [r2]
 863              	.LVL104:
  75:ROSSerial/ros/msg.h ****     *(outbuffer++) = 0;
 864              		.loc 5 75 0
 865 01dc 5770     		strb	r7, [r2, #1]
 866              	.LVL105:
  76:ROSSerial/ros/msg.h ****     *(outbuffer++) = (sig << 5) & 0xff;
 867              		.loc 5 76 0
 868 01de 9770     		strb	r7, [r2, #2]
  77:ROSSerial/ros/msg.h ****     *(outbuffer++) = (sig >> 3) & 0xff;
 869              		.loc 5 77 0
 870 01e0 5F01     		lsls	r7, r3, #5
 871              	.LVL106:
 872 01e2 D770     		strb	r7, [r2, #3]
  78:ROSSerial/ros/msg.h ****     *(outbuffer++) = (sig >> 11) & 0xff;
 873              		.loc 5 78 0
 874 01e4 DF10     		asrs	r7, r3, #3
 875              	.LVL107:
 876 01e6 1771     		strb	r7, [r2, #4]
  79:ROSSerial/ros/msg.h ****     *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 877              		.loc 5 79 0
 878 01e8 DF12     		asrs	r7, r3, #11
 879              	.LVL108:
 880 01ea 5771     		strb	r7, [r2, #5]
  80:ROSSerial/ros/msg.h ****     *(outbuffer++) = (exp >> 4) & 0x7F;
 881              		.loc 5 80 0
 882 01ec C3F3C343 		ubfx	r3, r3, #19, #4
 883              	.LVL109:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 26


 884 01f0 43EA0113 		orr	r3, r3, r1, lsl #4
 885 01f4 9371     		strb	r3, [r2, #6]
 886              	.LVL110:
  81:ROSSerial/ros/msg.h **** 
 887              		.loc 5 81 0
 888 01f6 0909     		lsrs	r1, r1, #4
 889              	.LVL111:
 890 01f8 D171     		strb	r1, [r2, #7]
  84:ROSSerial/ros/msg.h ****     {
 891              		.loc 5 84 0
 892 01fa F5EEC07A 		vcmpe.f32	s15, #0
 893 01fe F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 894 0202 13D4     		bmi	.L50
 895              	.L41:
 896              	.LVL112:
 897              	.LBE128:
 898              	.LBE127:
  82:ROSSerial/sensor_msgs/JointState.h ****       }
 899              		.loc 2 82 0
 900 0204 0830     		adds	r0, r0, #8
 901              	.LVL113:
  81:ROSSerial/sensor_msgs/JointState.h ****       offset += serializeAvrFloat64(outbuffer + offset, this->effort[i]);
 902              		.loc 2 81 0
 903 0206 0134     		adds	r4, r4, #1
 904              	.LVL114:
 905              	.L43:
  81:ROSSerial/sensor_msgs/JointState.h ****       offset += serializeAvrFloat64(outbuffer + offset, this->effort[i]);
 906              		.loc 2 81 0 is_stmt 0 discriminator 3
 907 0208 F36B     		ldr	r3, [r6, #60]
 908 020a A342     		cmp	r3, r4
 909 020c 12D9     		bls	.L24
  82:ROSSerial/sensor_msgs/JointState.h ****       }
 910              		.loc 2 82 0 is_stmt 1 discriminator 2
 911 020e 2A18     		adds	r2, r5, r0
 912 0210 736C     		ldr	r3, [r6, #68]
 913 0212 03EB8403 		add	r3, r3, r4, lsl #2
 914 0216 D3ED007A 		vldr.32	s15, [r3]
 915              	.LVL115:
 916              	.LBB130:
 917              	.LBB129:
  67:ROSSerial/ros/msg.h ****     if (exp != 0)
 918              		.loc 5 67 0 discriminator 2
 919 021a 17EE903A 		vmov	r3, s15	@ int
 920 021e C3F3C751 		ubfx	r1, r3, #23, #8
 921              	.LVL116:
  68:ROSSerial/ros/msg.h ****     {
 922              		.loc 5 68 0 discriminator 2
 923 0222 0029     		cmp	r1, #0
 924 0224 D8D0     		beq	.L40
  70:ROSSerial/ros/msg.h ****     }
 925              		.loc 5 70 0
 926 0226 01F56071 		add	r1, r1, #896
 927              	.LVL117:
 928 022a D5E7     		b	.L40
 929              	.LVL118:
 930              	.L50:
  86:ROSSerial/ros/msg.h ****     }
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 27


 931              		.loc 5 86 0
 932 022c 61F07F01 		orn	r1, r1, #127
 933 0230 D171     		strb	r1, [r2, #7]
 934 0232 E7E7     		b	.L41
 935              	.LVL119:
 936              	.L24:
 937              	.LBE129:
 938              	.LBE130:
 939              	.LBE126:
  85:ROSSerial/sensor_msgs/JointState.h **** 
 940              		.loc 2 85 0
 941 0234 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 942              		.cfi_endproc
 943              	.LFE487:
 944              		.cantunwind
 945              		.fnend
 947              		.section	.text._ZN11sensor_msgs10JointState11deserializeEPh,"axG",%progbits,_ZN11sensor_msgs10Join
 948              		.align	1
 949              		.weak	_ZN11sensor_msgs10JointState11deserializeEPh
 950              		.syntax unified
 951              		.thumb
 952              		.thumb_func
 953              		.fpu fpv4-sp-d16
 955              	_ZN11sensor_msgs10JointState11deserializeEPh:
 956              		.fnstart
 957              	.LFB488:
  87:ROSSerial/sensor_msgs/JointState.h ****     {
 958              		.loc 2 87 0
 959              		.cfi_startproc
 960              		@ args = 0, pretend = 0, frame = 0
 961              		@ frame_needed = 0, uses_anonymous_args = 0
 962              	.LVL120:
 963 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 964              	.LCFI4:
 965              		.cfi_def_cfa_offset 24
 966              		.cfi_offset 3, -24
 967              		.cfi_offset 4, -20
 968              		.cfi_offset 5, -16
 969              		.cfi_offset 6, -12
 970              		.cfi_offset 7, -8
 971              		.cfi_offset 14, -4
 972 0002 0446     		mov	r4, r0
 973 0004 0D46     		mov	r5, r1
 974              	.LVL121:
  90:ROSSerial/sensor_msgs/JointState.h ****       uint32_t name_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 975              		.loc 2 90 0
 976 0006 021D     		adds	r2, r0, #4
 977              	.LVL122:
 978              	.LBB158:
 979              	.LBB159:
  49:ROSSerial/std_msgs/Header.h ****       this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 980              		.loc 1 49 0
 981 0008 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 982 000a 5360     		str	r3, [r2, #4]
  50:ROSSerial/std_msgs/Header.h ****       this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 983              		.loc 1 50 0
 984 000c 4978     		ldrb	r1, [r1, #1]	@ zero_extendqisi2
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 28


 985              	.LVL123:
 986 000e 43EA0123 		orr	r3, r3, r1, lsl #8
 987 0012 5360     		str	r3, [r2, #4]
  51:ROSSerial/std_msgs/Header.h ****       this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 988              		.loc 1 51 0
 989 0014 A978     		ldrb	r1, [r5, #2]	@ zero_extendqisi2
 990 0016 43EA0143 		orr	r3, r3, r1, lsl #16
 991 001a 5360     		str	r3, [r2, #4]
  52:ROSSerial/std_msgs/Header.h ****       offset += sizeof(this->seq);
 992              		.loc 1 52 0
 993 001c E978     		ldrb	r1, [r5, #3]	@ zero_extendqisi2
 994 001e 43EA0163 		orr	r3, r3, r1, lsl #24
 995 0022 5360     		str	r3, [r2, #4]
 996              	.LVL124:
  54:ROSSerial/std_msgs/Header.h ****       this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 997              		.loc 1 54 0
 998 0024 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 999 0026 9360     		str	r3, [r2, #8]
  55:ROSSerial/std_msgs/Header.h ****       this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 1000              		.loc 1 55 0
 1001 0028 6979     		ldrb	r1, [r5, #5]	@ zero_extendqisi2
 1002 002a 43EA0123 		orr	r3, r3, r1, lsl #8
 1003 002e 9360     		str	r3, [r2, #8]
  56:ROSSerial/std_msgs/Header.h ****       this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 1004              		.loc 1 56 0
 1005 0030 A979     		ldrb	r1, [r5, #6]	@ zero_extendqisi2
 1006 0032 43EA0143 		orr	r3, r3, r1, lsl #16
 1007 0036 9360     		str	r3, [r2, #8]
  57:ROSSerial/std_msgs/Header.h ****       offset += sizeof(this->stamp.sec);
 1008              		.loc 1 57 0
 1009 0038 E979     		ldrb	r1, [r5, #7]	@ zero_extendqisi2
 1010 003a 43EA0163 		orr	r3, r3, r1, lsl #24
 1011 003e 9360     		str	r3, [r2, #8]
 1012              	.LVL125:
  59:ROSSerial/std_msgs/Header.h ****       this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 1013              		.loc 1 59 0
 1014 0040 2B7A     		ldrb	r3, [r5, #8]	@ zero_extendqisi2
 1015 0042 D360     		str	r3, [r2, #12]
  60:ROSSerial/std_msgs/Header.h ****       this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 1016              		.loc 1 60 0
 1017 0044 697A     		ldrb	r1, [r5, #9]	@ zero_extendqisi2
 1018 0046 43EA0123 		orr	r3, r3, r1, lsl #8
 1019 004a D360     		str	r3, [r2, #12]
  61:ROSSerial/std_msgs/Header.h ****       this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 1020              		.loc 1 61 0
 1021 004c A97A     		ldrb	r1, [r5, #10]	@ zero_extendqisi2
 1022 004e 43EA0143 		orr	r3, r3, r1, lsl #16
 1023 0052 D360     		str	r3, [r2, #12]
  62:ROSSerial/std_msgs/Header.h ****       offset += sizeof(this->stamp.nsec);
 1024              		.loc 1 62 0
 1025 0054 E97A     		ldrb	r1, [r5, #11]	@ zero_extendqisi2
 1026 0056 43EA0163 		orr	r3, r3, r1, lsl #24
 1027 005a D360     		str	r3, [r2, #12]
 1028              	.LVL126:
  65:ROSSerial/std_msgs/Header.h ****       offset += 4;
 1029              		.loc 1 65 0
 1030 005c EF68     		ldr	r7, [r5, #12]	@ unaligned
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 29


 1031              	.LVL127:
 1032              	.LBB160:
  67:ROSSerial/std_msgs/Header.h ****           inbuffer[k-1]=inbuffer[k];
 1033              		.loc 1 67 0
 1034 005e 1023     		movs	r3, #16
 1035              	.LVL128:
 1036              	.L53:
 1037 0060 07F11006 		add	r6, r7, #16
 1038 0064 9E42     		cmp	r6, r3
 1039 0066 04D9     		bls	.L52
  68:ROSSerial/std_msgs/Header.h ****       }
 1040              		.loc 1 68 0
 1041 0068 591E     		subs	r1, r3, #1
 1042 006a E85C     		ldrb	r0, [r5, r3]	@ zero_extendqisi2
 1043 006c 6854     		strb	r0, [r5, r1]
  67:ROSSerial/std_msgs/Header.h ****           inbuffer[k-1]=inbuffer[k];
 1044              		.loc 1 67 0
 1045 006e 0133     		adds	r3, r3, #1
 1046              	.LVL129:
 1047 0070 F6E7     		b	.L53
 1048              	.L52:
 1049              	.LBE160:
  70:ROSSerial/std_msgs/Header.h ****       this->frame_id = (char *)(inbuffer + offset-1);
 1050              		.loc 1 70 0
 1051 0072 0F37     		adds	r7, r7, #15
 1052              	.LVL130:
 1053 0074 0023     		movs	r3, #0
 1054              	.LVL131:
 1055 0076 EB55     		strb	r3, [r5, r7]
  71:ROSSerial/std_msgs/Header.h ****       offset += length_frame_id;
 1056              		.loc 1 71 0
 1057 0078 05F10F03 		add	r3, r5, #15
 1058 007c 1361     		str	r3, [r2, #16]
 1059              	.LVL132:
 1060              	.LBE159:
 1061              	.LBE158:
  91:ROSSerial/sensor_msgs/JointState.h ****       name_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 1062              		.loc 2 91 0
 1063 007e AF5D     		ldrb	r7, [r5, r6]	@ zero_extendqisi2
 1064              	.LVL133:
  92:ROSSerial/sensor_msgs/JointState.h ****       name_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 1065              		.loc 2 92 0
 1066 0080 731C     		adds	r3, r6, #1
 1067 0082 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1068 0084 47EA0327 		orr	r7, r7, r3, lsl #8
 1069              	.LVL134:
  93:ROSSerial/sensor_msgs/JointState.h ****       name_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 1070              		.loc 2 93 0
 1071 0088 B31C     		adds	r3, r6, #2
 1072 008a EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1073 008c 47EA0347 		orr	r7, r7, r3, lsl #16
 1074              	.LVL135:
  94:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->name_length);
 1075              		.loc 2 94 0
 1076 0090 F31C     		adds	r3, r6, #3
 1077 0092 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1078 0094 47EA0367 		orr	r7, r7, r3, lsl #24
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 30


 1079              	.LVL136:
  95:ROSSerial/sensor_msgs/JointState.h ****       if(name_lengthT > name_length)
 1080              		.loc 2 95 0
 1081 0098 0436     		adds	r6, r6, #4
 1082              	.LVL137:
  96:ROSSerial/sensor_msgs/JointState.h ****         this->name = (char**)realloc(this->name, name_lengthT * sizeof(char*));
 1083              		.loc 2 96 0
 1084 009a A369     		ldr	r3, [r4, #24]
 1085 009c BB42     		cmp	r3, r7
 1086 009e 02D3     		bcc	.L74
 1087              	.L54:
  98:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < name_length; i++){
 1088              		.loc 2 98 0
 1089 00a0 A761     		str	r7, [r4, #24]
 1090              	.LVL138:
 1091              	.LBB161:
  99:ROSSerial/sensor_msgs/JointState.h ****       uint32_t length_st_name;
 1092              		.loc 2 99 0
 1093 00a2 0020     		movs	r0, #0
 1094 00a4 1AE0     		b	.L60
 1095              	.LVL139:
 1096              	.L74:
 1097              	.LBE161:
  97:ROSSerial/sensor_msgs/JointState.h ****       name_length = name_lengthT;
 1098              		.loc 2 97 0
 1099 00a6 B900     		lsls	r1, r7, #2
 1100 00a8 206A     		ldr	r0, [r4, #32]
 1101 00aa FFF7FEFF 		bl	realloc
 1102              	.LVL140:
 1103 00ae 2062     		str	r0, [r4, #32]
 1104 00b0 F6E7     		b	.L54
 1105              	.LVL141:
 1106              	.L56:
 1107              	.LBB168:
 1108              	.LBB162:
 102:ROSSerial/sensor_msgs/JointState.h ****       for(unsigned int k= offset; k< offset+length_st_name; ++k){
 1109              		.loc 2 102 0
 1110 00b2 0436     		adds	r6, r6, #4
 1111              	.LVL142:
 1112              	.LBB163:
 103:ROSSerial/sensor_msgs/JointState.h ****           inbuffer[k-1]=inbuffer[k];
 1113              		.loc 2 103 0
 1114 00b4 3346     		mov	r3, r6
 1115              	.LVL143:
 1116              	.L59:
 103:ROSSerial/sensor_msgs/JointState.h ****           inbuffer[k-1]=inbuffer[k];
 1117              		.loc 2 103 0 is_stmt 0 discriminator 3
 1118 00b6 B118     		adds	r1, r6, r2
 1119 00b8 9942     		cmp	r1, r3
 1120 00ba 04D9     		bls	.L58
 104:ROSSerial/sensor_msgs/JointState.h ****       }
 1121              		.loc 2 104 0 is_stmt 1 discriminator 2
 1122 00bc 591E     		subs	r1, r3, #1
 1123 00be EF5C     		ldrb	r7, [r5, r3]	@ zero_extendqisi2
 1124 00c0 6F54     		strb	r7, [r5, r1]
 103:ROSSerial/sensor_msgs/JointState.h ****           inbuffer[k-1]=inbuffer[k];
 1125              		.loc 2 103 0 discriminator 2
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 31


 1126 00c2 0133     		adds	r3, r3, #1
 1127              	.LVL144:
 1128 00c4 F7E7     		b	.L59
 1129              	.L58:
 1130              	.LBE163:
 106:ROSSerial/sensor_msgs/JointState.h ****       this->st_name = (char *)(inbuffer + offset-1);
 1131              		.loc 2 106 0 discriminator 2
 1132 00c6 4B1E     		subs	r3, r1, #1
 1133              	.LVL145:
 1134 00c8 0022     		movs	r2, #0
 1135              	.LVL146:
 1136 00ca EA54     		strb	r2, [r5, r3]
 107:ROSSerial/sensor_msgs/JointState.h ****       offset += length_st_name;
 1137              		.loc 2 107 0 discriminator 2
 1138 00cc 013E     		subs	r6, r6, #1
 1139 00ce AB19     		adds	r3, r5, r6
 1140 00d0 E361     		str	r3, [r4, #28]
 108:ROSSerial/sensor_msgs/JointState.h ****         memcpy( &(this->name[i]), &(this->st_name), sizeof(char*));
 1141              		.loc 2 108 0 discriminator 2
 1142 00d2 0E46     		mov	r6, r1
 1143              	.LVL147:
 109:ROSSerial/sensor_msgs/JointState.h ****       }
 1144              		.loc 2 109 0 discriminator 2
 1145 00d4 226A     		ldr	r2, [r4, #32]
 1146 00d6 42F82030 		str	r3, [r2, r0, lsl #2]	@ unaligned
 1147              	.LBE162:
  99:ROSSerial/sensor_msgs/JointState.h ****       uint32_t length_st_name;
 1148              		.loc 2 99 0 discriminator 2
 1149 00da 0130     		adds	r0, r0, #1
 1150              	.LVL148:
 1151              	.L60:
  99:ROSSerial/sensor_msgs/JointState.h ****       uint32_t length_st_name;
 1152              		.loc 2 99 0 is_stmt 0 discriminator 1
 1153 00dc A369     		ldr	r3, [r4, #24]
 1154 00de 8342     		cmp	r3, r0
 1155 00e0 0CD9     		bls	.L55
 1156              	.LBB167:
 101:ROSSerial/sensor_msgs/JointState.h ****       offset += 4;
 1157              		.loc 2 101 0 is_stmt 1
 1158 00e2 B446     		mov	ip, r6
 1159              	.LVL149:
 1160              	.LBB164:
 1161              	.LBB165:
 133:ROSSerial/ros/msg.h ****   }
 134:ROSSerial/ros/msg.h **** 
 135:ROSSerial/ros/msg.h ****   // Copy data from a byte array into variable
 136:ROSSerial/ros/msg.h ****   template<typename V, typename A>
 137:ROSSerial/ros/msg.h ****   static void arrToVar(V& var, const A arr)
 138:ROSSerial/ros/msg.h ****   {
 139:ROSSerial/ros/msg.h ****     var = 0;
 1162              		.loc 5 139 0
 1163 00e4 0022     		movs	r2, #0
 1164              	.LBB166:
 140:ROSSerial/ros/msg.h ****     for (size_t i = 0; i < sizeof(V); i++)
 1165              		.loc 5 140 0
 1166 00e6 1346     		mov	r3, r2
 1167              	.LVL150:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 32


 1168              	.L57:
 1169 00e8 032B     		cmp	r3, #3
 1170 00ea E2D8     		bhi	.L56
 141:ROSSerial/ros/msg.h ****       var |= (arr[i] << (8 * i));
 1171              		.loc 5 141 0
 1172 00ec 05EB0C01 		add	r1, r5, ip
 1173 00f0 C95C     		ldrb	r1, [r1, r3]	@ zero_extendqisi2
 1174 00f2 DF00     		lsls	r7, r3, #3
 1175 00f4 B940     		lsls	r1, r1, r7
 1176 00f6 0A43     		orrs	r2, r2, r1
 1177              	.LVL151:
 140:ROSSerial/ros/msg.h ****     for (size_t i = 0; i < sizeof(V); i++)
 1178              		.loc 5 140 0
 1179 00f8 0133     		adds	r3, r3, #1
 1180              	.LVL152:
 1181 00fa F5E7     		b	.L57
 1182              	.LVL153:
 1183              	.L55:
 1184              	.LBE166:
 1185              	.LBE165:
 1186              	.LBE164:
 1187              	.LBE167:
 1188              	.LBE168:
 111:ROSSerial/sensor_msgs/JointState.h ****       position_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 1189              		.loc 2 111 0
 1190 00fc AF5D     		ldrb	r7, [r5, r6]	@ zero_extendqisi2
 1191              	.LVL154:
 112:ROSSerial/sensor_msgs/JointState.h ****       position_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 1192              		.loc 2 112 0
 1193 00fe 731C     		adds	r3, r6, #1
 1194 0100 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1195 0102 47EA0327 		orr	r7, r7, r3, lsl #8
 1196              	.LVL155:
 113:ROSSerial/sensor_msgs/JointState.h ****       position_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 1197              		.loc 2 113 0
 1198 0106 B31C     		adds	r3, r6, #2
 1199 0108 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1200 010a 47EA0347 		orr	r7, r7, r3, lsl #16
 1201              	.LVL156:
 114:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->position_length);
 1202              		.loc 2 114 0
 1203 010e F31C     		adds	r3, r6, #3
 1204 0110 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1205 0112 47EA0367 		orr	r7, r7, r3, lsl #24
 1206              	.LVL157:
 115:ROSSerial/sensor_msgs/JointState.h ****       if(position_lengthT > position_length)
 1207              		.loc 2 115 0
 1208 0116 0436     		adds	r6, r6, #4
 1209              	.LVL158:
 116:ROSSerial/sensor_msgs/JointState.h ****         this->position = (float*)realloc(this->position, position_lengthT * sizeof(float));
 1210              		.loc 2 116 0
 1211 0118 636A     		ldr	r3, [r4, #36]
 1212 011a BB42     		cmp	r3, r7
 1213 011c 02D3     		bcc	.L75
 1214              	.LVL159:
 1215              	.L61:
 118:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < position_length; i++){
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 33


 1216              		.loc 2 118 0
 1217 011e 6762     		str	r7, [r4, #36]
 1218              	.LVL160:
 1219              	.LBB169:
 119:ROSSerial/sensor_msgs/JointState.h ****       offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_position));
 1220              		.loc 2 119 0
 1221 0120 0020     		movs	r0, #0
 1222 0122 12E0     		b	.L64
 1223              	.LVL161:
 1224              	.L75:
 1225              	.LBE169:
 117:ROSSerial/sensor_msgs/JointState.h ****       position_length = position_lengthT;
 1226              		.loc 2 117 0
 1227 0124 B900     		lsls	r1, r7, #2
 1228 0126 E06A     		ldr	r0, [r4, #44]
 1229              	.LVL162:
 1230 0128 FFF7FEFF 		bl	realloc
 1231              	.LVL163:
 1232 012c E062     		str	r0, [r4, #44]
 1233 012e F6E7     		b	.L61
 1234              	.LVL164:
 1235              	.L63:
 1236              	.LBB174:
 1237              	.LBB170:
 1238              	.LBB171:
 122:ROSSerial/ros/msg.h **** 
 1239              		.loc 5 122 0
 1240 0130 CB79     		ldrb	r3, [r1, #7]	@ zero_extendqisi2
 1241 0132 1B06     		lsls	r3, r3, #24
 1242 0134 03F00043 		and	r3, r3, #-2147483648
 1243 0138 A26A     		ldr	r2, [r4, #40]
 1244 013a 1343     		orrs	r3, r3, r2
 1245 013c A362     		str	r3, [r4, #40]
 1246              	.LVL165:
 1247              	.LBE171:
 1248              	.LBE170:
 120:ROSSerial/sensor_msgs/JointState.h ****         memcpy( &(this->position[i]), &(this->st_position), sizeof(float));
 1249              		.loc 2 120 0
 1250 013e 0836     		adds	r6, r6, #8
 1251              	.LVL166:
 121:ROSSerial/sensor_msgs/JointState.h ****       }
 1252              		.loc 2 121 0
 1253 0140 E36A     		ldr	r3, [r4, #44]
 1254 0142 A26A     		ldr	r2, [r4, #40]	@ unaligned
 1255 0144 43F82020 		str	r2, [r3, r0, lsl #2]	@ unaligned
 119:ROSSerial/sensor_msgs/JointState.h ****       offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_position));
 1256              		.loc 2 119 0
 1257 0148 0130     		adds	r0, r0, #1
 1258              	.LVL167:
 1259              	.L64:
 119:ROSSerial/sensor_msgs/JointState.h ****       offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_position));
 1260              		.loc 2 119 0 is_stmt 0 discriminator 3
 1261 014a 636A     		ldr	r3, [r4, #36]
 1262 014c 8342     		cmp	r3, r0
 1263 014e 1FD9     		bls	.L62
 120:ROSSerial/sensor_msgs/JointState.h ****         memcpy( &(this->position[i]), &(this->st_position), sizeof(float));
 1264              		.loc 2 120 0 is_stmt 1 discriminator 2
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 34


 1265 0150 A919     		adds	r1, r5, r6
 1266              	.LVL168:
 1267              	.LBB173:
 1268              	.LBB172:
 108:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 1269              		.loc 5 108 0 discriminator 2
 1270 0152 CB78     		ldrb	r3, [r1, #3]	@ zero_extendqisi2
 1271 0154 5B09     		lsrs	r3, r3, #5
 1272 0156 A362     		str	r3, [r4, #40]
 1273              	.LVL169:
 109:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 1274              		.loc 5 109 0 discriminator 2
 1275 0158 0A79     		ldrb	r2, [r1, #4]	@ zero_extendqisi2
 1276 015a 43EAC203 		orr	r3, r3, r2, lsl #3
 1277 015e A362     		str	r3, [r4, #40]
 1278              	.LVL170:
 110:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 1279              		.loc 5 110 0 discriminator 2
 1280 0160 4A79     		ldrb	r2, [r1, #5]	@ zero_extendqisi2
 1281 0162 43EAC223 		orr	r3, r3, r2, lsl #11
 1282 0166 A362     		str	r3, [r4, #40]
 111:ROSSerial/ros/msg.h **** 
 1283              		.loc 5 111 0 discriminator 2
 1284 0168 8A79     		ldrb	r2, [r1, #6]	@ zero_extendqisi2
 1285 016a D204     		lsls	r2, r2, #19
 1286 016c 02F4F002 		and	r2, r2, #7864320
 1287 0170 1343     		orrs	r3, r3, r2
 1288 0172 A362     		str	r3, [r4, #40]
 1289              	.LVL171:
 114:ROSSerial/ros/msg.h ****     exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 1290              		.loc 5 114 0 discriminator 2
 1291 0174 8F79     		ldrb	r7, [r1, #6]	@ zero_extendqisi2
 1292              	.LVL172:
 115:ROSSerial/ros/msg.h ****     if (exp != 0)
 1293              		.loc 5 115 0 discriminator 2
 1294 0176 CA79     		ldrb	r2, [r1, #7]	@ zero_extendqisi2
 1295 0178 1201     		lsls	r2, r2, #4
 1296 017a 02F4FE62 		and	r2, r2, #2032
 1297              	.LVL173:
 116:ROSSerial/ros/msg.h ****     {
 1298              		.loc 5 116 0 discriminator 2
 1299 017e 52EA1712 		orrs	r2, r2, r7, lsr #4
 1300              	.LVL174:
 1301 0182 D5D0     		beq	.L63
 118:ROSSerial/ros/msg.h ****     }
 1302              		.loc 5 118 0
 1303 0184 A2F56072 		sub	r2, r2, #896
 1304              	.LVL175:
 1305 0188 43EAC253 		orr	r3, r3, r2, lsl #23
 1306 018c A362     		str	r3, [r4, #40]
 1307 018e CFE7     		b	.L63
 1308              	.LVL176:
 1309              	.L62:
 1310              	.LBE172:
 1311              	.LBE173:
 1312              	.LBE174:
 123:ROSSerial/sensor_msgs/JointState.h ****       velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 35


 1313              		.loc 2 123 0
 1314 0190 AF5D     		ldrb	r7, [r5, r6]	@ zero_extendqisi2
 1315              	.LVL177:
 124:ROSSerial/sensor_msgs/JointState.h ****       velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 1316              		.loc 2 124 0
 1317 0192 731C     		adds	r3, r6, #1
 1318 0194 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1319 0196 47EA0327 		orr	r7, r7, r3, lsl #8
 1320              	.LVL178:
 125:ROSSerial/sensor_msgs/JointState.h ****       velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 1321              		.loc 2 125 0
 1322 019a B31C     		adds	r3, r6, #2
 1323 019c EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1324 019e 47EA0347 		orr	r7, r7, r3, lsl #16
 1325              	.LVL179:
 126:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->velocity_length);
 1326              		.loc 2 126 0
 1327 01a2 F31C     		adds	r3, r6, #3
 1328 01a4 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1329 01a6 47EA0367 		orr	r7, r7, r3, lsl #24
 1330              	.LVL180:
 127:ROSSerial/sensor_msgs/JointState.h ****       if(velocity_lengthT > velocity_length)
 1331              		.loc 2 127 0
 1332 01aa 0436     		adds	r6, r6, #4
 1333              	.LVL181:
 128:ROSSerial/sensor_msgs/JointState.h ****         this->velocity = (float*)realloc(this->velocity, velocity_lengthT * sizeof(float));
 1334              		.loc 2 128 0
 1335 01ac 236B     		ldr	r3, [r4, #48]
 1336 01ae BB42     		cmp	r3, r7
 1337 01b0 02D3     		bcc	.L76
 1338              	.LVL182:
 1339              	.L65:
 130:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < velocity_length; i++){
 1340              		.loc 2 130 0
 1341 01b2 2763     		str	r7, [r4, #48]
 1342              	.LVL183:
 1343              	.LBB175:
 131:ROSSerial/sensor_msgs/JointState.h ****       offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_velocity));
 1344              		.loc 2 131 0
 1345 01b4 0020     		movs	r0, #0
 1346 01b6 12E0     		b	.L68
 1347              	.LVL184:
 1348              	.L76:
 1349              	.LBE175:
 129:ROSSerial/sensor_msgs/JointState.h ****       velocity_length = velocity_lengthT;
 1350              		.loc 2 129 0
 1351 01b8 B900     		lsls	r1, r7, #2
 1352 01ba A06B     		ldr	r0, [r4, #56]
 1353              	.LVL185:
 1354 01bc FFF7FEFF 		bl	realloc
 1355              	.LVL186:
 1356 01c0 A063     		str	r0, [r4, #56]
 1357 01c2 F6E7     		b	.L65
 1358              	.LVL187:
 1359              	.L67:
 1360              	.LBB180:
 1361              	.LBB176:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 36


 1362              	.LBB177:
 122:ROSSerial/ros/msg.h **** 
 1363              		.loc 5 122 0
 1364 01c4 CB79     		ldrb	r3, [r1, #7]	@ zero_extendqisi2
 1365 01c6 1B06     		lsls	r3, r3, #24
 1366 01c8 03F00043 		and	r3, r3, #-2147483648
 1367 01cc 626B     		ldr	r2, [r4, #52]
 1368 01ce 1343     		orrs	r3, r3, r2
 1369 01d0 6363     		str	r3, [r4, #52]
 1370              	.LVL188:
 1371              	.LBE177:
 1372              	.LBE176:
 132:ROSSerial/sensor_msgs/JointState.h ****         memcpy( &(this->velocity[i]), &(this->st_velocity), sizeof(float));
 1373              		.loc 2 132 0
 1374 01d2 0836     		adds	r6, r6, #8
 1375              	.LVL189:
 133:ROSSerial/sensor_msgs/JointState.h ****       }
 1376              		.loc 2 133 0
 1377 01d4 A36B     		ldr	r3, [r4, #56]
 1378 01d6 626B     		ldr	r2, [r4, #52]	@ unaligned
 1379 01d8 43F82020 		str	r2, [r3, r0, lsl #2]	@ unaligned
 131:ROSSerial/sensor_msgs/JointState.h ****       offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_velocity));
 1380              		.loc 2 131 0
 1381 01dc 0130     		adds	r0, r0, #1
 1382              	.LVL190:
 1383              	.L68:
 131:ROSSerial/sensor_msgs/JointState.h ****       offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_velocity));
 1384              		.loc 2 131 0 is_stmt 0 discriminator 3
 1385 01de 236B     		ldr	r3, [r4, #48]
 1386 01e0 8342     		cmp	r3, r0
 1387 01e2 1FD9     		bls	.L66
 132:ROSSerial/sensor_msgs/JointState.h ****         memcpy( &(this->velocity[i]), &(this->st_velocity), sizeof(float));
 1388              		.loc 2 132 0 is_stmt 1 discriminator 2
 1389 01e4 A919     		adds	r1, r5, r6
 1390              	.LVL191:
 1391              	.LBB179:
 1392              	.LBB178:
 108:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 1393              		.loc 5 108 0 discriminator 2
 1394 01e6 CB78     		ldrb	r3, [r1, #3]	@ zero_extendqisi2
 1395 01e8 5B09     		lsrs	r3, r3, #5
 1396 01ea 6363     		str	r3, [r4, #52]
 1397              	.LVL192:
 109:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 1398              		.loc 5 109 0 discriminator 2
 1399 01ec 0A79     		ldrb	r2, [r1, #4]	@ zero_extendqisi2
 1400 01ee 43EAC203 		orr	r3, r3, r2, lsl #3
 1401 01f2 6363     		str	r3, [r4, #52]
 1402              	.LVL193:
 110:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 1403              		.loc 5 110 0 discriminator 2
 1404 01f4 4A79     		ldrb	r2, [r1, #5]	@ zero_extendqisi2
 1405 01f6 43EAC223 		orr	r3, r3, r2, lsl #11
 1406 01fa 6363     		str	r3, [r4, #52]
 111:ROSSerial/ros/msg.h **** 
 1407              		.loc 5 111 0 discriminator 2
 1408 01fc 8A79     		ldrb	r2, [r1, #6]	@ zero_extendqisi2
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 37


 1409 01fe D204     		lsls	r2, r2, #19
 1410 0200 02F4F002 		and	r2, r2, #7864320
 1411 0204 1343     		orrs	r3, r3, r2
 1412 0206 6363     		str	r3, [r4, #52]
 1413              	.LVL194:
 114:ROSSerial/ros/msg.h ****     exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 1414              		.loc 5 114 0 discriminator 2
 1415 0208 8F79     		ldrb	r7, [r1, #6]	@ zero_extendqisi2
 1416              	.LVL195:
 115:ROSSerial/ros/msg.h ****     if (exp != 0)
 1417              		.loc 5 115 0 discriminator 2
 1418 020a CA79     		ldrb	r2, [r1, #7]	@ zero_extendqisi2
 1419 020c 1201     		lsls	r2, r2, #4
 1420 020e 02F4FE62 		and	r2, r2, #2032
 1421              	.LVL196:
 116:ROSSerial/ros/msg.h ****     {
 1422              		.loc 5 116 0 discriminator 2
 1423 0212 52EA1712 		orrs	r2, r2, r7, lsr #4
 1424              	.LVL197:
 1425 0216 D5D0     		beq	.L67
 118:ROSSerial/ros/msg.h ****     }
 1426              		.loc 5 118 0
 1427 0218 A2F56072 		sub	r2, r2, #896
 1428              	.LVL198:
 1429 021c 43EAC253 		orr	r3, r3, r2, lsl #23
 1430 0220 6363     		str	r3, [r4, #52]
 1431 0222 CFE7     		b	.L67
 1432              	.LVL199:
 1433              	.L66:
 1434              	.LBE178:
 1435              	.LBE179:
 1436              	.LBE180:
 135:ROSSerial/sensor_msgs/JointState.h ****       effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 1437              		.loc 2 135 0
 1438 0224 AF5D     		ldrb	r7, [r5, r6]	@ zero_extendqisi2
 1439              	.LVL200:
 136:ROSSerial/sensor_msgs/JointState.h ****       effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 1440              		.loc 2 136 0
 1441 0226 731C     		adds	r3, r6, #1
 1442 0228 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1443 022a 47EA0327 		orr	r7, r7, r3, lsl #8
 1444              	.LVL201:
 137:ROSSerial/sensor_msgs/JointState.h ****       effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 1445              		.loc 2 137 0
 1446 022e B31C     		adds	r3, r6, #2
 1447 0230 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1448 0232 47EA0347 		orr	r7, r7, r3, lsl #16
 1449              	.LVL202:
 138:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->effort_length);
 1450              		.loc 2 138 0
 1451 0236 F31C     		adds	r3, r6, #3
 1452 0238 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1453 023a 47EA0367 		orr	r7, r7, r3, lsl #24
 1454              	.LVL203:
 139:ROSSerial/sensor_msgs/JointState.h ****       if(effort_lengthT > effort_length)
 1455              		.loc 2 139 0
 1456 023e 0436     		adds	r6, r6, #4
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 38


 1457              	.LVL204:
 140:ROSSerial/sensor_msgs/JointState.h ****         this->effort = (float*)realloc(this->effort, effort_lengthT * sizeof(float));
 1458              		.loc 2 140 0
 1459 0240 E36B     		ldr	r3, [r4, #60]
 1460 0242 BB42     		cmp	r3, r7
 1461 0244 02D3     		bcc	.L77
 1462              	.LVL205:
 1463              	.L69:
 142:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < effort_length; i++){
 1464              		.loc 2 142 0
 1465 0246 E763     		str	r7, [r4, #60]
 1466              	.LVL206:
 1467              	.LBB181:
 143:ROSSerial/sensor_msgs/JointState.h ****       offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_effort));
 1468              		.loc 2 143 0
 1469 0248 0020     		movs	r0, #0
 1470 024a 12E0     		b	.L72
 1471              	.LVL207:
 1472              	.L77:
 1473              	.LBE181:
 141:ROSSerial/sensor_msgs/JointState.h ****       effort_length = effort_lengthT;
 1474              		.loc 2 141 0
 1475 024c B900     		lsls	r1, r7, #2
 1476 024e 606C     		ldr	r0, [r4, #68]
 1477              	.LVL208:
 1478 0250 FFF7FEFF 		bl	realloc
 1479              	.LVL209:
 1480 0254 6064     		str	r0, [r4, #68]
 1481 0256 F6E7     		b	.L69
 1482              	.LVL210:
 1483              	.L71:
 1484              	.LBB186:
 1485              	.LBB182:
 1486              	.LBB183:
 122:ROSSerial/ros/msg.h **** 
 1487              		.loc 5 122 0
 1488 0258 CB79     		ldrb	r3, [r1, #7]	@ zero_extendqisi2
 1489 025a 1B06     		lsls	r3, r3, #24
 1490 025c 03F00043 		and	r3, r3, #-2147483648
 1491 0260 226C     		ldr	r2, [r4, #64]
 1492 0262 1343     		orrs	r3, r3, r2
 1493 0264 2364     		str	r3, [r4, #64]
 1494              	.LVL211:
 1495              	.LBE183:
 1496              	.LBE182:
 144:ROSSerial/sensor_msgs/JointState.h ****         memcpy( &(this->effort[i]), &(this->st_effort), sizeof(float));
 1497              		.loc 2 144 0
 1498 0266 0836     		adds	r6, r6, #8
 1499              	.LVL212:
 145:ROSSerial/sensor_msgs/JointState.h ****       }
 1500              		.loc 2 145 0
 1501 0268 636C     		ldr	r3, [r4, #68]
 1502 026a 226C     		ldr	r2, [r4, #64]	@ unaligned
 1503 026c 43F82020 		str	r2, [r3, r0, lsl #2]	@ unaligned
 143:ROSSerial/sensor_msgs/JointState.h ****       offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_effort));
 1504              		.loc 2 143 0
 1505 0270 0130     		adds	r0, r0, #1
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 39


 1506              	.LVL213:
 1507              	.L72:
 143:ROSSerial/sensor_msgs/JointState.h ****       offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_effort));
 1508              		.loc 2 143 0 is_stmt 0 discriminator 3
 1509 0272 E36B     		ldr	r3, [r4, #60]
 1510 0274 8342     		cmp	r3, r0
 1511 0276 1FD9     		bls	.L51
 144:ROSSerial/sensor_msgs/JointState.h ****         memcpy( &(this->effort[i]), &(this->st_effort), sizeof(float));
 1512              		.loc 2 144 0 is_stmt 1 discriminator 2
 1513 0278 A919     		adds	r1, r5, r6
 1514              	.LVL214:
 1515              	.LBB185:
 1516              	.LBB184:
 108:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 1517              		.loc 5 108 0 discriminator 2
 1518 027a CB78     		ldrb	r3, [r1, #3]	@ zero_extendqisi2
 1519 027c 5B09     		lsrs	r3, r3, #5
 1520 027e 2364     		str	r3, [r4, #64]
 1521              	.LVL215:
 109:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 1522              		.loc 5 109 0 discriminator 2
 1523 0280 0A79     		ldrb	r2, [r1, #4]	@ zero_extendqisi2
 1524 0282 43EAC203 		orr	r3, r3, r2, lsl #3
 1525 0286 2364     		str	r3, [r4, #64]
 1526              	.LVL216:
 110:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 1527              		.loc 5 110 0 discriminator 2
 1528 0288 4A79     		ldrb	r2, [r1, #5]	@ zero_extendqisi2
 1529 028a 43EAC223 		orr	r3, r3, r2, lsl #11
 1530 028e 2364     		str	r3, [r4, #64]
 111:ROSSerial/ros/msg.h **** 
 1531              		.loc 5 111 0 discriminator 2
 1532 0290 8A79     		ldrb	r2, [r1, #6]	@ zero_extendqisi2
 1533 0292 D204     		lsls	r2, r2, #19
 1534 0294 02F4F002 		and	r2, r2, #7864320
 1535 0298 1343     		orrs	r3, r3, r2
 1536 029a 2364     		str	r3, [r4, #64]
 1537              	.LVL217:
 114:ROSSerial/ros/msg.h ****     exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 1538              		.loc 5 114 0 discriminator 2
 1539 029c 8F79     		ldrb	r7, [r1, #6]	@ zero_extendqisi2
 1540              	.LVL218:
 115:ROSSerial/ros/msg.h ****     if (exp != 0)
 1541              		.loc 5 115 0 discriminator 2
 1542 029e CA79     		ldrb	r2, [r1, #7]	@ zero_extendqisi2
 1543 02a0 1201     		lsls	r2, r2, #4
 1544 02a2 02F4FE62 		and	r2, r2, #2032
 1545              	.LVL219:
 116:ROSSerial/ros/msg.h ****     {
 1546              		.loc 5 116 0 discriminator 2
 1547 02a6 52EA1712 		orrs	r2, r2, r7, lsr #4
 1548              	.LVL220:
 1549 02aa D5D0     		beq	.L71
 118:ROSSerial/ros/msg.h ****     }
 1550              		.loc 5 118 0
 1551 02ac A2F56072 		sub	r2, r2, #896
 1552              	.LVL221:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 40


 1553 02b0 43EAC253 		orr	r3, r3, r2, lsl #23
 1554 02b4 2364     		str	r3, [r4, #64]
 1555 02b6 CFE7     		b	.L71
 1556              	.LVL222:
 1557              	.L51:
 1558              	.LBE184:
 1559              	.LBE185:
 1560              	.LBE186:
 148:ROSSerial/sensor_msgs/JointState.h **** 
 1561              		.loc 2 148 0
 1562 02b8 3046     		mov	r0, r6
 1563              	.LVL223:
 1564 02ba F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1565              		.cfi_endproc
 1566              	.LFE488:
 1567              		.cantunwind
 1568              		.fnend
 1570              		.section	.text._Z13wheels_cmd_cbPh,"ax",%progbits
 1571              		.align	1
 1572              		.global	_Z13wheels_cmd_cbPh
 1573              		.syntax unified
 1574              		.thumb
 1575              		.thumb_func
 1576              		.fpu fpv4-sp-d16
 1578              	_Z13wheels_cmd_cbPh:
 1579              		.fnstart
 1580              	.LFB491:
  14:./Src/ROS_subscribe.cpp **** 	wheelPositions.deserialize(msg);  
 1581              		.loc 3 14 0
 1582              		.cfi_startproc
 1583              		@ args = 0, pretend = 0, frame = 0
 1584              		@ frame_needed = 0, uses_anonymous_args = 0
 1585              	.LVL224:
 1586 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1587              	.LCFI5:
 1588              		.cfi_def_cfa_offset 24
 1589              		.cfi_offset 3, -24
 1590              		.cfi_offset 4, -20
 1591              		.cfi_offset 5, -16
 1592              		.cfi_offset 6, -12
 1593              		.cfi_offset 7, -8
 1594              		.cfi_offset 14, -4
 1595 0002 0546     		mov	r5, r0
 1596              	.LVL225:
 1597              	.LBB207:
 1598              	.LBB208:
 1599              	.LBB209:
 1600              	.LBB210:
  49:ROSSerial/std_msgs/Header.h ****       this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 1601              		.loc 1 49 0
 1602 0004 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 1603 0006 9D4B     		ldr	r3, .L105
 1604 0008 9A60     		str	r2, [r3, #8]
  50:ROSSerial/std_msgs/Header.h ****       this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 1605              		.loc 1 50 0
 1606 000a 4178     		ldrb	r1, [r0, #1]	@ zero_extendqisi2
 1607 000c 42EA0122 		orr	r2, r2, r1, lsl #8
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 41


 1608 0010 9A60     		str	r2, [r3, #8]
  51:ROSSerial/std_msgs/Header.h ****       this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 1609              		.loc 1 51 0
 1610 0012 8178     		ldrb	r1, [r0, #2]	@ zero_extendqisi2
 1611 0014 42EA0142 		orr	r2, r2, r1, lsl #16
 1612 0018 9A60     		str	r2, [r3, #8]
  52:ROSSerial/std_msgs/Header.h ****       offset += sizeof(this->seq);
 1613              		.loc 1 52 0
 1614 001a C178     		ldrb	r1, [r0, #3]	@ zero_extendqisi2
 1615 001c 42EA0162 		orr	r2, r2, r1, lsl #24
 1616 0020 9A60     		str	r2, [r3, #8]
 1617              	.LVL226:
  54:ROSSerial/std_msgs/Header.h ****       this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 1618              		.loc 1 54 0
 1619 0022 0279     		ldrb	r2, [r0, #4]	@ zero_extendqisi2
 1620 0024 DA60     		str	r2, [r3, #12]
  55:ROSSerial/std_msgs/Header.h ****       this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 1621              		.loc 1 55 0
 1622 0026 4179     		ldrb	r1, [r0, #5]	@ zero_extendqisi2
 1623 0028 42EA0122 		orr	r2, r2, r1, lsl #8
 1624 002c DA60     		str	r2, [r3, #12]
  56:ROSSerial/std_msgs/Header.h ****       this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 1625              		.loc 1 56 0
 1626 002e 8179     		ldrb	r1, [r0, #6]	@ zero_extendqisi2
 1627 0030 42EA0142 		orr	r2, r2, r1, lsl #16
 1628 0034 DA60     		str	r2, [r3, #12]
  57:ROSSerial/std_msgs/Header.h ****       offset += sizeof(this->stamp.sec);
 1629              		.loc 1 57 0
 1630 0036 C179     		ldrb	r1, [r0, #7]	@ zero_extendqisi2
 1631 0038 42EA0162 		orr	r2, r2, r1, lsl #24
 1632 003c DA60     		str	r2, [r3, #12]
 1633              	.LVL227:
  59:ROSSerial/std_msgs/Header.h ****       this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 1634              		.loc 1 59 0
 1635 003e 027A     		ldrb	r2, [r0, #8]	@ zero_extendqisi2
 1636 0040 1A61     		str	r2, [r3, #16]
  60:ROSSerial/std_msgs/Header.h ****       this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 1637              		.loc 1 60 0
 1638 0042 417A     		ldrb	r1, [r0, #9]	@ zero_extendqisi2
 1639 0044 42EA0122 		orr	r2, r2, r1, lsl #8
 1640 0048 1A61     		str	r2, [r3, #16]
  61:ROSSerial/std_msgs/Header.h ****       this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 1641              		.loc 1 61 0
 1642 004a 817A     		ldrb	r1, [r0, #10]	@ zero_extendqisi2
 1643 004c 42EA0142 		orr	r2, r2, r1, lsl #16
 1644 0050 1A61     		str	r2, [r3, #16]
  62:ROSSerial/std_msgs/Header.h ****       offset += sizeof(this->stamp.nsec);
 1645              		.loc 1 62 0
 1646 0052 C17A     		ldrb	r1, [r0, #11]	@ zero_extendqisi2
 1647 0054 42EA0162 		orr	r2, r2, r1, lsl #24
 1648 0058 1A61     		str	r2, [r3, #16]
 1649              	.LVL228:
  65:ROSSerial/std_msgs/Header.h ****       offset += 4;
 1650              		.loc 1 65 0
 1651 005a C068     		ldr	r0, [r0, #12]	@ unaligned
 1652              	.LVL229:
 1653              	.LBB211:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 42


  67:ROSSerial/std_msgs/Header.h ****           inbuffer[k-1]=inbuffer[k];
 1654              		.loc 1 67 0
 1655 005c 1023     		movs	r3, #16
 1656              	.LVL230:
 1657              	.L80:
 1658 005e 00F11004 		add	r4, r0, #16
 1659 0062 9C42     		cmp	r4, r3
 1660 0064 04D9     		bls	.L79
  68:ROSSerial/std_msgs/Header.h ****       }
 1661              		.loc 1 68 0
 1662 0066 5A1E     		subs	r2, r3, #1
 1663 0068 E95C     		ldrb	r1, [r5, r3]	@ zero_extendqisi2
 1664 006a A954     		strb	r1, [r5, r2]
  67:ROSSerial/std_msgs/Header.h ****           inbuffer[k-1]=inbuffer[k];
 1665              		.loc 1 67 0
 1666 006c 0133     		adds	r3, r3, #1
 1667              	.LVL231:
 1668 006e F6E7     		b	.L80
 1669              	.L79:
 1670              	.LBE211:
  70:ROSSerial/std_msgs/Header.h ****       this->frame_id = (char *)(inbuffer + offset-1);
 1671              		.loc 1 70 0
 1672 0070 0F30     		adds	r0, r0, #15
 1673              	.LVL232:
 1674 0072 0023     		movs	r3, #0
 1675              	.LVL233:
 1676 0074 2B54     		strb	r3, [r5, r0]
  71:ROSSerial/std_msgs/Header.h ****       offset += length_frame_id;
 1677              		.loc 1 71 0
 1678 0076 05F10F03 		add	r3, r5, #15
 1679 007a 804A     		ldr	r2, .L105
 1680 007c 5361     		str	r3, [r2, #20]
 1681              	.LVL234:
 1682              	.LBE210:
 1683              	.LBE209:
  91:ROSSerial/sensor_msgs/JointState.h ****       name_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 1684              		.loc 2 91 0
 1685 007e 2E5D     		ldrb	r6, [r5, r4]	@ zero_extendqisi2
 1686              	.LVL235:
  92:ROSSerial/sensor_msgs/JointState.h ****       name_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 1687              		.loc 2 92 0
 1688 0080 631C     		adds	r3, r4, #1
 1689 0082 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1690 0084 46EA0326 		orr	r6, r6, r3, lsl #8
 1691              	.LVL236:
  93:ROSSerial/sensor_msgs/JointState.h ****       name_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 1692              		.loc 2 93 0
 1693 0088 A31C     		adds	r3, r4, #2
 1694 008a EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1695 008c 46EA0346 		orr	r6, r6, r3, lsl #16
 1696              	.LVL237:
  94:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->name_length);
 1697              		.loc 2 94 0
 1698 0090 E31C     		adds	r3, r4, #3
 1699 0092 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1700 0094 46EA0366 		orr	r6, r6, r3, lsl #24
 1701              	.LVL238:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 43


  95:ROSSerial/sensor_msgs/JointState.h ****       if(name_lengthT > name_length)
 1702              		.loc 2 95 0
 1703 0098 0434     		adds	r4, r4, #4
 1704              	.LVL239:
  96:ROSSerial/sensor_msgs/JointState.h ****         this->name = (char**)realloc(this->name, name_lengthT * sizeof(char*));
 1705              		.loc 2 96 0
 1706 009a 9369     		ldr	r3, [r2, #24]
 1707 009c 9E42     		cmp	r6, r3
 1708 009e 03D8     		bhi	.L101
 1709              	.L81:
  98:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < name_length; i++){
 1710              		.loc 2 98 0
 1711 00a0 764B     		ldr	r3, .L105
 1712 00a2 9E61     		str	r6, [r3, #24]
 1713              	.LVL240:
 1714              	.LBB212:
  99:ROSSerial/sensor_msgs/JointState.h ****       uint32_t length_st_name;
 1715              		.loc 2 99 0
 1716 00a4 0026     		movs	r6, #0
 1717              	.LVL241:
 1718 00a6 1CE0     		b	.L87
 1719              	.LVL242:
 1720              	.L101:
 1721              	.LBE212:
  97:ROSSerial/sensor_msgs/JointState.h ****       name_length = name_lengthT;
 1722              		.loc 2 97 0
 1723 00a8 1746     		mov	r7, r2
 1724 00aa B100     		lsls	r1, r6, #2
 1725 00ac 106A     		ldr	r0, [r2, #32]
 1726 00ae FFF7FEFF 		bl	realloc
 1727              	.LVL243:
 1728 00b2 3862     		str	r0, [r7, #32]
 1729 00b4 F4E7     		b	.L81
 1730              	.LVL244:
 1731              	.L83:
 1732              	.LBB219:
 1733              	.LBB213:
 102:ROSSerial/sensor_msgs/JointState.h ****       for(unsigned int k= offset; k< offset+length_st_name; ++k){
 1734              		.loc 2 102 0
 1735 00b6 0434     		adds	r4, r4, #4
 1736              	.LVL245:
 1737              	.LBB214:
 103:ROSSerial/sensor_msgs/JointState.h ****           inbuffer[k-1]=inbuffer[k];
 1738              		.loc 2 103 0
 1739 00b8 2346     		mov	r3, r4
 1740              	.LVL246:
 1741              	.L86:
 1742 00ba 1119     		adds	r1, r2, r4
 1743 00bc 9942     		cmp	r1, r3
 1744 00be 04D9     		bls	.L85
 104:ROSSerial/sensor_msgs/JointState.h ****       }
 1745              		.loc 2 104 0
 1746 00c0 591E     		subs	r1, r3, #1
 1747 00c2 E85C     		ldrb	r0, [r5, r3]	@ zero_extendqisi2
 1748 00c4 6854     		strb	r0, [r5, r1]
 103:ROSSerial/sensor_msgs/JointState.h ****           inbuffer[k-1]=inbuffer[k];
 1749              		.loc 2 103 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 44


 1750 00c6 0133     		adds	r3, r3, #1
 1751              	.LVL247:
 1752 00c8 F7E7     		b	.L86
 1753              	.L85:
 1754              	.LBE214:
 106:ROSSerial/sensor_msgs/JointState.h ****       this->st_name = (char *)(inbuffer + offset-1);
 1755              		.loc 2 106 0
 1756 00ca 4B1E     		subs	r3, r1, #1
 1757              	.LVL248:
 1758 00cc 0022     		movs	r2, #0
 1759              	.LVL249:
 1760 00ce EA54     		strb	r2, [r5, r3]
 107:ROSSerial/sensor_msgs/JointState.h ****       offset += length_st_name;
 1761              		.loc 2 107 0
 1762 00d0 013C     		subs	r4, r4, #1
 1763 00d2 2B19     		adds	r3, r5, r4
 1764 00d4 694A     		ldr	r2, .L105
 1765 00d6 D361     		str	r3, [r2, #28]
 108:ROSSerial/sensor_msgs/JointState.h ****         memcpy( &(this->name[i]), &(this->st_name), sizeof(char*));
 1766              		.loc 2 108 0
 1767 00d8 0C46     		mov	r4, r1
 1768              	.LVL250:
 109:ROSSerial/sensor_msgs/JointState.h ****       }
 1769              		.loc 2 109 0
 1770 00da 126A     		ldr	r2, [r2, #32]
 1771 00dc 42F82630 		str	r3, [r2, r6, lsl #2]	@ unaligned
 1772              	.LBE213:
  99:ROSSerial/sensor_msgs/JointState.h ****       uint32_t length_st_name;
 1773              		.loc 2 99 0
 1774 00e0 0136     		adds	r6, r6, #1
 1775              	.LVL251:
 1776              	.L87:
 1777 00e2 664B     		ldr	r3, .L105
 1778 00e4 9B69     		ldr	r3, [r3, #24]
 1779 00e6 B342     		cmp	r3, r6
 1780 00e8 0BD9     		bls	.L82
 1781              	.LBB218:
 101:ROSSerial/sensor_msgs/JointState.h ****       offset += 4;
 1782              		.loc 2 101 0
 1783 00ea 2746     		mov	r7, r4
 1784              	.LVL252:
 1785              	.LBB215:
 1786              	.LBB216:
 139:ROSSerial/ros/msg.h ****     for (size_t i = 0; i < sizeof(V); i++)
 1787              		.loc 5 139 0
 1788 00ec 0022     		movs	r2, #0
 1789              	.LBB217:
 140:ROSSerial/ros/msg.h ****       var |= (arr[i] << (8 * i));
 1790              		.loc 5 140 0
 1791 00ee 1346     		mov	r3, r2
 1792              	.LVL253:
 1793              	.L84:
 1794 00f0 032B     		cmp	r3, #3
 1795 00f2 E0D8     		bhi	.L83
 1796              		.loc 5 141 0
 1797 00f4 E919     		adds	r1, r5, r7
 1798 00f6 C95C     		ldrb	r1, [r1, r3]	@ zero_extendqisi2
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 45


 1799 00f8 D800     		lsls	r0, r3, #3
 1800 00fa 8140     		lsls	r1, r1, r0
 1801 00fc 0A43     		orrs	r2, r2, r1
 1802              	.LVL254:
 140:ROSSerial/ros/msg.h ****       var |= (arr[i] << (8 * i));
 1803              		.loc 5 140 0
 1804 00fe 0133     		adds	r3, r3, #1
 1805              	.LVL255:
 1806 0100 F6E7     		b	.L84
 1807              	.LVL256:
 1808              	.L82:
 1809              	.LBE217:
 1810              	.LBE216:
 1811              	.LBE215:
 1812              	.LBE218:
 1813              	.LBE219:
 111:ROSSerial/sensor_msgs/JointState.h ****       position_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 1814              		.loc 2 111 0
 1815 0102 2E5D     		ldrb	r6, [r5, r4]	@ zero_extendqisi2
 1816              	.LVL257:
 112:ROSSerial/sensor_msgs/JointState.h ****       position_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 1817              		.loc 2 112 0
 1818 0104 631C     		adds	r3, r4, #1
 1819 0106 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1820 0108 46EA0326 		orr	r6, r6, r3, lsl #8
 1821              	.LVL258:
 113:ROSSerial/sensor_msgs/JointState.h ****       position_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 1822              		.loc 2 113 0
 1823 010c A31C     		adds	r3, r4, #2
 1824 010e EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1825 0110 46EA0346 		orr	r6, r6, r3, lsl #16
 1826              	.LVL259:
 114:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->position_length);
 1827              		.loc 2 114 0
 1828 0114 E31C     		adds	r3, r4, #3
 1829 0116 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1830 0118 46EA0366 		orr	r6, r6, r3, lsl #24
 1831              	.LVL260:
 115:ROSSerial/sensor_msgs/JointState.h ****       if(position_lengthT > position_length)
 1832              		.loc 2 115 0
 1833 011c 0434     		adds	r4, r4, #4
 1834              	.LVL261:
 116:ROSSerial/sensor_msgs/JointState.h ****         this->position = (float*)realloc(this->position, position_lengthT * sizeof(float));
 1835              		.loc 2 116 0
 1836 011e 574B     		ldr	r3, .L105
 1837 0120 5B6A     		ldr	r3, [r3, #36]
 1838 0122 9E42     		cmp	r6, r3
 1839 0124 03D8     		bhi	.L102
 1840              	.L88:
 118:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < position_length; i++){
 1841              		.loc 2 118 0
 1842 0126 554B     		ldr	r3, .L105
 1843 0128 5E62     		str	r6, [r3, #36]
 1844              	.LVL262:
 1845              	.LBB220:
 119:ROSSerial/sensor_msgs/JointState.h ****       offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_position));
 1846              		.loc 2 119 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 46


 1847 012a 0020     		movs	r0, #0
 1848 012c 13E0     		b	.L91
 1849              	.LVL263:
 1850              	.L102:
 1851              	.LBE220:
 117:ROSSerial/sensor_msgs/JointState.h ****       position_length = position_lengthT;
 1852              		.loc 2 117 0
 1853 012e 534F     		ldr	r7, .L105
 1854 0130 B100     		lsls	r1, r6, #2
 1855 0132 F86A     		ldr	r0, [r7, #44]
 1856 0134 FFF7FEFF 		bl	realloc
 1857              	.LVL264:
 1858 0138 F862     		str	r0, [r7, #44]
 1859 013a F4E7     		b	.L88
 1860              	.LVL265:
 1861              	.L90:
 1862              	.LBB225:
 1863              	.LBB221:
 1864              	.LBB222:
 122:ROSSerial/ros/msg.h **** 
 1865              		.loc 5 122 0
 1866 013c CB79     		ldrb	r3, [r1, #7]	@ zero_extendqisi2
 1867 013e 1B06     		lsls	r3, r3, #24
 1868 0140 03F00043 		and	r3, r3, #-2147483648
 1869 0144 4D49     		ldr	r1, .L105
 1870              	.LVL266:
 1871 0146 8A6A     		ldr	r2, [r1, #40]
 1872 0148 1343     		orrs	r3, r3, r2
 1873 014a 8B62     		str	r3, [r1, #40]
 1874              	.LVL267:
 1875              	.LBE222:
 1876              	.LBE221:
 120:ROSSerial/sensor_msgs/JointState.h ****         memcpy( &(this->position[i]), &(this->st_position), sizeof(float));
 1877              		.loc 2 120 0
 1878 014c 0834     		adds	r4, r4, #8
 1879              	.LVL268:
 121:ROSSerial/sensor_msgs/JointState.h ****       }
 1880              		.loc 2 121 0
 1881 014e CA6A     		ldr	r2, [r1, #44]
 1882 0150 42F82030 		str	r3, [r2, r0, lsl #2]	@ unaligned
 119:ROSSerial/sensor_msgs/JointState.h ****       offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_position));
 1883              		.loc 2 119 0
 1884 0154 0130     		adds	r0, r0, #1
 1885              	.LVL269:
 1886              	.L91:
 1887 0156 494B     		ldr	r3, .L105
 1888 0158 5B6A     		ldr	r3, [r3, #36]
 1889 015a 8342     		cmp	r3, r0
 1890 015c 21D9     		bls	.L89
 120:ROSSerial/sensor_msgs/JointState.h ****         memcpy( &(this->position[i]), &(this->st_position), sizeof(float));
 1891              		.loc 2 120 0
 1892 015e 2919     		adds	r1, r5, r4
 1893              	.LVL270:
 1894              	.LBB224:
 1895              	.LBB223:
 108:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 1896              		.loc 5 108 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 47


 1897 0160 CB78     		ldrb	r3, [r1, #3]	@ zero_extendqisi2
 1898 0162 5B09     		lsrs	r3, r3, #5
 1899 0164 454E     		ldr	r6, .L105
 1900 0166 B362     		str	r3, [r6, #40]
 1901              	.LVL271:
 109:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 1902              		.loc 5 109 0
 1903 0168 0A79     		ldrb	r2, [r1, #4]	@ zero_extendqisi2
 1904 016a 43EAC203 		orr	r3, r3, r2, lsl #3
 1905 016e B362     		str	r3, [r6, #40]
 1906              	.LVL272:
 110:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 1907              		.loc 5 110 0
 1908 0170 4A79     		ldrb	r2, [r1, #5]	@ zero_extendqisi2
 1909 0172 43EAC223 		orr	r3, r3, r2, lsl #11
 1910 0176 B362     		str	r3, [r6, #40]
 111:ROSSerial/ros/msg.h **** 
 1911              		.loc 5 111 0
 1912 0178 8A79     		ldrb	r2, [r1, #6]	@ zero_extendqisi2
 1913 017a D204     		lsls	r2, r2, #19
 1914 017c 02F4F002 		and	r2, r2, #7864320
 1915 0180 1343     		orrs	r3, r3, r2
 1916 0182 B362     		str	r3, [r6, #40]
 1917              	.LVL273:
 114:ROSSerial/ros/msg.h ****     exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 1918              		.loc 5 114 0
 1919 0184 8E79     		ldrb	r6, [r1, #6]	@ zero_extendqisi2
 1920              	.LVL274:
 115:ROSSerial/ros/msg.h ****     if (exp != 0)
 1921              		.loc 5 115 0
 1922 0186 CA79     		ldrb	r2, [r1, #7]	@ zero_extendqisi2
 1923 0188 1201     		lsls	r2, r2, #4
 1924 018a 02F4FE62 		and	r2, r2, #2032
 1925              	.LVL275:
 116:ROSSerial/ros/msg.h ****     {
 1926              		.loc 5 116 0
 1927 018e 52EA1612 		orrs	r2, r2, r6, lsr #4
 1928              	.LVL276:
 1929 0192 D3D0     		beq	.L90
 118:ROSSerial/ros/msg.h ****     }
 1930              		.loc 5 118 0
 1931 0194 A2F56072 		sub	r2, r2, #896
 1932              	.LVL277:
 1933 0198 43EAC253 		orr	r3, r3, r2, lsl #23
 1934 019c 374A     		ldr	r2, .L105
 1935              	.LVL278:
 1936 019e 9362     		str	r3, [r2, #40]
 1937              	.LVL279:
 1938 01a0 CCE7     		b	.L90
 1939              	.LVL280:
 1940              	.L89:
 1941              	.LBE223:
 1942              	.LBE224:
 1943              	.LBE225:
 123:ROSSerial/sensor_msgs/JointState.h ****       velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 1944              		.loc 2 123 0
 1945 01a2 2E5D     		ldrb	r6, [r5, r4]	@ zero_extendqisi2
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 48


 1946              	.LVL281:
 124:ROSSerial/sensor_msgs/JointState.h ****       velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 1947              		.loc 2 124 0
 1948 01a4 631C     		adds	r3, r4, #1
 1949 01a6 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1950 01a8 46EA0326 		orr	r6, r6, r3, lsl #8
 1951              	.LVL282:
 125:ROSSerial/sensor_msgs/JointState.h ****       velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 1952              		.loc 2 125 0
 1953 01ac A31C     		adds	r3, r4, #2
 1954 01ae EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1955 01b0 46EA0346 		orr	r6, r6, r3, lsl #16
 1956              	.LVL283:
 126:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->velocity_length);
 1957              		.loc 2 126 0
 1958 01b4 E31C     		adds	r3, r4, #3
 1959 01b6 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1960 01b8 46EA0366 		orr	r6, r6, r3, lsl #24
 1961              	.LVL284:
 127:ROSSerial/sensor_msgs/JointState.h ****       if(velocity_lengthT > velocity_length)
 1962              		.loc 2 127 0
 1963 01bc 0434     		adds	r4, r4, #4
 1964              	.LVL285:
 128:ROSSerial/sensor_msgs/JointState.h ****         this->velocity = (float*)realloc(this->velocity, velocity_lengthT * sizeof(float));
 1965              		.loc 2 128 0
 1966 01be 2F4B     		ldr	r3, .L105
 1967 01c0 1B6B     		ldr	r3, [r3, #48]
 1968 01c2 9E42     		cmp	r6, r3
 1969 01c4 03D8     		bhi	.L103
 1970              	.LVL286:
 1971              	.L92:
 130:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < velocity_length; i++){
 1972              		.loc 2 130 0
 1973 01c6 2D4B     		ldr	r3, .L105
 1974 01c8 1E63     		str	r6, [r3, #48]
 1975              	.LVL287:
 1976              	.LBB226:
 131:ROSSerial/sensor_msgs/JointState.h ****       offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_velocity));
 1977              		.loc 2 131 0
 1978 01ca 0020     		movs	r0, #0
 1979 01cc 13E0     		b	.L95
 1980              	.LVL288:
 1981              	.L103:
 1982              	.LBE226:
 129:ROSSerial/sensor_msgs/JointState.h ****       velocity_length = velocity_lengthT;
 1983              		.loc 2 129 0
 1984 01ce 2B4F     		ldr	r7, .L105
 1985 01d0 B100     		lsls	r1, r6, #2
 1986 01d2 B86B     		ldr	r0, [r7, #56]
 1987              	.LVL289:
 1988 01d4 FFF7FEFF 		bl	realloc
 1989              	.LVL290:
 1990 01d8 B863     		str	r0, [r7, #56]
 1991 01da F4E7     		b	.L92
 1992              	.LVL291:
 1993              	.L94:
 1994              	.LBB231:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 49


 1995              	.LBB227:
 1996              	.LBB228:
 122:ROSSerial/ros/msg.h **** 
 1997              		.loc 5 122 0
 1998 01dc CB79     		ldrb	r3, [r1, #7]	@ zero_extendqisi2
 1999 01de 1B06     		lsls	r3, r3, #24
 2000 01e0 03F00043 		and	r3, r3, #-2147483648
 2001 01e4 2549     		ldr	r1, .L105
 2002              	.LVL292:
 2003 01e6 4A6B     		ldr	r2, [r1, #52]
 2004 01e8 1343     		orrs	r3, r3, r2
 2005 01ea 4B63     		str	r3, [r1, #52]
 2006              	.LVL293:
 2007              	.LBE228:
 2008              	.LBE227:
 132:ROSSerial/sensor_msgs/JointState.h ****         memcpy( &(this->velocity[i]), &(this->st_velocity), sizeof(float));
 2009              		.loc 2 132 0
 2010 01ec 0834     		adds	r4, r4, #8
 2011              	.LVL294:
 133:ROSSerial/sensor_msgs/JointState.h ****       }
 2012              		.loc 2 133 0
 2013 01ee 8A6B     		ldr	r2, [r1, #56]
 2014 01f0 42F82030 		str	r3, [r2, r0, lsl #2]	@ unaligned
 131:ROSSerial/sensor_msgs/JointState.h ****       offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_velocity));
 2015              		.loc 2 131 0
 2016 01f4 0130     		adds	r0, r0, #1
 2017              	.LVL295:
 2018              	.L95:
 2019 01f6 214B     		ldr	r3, .L105
 2020 01f8 1B6B     		ldr	r3, [r3, #48]
 2021 01fa 8342     		cmp	r3, r0
 2022 01fc 21D9     		bls	.L93
 132:ROSSerial/sensor_msgs/JointState.h ****         memcpy( &(this->velocity[i]), &(this->st_velocity), sizeof(float));
 2023              		.loc 2 132 0
 2024 01fe 2919     		adds	r1, r5, r4
 2025              	.LVL296:
 2026              	.LBB230:
 2027              	.LBB229:
 108:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 2028              		.loc 5 108 0
 2029 0200 CB78     		ldrb	r3, [r1, #3]	@ zero_extendqisi2
 2030 0202 5B09     		lsrs	r3, r3, #5
 2031 0204 1D4E     		ldr	r6, .L105
 2032 0206 7363     		str	r3, [r6, #52]
 2033              	.LVL297:
 109:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 2034              		.loc 5 109 0
 2035 0208 0A79     		ldrb	r2, [r1, #4]	@ zero_extendqisi2
 2036 020a 43EAC203 		orr	r3, r3, r2, lsl #3
 2037 020e 7363     		str	r3, [r6, #52]
 2038              	.LVL298:
 110:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 2039              		.loc 5 110 0
 2040 0210 4A79     		ldrb	r2, [r1, #5]	@ zero_extendqisi2
 2041 0212 43EAC223 		orr	r3, r3, r2, lsl #11
 2042 0216 7363     		str	r3, [r6, #52]
 111:ROSSerial/ros/msg.h **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 50


 2043              		.loc 5 111 0
 2044 0218 8A79     		ldrb	r2, [r1, #6]	@ zero_extendqisi2
 2045 021a D204     		lsls	r2, r2, #19
 2046 021c 02F4F002 		and	r2, r2, #7864320
 2047 0220 1343     		orrs	r3, r3, r2
 2048 0222 7363     		str	r3, [r6, #52]
 2049              	.LVL299:
 114:ROSSerial/ros/msg.h ****     exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 2050              		.loc 5 114 0
 2051 0224 8E79     		ldrb	r6, [r1, #6]	@ zero_extendqisi2
 2052              	.LVL300:
 115:ROSSerial/ros/msg.h ****     if (exp != 0)
 2053              		.loc 5 115 0
 2054 0226 CA79     		ldrb	r2, [r1, #7]	@ zero_extendqisi2
 2055 0228 1201     		lsls	r2, r2, #4
 2056 022a 02F4FE62 		and	r2, r2, #2032
 2057              	.LVL301:
 116:ROSSerial/ros/msg.h ****     {
 2058              		.loc 5 116 0
 2059 022e 52EA1612 		orrs	r2, r2, r6, lsr #4
 2060              	.LVL302:
 2061 0232 D3D0     		beq	.L94
 118:ROSSerial/ros/msg.h ****     }
 2062              		.loc 5 118 0
 2063 0234 A2F56072 		sub	r2, r2, #896
 2064              	.LVL303:
 2065 0238 43EAC253 		orr	r3, r3, r2, lsl #23
 2066 023c 0F4A     		ldr	r2, .L105
 2067              	.LVL304:
 2068 023e 5363     		str	r3, [r2, #52]
 2069              	.LVL305:
 2070 0240 CCE7     		b	.L94
 2071              	.LVL306:
 2072              	.L93:
 2073              	.LBE229:
 2074              	.LBE230:
 2075              	.LBE231:
 135:ROSSerial/sensor_msgs/JointState.h ****       effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 2076              		.loc 2 135 0
 2077 0242 2E5D     		ldrb	r6, [r5, r4]	@ zero_extendqisi2
 2078              	.LVL307:
 136:ROSSerial/sensor_msgs/JointState.h ****       effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 2079              		.loc 2 136 0
 2080 0244 631C     		adds	r3, r4, #1
 2081 0246 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 2082 0248 46EA0326 		orr	r6, r6, r3, lsl #8
 2083              	.LVL308:
 137:ROSSerial/sensor_msgs/JointState.h ****       effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 2084              		.loc 2 137 0
 2085 024c A31C     		adds	r3, r4, #2
 2086 024e EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 2087 0250 46EA0346 		orr	r6, r6, r3, lsl #16
 2088              	.LVL309:
 138:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->effort_length);
 2089              		.loc 2 138 0
 2090 0254 E31C     		adds	r3, r4, #3
 2091 0256 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 51


 2092 0258 46EA0366 		orr	r6, r6, r3, lsl #24
 2093              	.LVL310:
 139:ROSSerial/sensor_msgs/JointState.h ****       if(effort_lengthT > effort_length)
 2094              		.loc 2 139 0
 2095 025c 0434     		adds	r4, r4, #4
 2096              	.LVL311:
 140:ROSSerial/sensor_msgs/JointState.h ****         this->effort = (float*)realloc(this->effort, effort_lengthT * sizeof(float));
 2097              		.loc 2 140 0
 2098 025e 074B     		ldr	r3, .L105
 2099 0260 DB6B     		ldr	r3, [r3, #60]
 2100 0262 9E42     		cmp	r6, r3
 2101 0264 03D8     		bhi	.L104
 2102              	.LVL312:
 2103              	.L96:
 142:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < effort_length; i++){
 2104              		.loc 2 142 0
 2105 0266 054B     		ldr	r3, .L105
 2106 0268 DE63     		str	r6, [r3, #60]
 2107              	.LVL313:
 2108              	.LBB232:
 143:ROSSerial/sensor_msgs/JointState.h ****       offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_effort));
 2109              		.loc 2 143 0
 2110 026a 0020     		movs	r0, #0
 2111 026c 15E0     		b	.L99
 2112              	.LVL314:
 2113              	.L104:
 2114              	.LBE232:
 141:ROSSerial/sensor_msgs/JointState.h ****       effort_length = effort_lengthT;
 2115              		.loc 2 141 0
 2116 026e 034F     		ldr	r7, .L105
 2117 0270 B100     		lsls	r1, r6, #2
 2118 0272 786C     		ldr	r0, [r7, #68]
 2119              	.LVL315:
 2120 0274 FFF7FEFF 		bl	realloc
 2121              	.LVL316:
 2122 0278 7864     		str	r0, [r7, #68]
 2123 027a F4E7     		b	.L96
 2124              	.L106:
 2125              		.align	2
 2126              	.L105:
 2127 027c 00000000 		.word	.LANCHOR0
 2128              	.LVL317:
 2129              	.L98:
 2130              	.LBB237:
 2131              	.LBB233:
 2132              	.LBB234:
 122:ROSSerial/ros/msg.h **** 
 2133              		.loc 5 122 0
 2134 0280 CB79     		ldrb	r3, [r1, #7]	@ zero_extendqisi2
 2135 0282 1B06     		lsls	r3, r3, #24
 2136 0284 03F00043 		and	r3, r3, #-2147483648
 2137 0288 1749     		ldr	r1, .L107
 2138              	.LVL318:
 2139 028a 0A6C     		ldr	r2, [r1, #64]
 2140 028c 1343     		orrs	r3, r3, r2
 2141 028e 0B64     		str	r3, [r1, #64]
 2142              	.LVL319:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 52


 2143              	.LBE234:
 2144              	.LBE233:
 144:ROSSerial/sensor_msgs/JointState.h ****         memcpy( &(this->effort[i]), &(this->st_effort), sizeof(float));
 2145              		.loc 2 144 0
 2146 0290 0834     		adds	r4, r4, #8
 2147              	.LVL320:
 145:ROSSerial/sensor_msgs/JointState.h ****       }
 2148              		.loc 2 145 0
 2149 0292 4A6C     		ldr	r2, [r1, #68]
 2150 0294 42F82030 		str	r3, [r2, r0, lsl #2]	@ unaligned
 143:ROSSerial/sensor_msgs/JointState.h ****       offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_effort));
 2151              		.loc 2 143 0
 2152 0298 0130     		adds	r0, r0, #1
 2153              	.LVL321:
 2154              	.L99:
 2155 029a 134B     		ldr	r3, .L107
 2156 029c DB6B     		ldr	r3, [r3, #60]
 2157 029e 8342     		cmp	r3, r0
 2158 02a0 21D9     		bls	.L78
 144:ROSSerial/sensor_msgs/JointState.h ****         memcpy( &(this->effort[i]), &(this->st_effort), sizeof(float));
 2159              		.loc 2 144 0
 2160 02a2 2919     		adds	r1, r5, r4
 2161              	.LVL322:
 2162              	.LBB236:
 2163              	.LBB235:
 108:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 2164              		.loc 5 108 0
 2165 02a4 CB78     		ldrb	r3, [r1, #3]	@ zero_extendqisi2
 2166 02a6 5B09     		lsrs	r3, r3, #5
 2167 02a8 0F4E     		ldr	r6, .L107
 2168 02aa 3364     		str	r3, [r6, #64]
 2169              	.LVL323:
 109:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 2170              		.loc 5 109 0
 2171 02ac 0A79     		ldrb	r2, [r1, #4]	@ zero_extendqisi2
 2172 02ae 43EAC203 		orr	r3, r3, r2, lsl #3
 2173 02b2 3364     		str	r3, [r6, #64]
 2174              	.LVL324:
 110:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 2175              		.loc 5 110 0
 2176 02b4 4A79     		ldrb	r2, [r1, #5]	@ zero_extendqisi2
 2177 02b6 43EAC223 		orr	r3, r3, r2, lsl #11
 2178 02ba 3364     		str	r3, [r6, #64]
 111:ROSSerial/ros/msg.h **** 
 2179              		.loc 5 111 0
 2180 02bc 8A79     		ldrb	r2, [r1, #6]	@ zero_extendqisi2
 2181 02be D204     		lsls	r2, r2, #19
 2182 02c0 02F4F002 		and	r2, r2, #7864320
 2183 02c4 1343     		orrs	r3, r3, r2
 2184 02c6 3364     		str	r3, [r6, #64]
 2185              	.LVL325:
 114:ROSSerial/ros/msg.h ****     exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 2186              		.loc 5 114 0
 2187 02c8 8E79     		ldrb	r6, [r1, #6]	@ zero_extendqisi2
 2188              	.LVL326:
 115:ROSSerial/ros/msg.h ****     if (exp != 0)
 2189              		.loc 5 115 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 53


 2190 02ca CA79     		ldrb	r2, [r1, #7]	@ zero_extendqisi2
 2191 02cc 1201     		lsls	r2, r2, #4
 2192 02ce 02F4FE62 		and	r2, r2, #2032
 2193              	.LVL327:
 116:ROSSerial/ros/msg.h ****     {
 2194              		.loc 5 116 0
 2195 02d2 52EA1612 		orrs	r2, r2, r6, lsr #4
 2196              	.LVL328:
 2197 02d6 D3D0     		beq	.L98
 118:ROSSerial/ros/msg.h ****     }
 2198              		.loc 5 118 0
 2199 02d8 A2F56072 		sub	r2, r2, #896
 2200              	.LVL329:
 2201 02dc 43EAC253 		orr	r3, r3, r2, lsl #23
 2202 02e0 014A     		ldr	r2, .L107
 2203              	.LVL330:
 2204 02e2 1364     		str	r3, [r2, #64]
 2205              	.LVL331:
 2206 02e4 CCE7     		b	.L98
 2207              	.LVL332:
 2208              	.L78:
 2209              	.LBE235:
 2210              	.LBE236:
 2211              	.LBE237:
 2212              	.LBE208:
 2213              	.LBE207:
  16:./Src/ROS_subscribe.cpp **** 
 2214              		.loc 3 16 0
 2215 02e6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2216              	.LVL333:
 2217              	.L108:
 2218              		.align	2
 2219              	.L107:
 2220 02e8 00000000 		.word	.LANCHOR0
 2221              		.cfi_endproc
 2222              	.LFE491:
 2223              		.cantunwind
 2224              		.fnend
 2226              		.section	.text._Z17getWheelPositionsv,"ax",%progbits
 2227              		.align	1
 2228              		.global	_Z17getWheelPositionsv
 2229              		.syntax unified
 2230              		.thumb
 2231              		.thumb_func
 2232              		.fpu fpv4-sp-d16
 2234              	_Z17getWheelPositionsv:
 2235              		.fnstart
 2236              	.LFB492:
  19:./Src/ROS_subscribe.cpp **** 	return wheelPositions;
 2237              		.loc 3 19 0
 2238              		.cfi_startproc
 2239              		@ args = 0, pretend = 0, frame = 0
 2240              		@ frame_needed = 0, uses_anonymous_args = 0
 2241              		@ link register save eliminated.
 2242              	.LVL334:
 2243 0000 10B4     		push	{r4}
 2244              	.LCFI6:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 54


 2245              		.cfi_def_cfa_offset 4
 2246              		.cfi_offset 4, -4
 2247 0002 0346     		mov	r3, r0
 2248              	.LVL335:
 2249              	.LBB238:
 2250              	.LBB239:
  13:ROSSerial/sensor_msgs/JointState.h ****   {
 2251              		.loc 2 13 0
 2252 0004 154A     		ldr	r2, .L111
 2253 0006 0260     		str	r2, [r0]
 2254              	.LVL336:
 2255              	.LBB240:
 2256              	.LBB241:
  13:ROSSerial/std_msgs/Header.h ****   {
 2257              		.loc 1 13 0
 2258 0008 154A     		ldr	r2, .L111+4
 2259 000a 4260     		str	r2, [r0, #4]
 2260 000c 154A     		ldr	r2, .L111+8
 2261 000e 9168     		ldr	r1, [r2, #8]
 2262 0010 8160     		str	r1, [r0, #8]
 2263 0012 00F10C04 		add	r4, r0, #12
 2264 0016 02F10C01 		add	r1, r2, #12
 2265 001a 03C9     		ldm	r1, {r0, r1}
 2266              	.LVL337:
 2267 001c 84E80300 		stm	r4, {r0, r1}
 2268 0020 5169     		ldr	r1, [r2, #20]
 2269 0022 5961     		str	r1, [r3, #20]
 2270              	.LVL338:
 2271              	.LBE241:
 2272              	.LBE240:
  13:ROSSerial/sensor_msgs/JointState.h ****   {
 2273              		.loc 2 13 0
 2274 0024 9169     		ldr	r1, [r2, #24]
 2275 0026 9961     		str	r1, [r3, #24]
 2276 0028 D169     		ldr	r1, [r2, #28]
 2277 002a D961     		str	r1, [r3, #28]
 2278 002c 116A     		ldr	r1, [r2, #32]
 2279 002e 1962     		str	r1, [r3, #32]
 2280 0030 516A     		ldr	r1, [r2, #36]
 2281 0032 5962     		str	r1, [r3, #36]
 2282 0034 916A     		ldr	r1, [r2, #40]	@ float
 2283 0036 9962     		str	r1, [r3, #40]	@ float
 2284 0038 D16A     		ldr	r1, [r2, #44]
 2285 003a D962     		str	r1, [r3, #44]
 2286 003c 116B     		ldr	r1, [r2, #48]
 2287 003e 1963     		str	r1, [r3, #48]
 2288 0040 516B     		ldr	r1, [r2, #52]	@ float
 2289 0042 5963     		str	r1, [r3, #52]	@ float
 2290 0044 916B     		ldr	r1, [r2, #56]
 2291 0046 9963     		str	r1, [r3, #56]
 2292 0048 D16B     		ldr	r1, [r2, #60]
 2293 004a D963     		str	r1, [r3, #60]
 2294 004c 116C     		ldr	r1, [r2, #64]	@ float
 2295 004e 1964     		str	r1, [r3, #64]	@ float
 2296 0050 526C     		ldr	r2, [r2, #68]
 2297 0052 5A64     		str	r2, [r3, #68]
 2298              	.LVL339:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 55


 2299              	.LBE239:
 2300              	.LBE238:
  21:./Src/ROS_subscribe.cpp **** 
 2301              		.loc 3 21 0
 2302 0054 1846     		mov	r0, r3
 2303 0056 5DF8044B 		ldr	r4, [sp], #4
 2304              	.LCFI7:
 2305              		.cfi_restore 4
 2306              		.cfi_def_cfa_offset 0
 2307 005a 7047     		bx	lr
 2308              	.L112:
 2309              		.align	2
 2310              	.L111:
 2311 005c 08000000 		.word	_ZTVN11sensor_msgs10JointStateE+8
 2312 0060 08000000 		.word	_ZTVN8std_msgs6HeaderE+8
 2313 0064 00000000 		.word	.LANCHOR0
 2314              		.cfi_endproc
 2315              	.LFE492:
 2316              		.cantunwind
 2317              		.fnend
 2319              		.section	.text._Z21rosSubscribeWheelsCmdPN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi512EEE,
 2320              		.align	1
 2321              		.global	_Z21rosSubscribeWheelsCmdPN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi512EEE
 2322              		.syntax unified
 2323              		.thumb
 2324              		.thumb_func
 2325              		.fpu fpv4-sp-d16
 2327              	_Z21rosSubscribeWheelsCmdPN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi512EEE:
 2328              		.fnstart
 2329              	.LFB502:
  24:./Src/ROS_subscribe.cpp ****     ros::SubscriberType sub ;
 2330              		.loc 3 24 0
 2331              		.cfi_startproc
 2332              		@ args = 0, pretend = 0, frame = 40
 2333              		@ frame_needed = 0, uses_anonymous_args = 0
 2334              	.LVL340:
 2335 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2336              		.save {r4, r5, r6, r7, lr}
 2337              	.LCFI8:
 2338              		.cfi_def_cfa_offset 20
 2339              		.cfi_offset 4, -20
 2340              		.cfi_offset 5, -16
 2341              		.cfi_offset 6, -12
 2342              		.cfi_offset 7, -8
 2343              		.cfi_offset 14, -4
 2344              		.pad #44
 2345 0002 8BB0     		sub	sp, sp, #44
 2346              	.LCFI9:
 2347              		.cfi_def_cfa_offset 64
 2348 0004 0646     		mov	r6, r0
  27:./Src/ROS_subscribe.cpp **** 	sub.message_type = msg.getType();
 2349              		.loc 3 27 0
 2350 0006 1D4B     		ldr	r3, .L119
 2351 0008 0693     		str	r3, [sp, #24]
 2352              	.LVL341:
  28:./Src/ROS_subscribe.cpp **** 	sub.md5sum = msg.getMD5();
 2353              		.loc 3 28 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 56


 2354 000a 1D4B     		ldr	r3, .L119+4
 2355 000c 0793     		str	r3, [sp, #28]
 2356              	.LVL342:
  29:./Src/ROS_subscribe.cpp **** 	sub.callback = wheels_cmd_cb;
 2357              		.loc 3 29 0
 2358 000e 1D4B     		ldr	r3, .L119+8
 2359 0010 0893     		str	r3, [sp, #32]
  30:./Src/ROS_subscribe.cpp **** 	
 2360              		.loc 3 30 0
 2361 0012 1D4F     		ldr	r7, .L119+12
 2362 0014 0997     		str	r7, [sp, #36]
 2363              	.LVL343:
 2364 0016 6C46     		mov	r4, sp
 2365 0018 05AD     		add	r5, sp, #20
 2366 001a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2367              	.LVL344:
 2368 001c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2369 001e 2760     		str	r7, [r4]
 2370              	.LVL345:
 2371              	.LBB254:
 2372              	.LBB255:
 2373              		.file 6 "ROSSerial/ros/node_handle.h"
   1:ROSSerial/ros/node_handle.h **** /*
   2:ROSSerial/ros/node_handle.h ****  * Software License Agreement (BSD License)
   3:ROSSerial/ros/node_handle.h ****  *
   4:ROSSerial/ros/node_handle.h ****  * Copyright (c) 2011, Willow Garage, Inc.
   5:ROSSerial/ros/node_handle.h ****  * All rights reserved.
   6:ROSSerial/ros/node_handle.h ****  *
   7:ROSSerial/ros/node_handle.h ****  * Redistribution and use in source and binary forms, with or without
   8:ROSSerial/ros/node_handle.h ****  * modification, are permitted provided that the following conditions
   9:ROSSerial/ros/node_handle.h ****  * are met:
  10:ROSSerial/ros/node_handle.h ****  *
  11:ROSSerial/ros/node_handle.h ****  *  * Redistributions of source code must retain the above copyright
  12:ROSSerial/ros/node_handle.h ****  *    notice, this list of conditions and the following disclaimer.
  13:ROSSerial/ros/node_handle.h ****  *  * Redistributions in binary form must reproduce the above
  14:ROSSerial/ros/node_handle.h ****  *    copyright notice, this list of conditions and the following
  15:ROSSerial/ros/node_handle.h ****  *    disclaimer in the documentation and/or other materials provided
  16:ROSSerial/ros/node_handle.h ****  *    with the distribution.
  17:ROSSerial/ros/node_handle.h ****  *  * Neither the name of Willow Garage, Inc. nor the names of its
  18:ROSSerial/ros/node_handle.h ****  *    contributors may be used to endorse or promote prducts derived
  19:ROSSerial/ros/node_handle.h ****  *    from this software without specific prior written permission.
  20:ROSSerial/ros/node_handle.h ****  *
  21:ROSSerial/ros/node_handle.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  22:ROSSerial/ros/node_handle.h ****  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  23:ROSSerial/ros/node_handle.h ****  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  24:ROSSerial/ros/node_handle.h ****  * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
  25:ROSSerial/ros/node_handle.h ****  * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  26:ROSSerial/ros/node_handle.h ****  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  27:ROSSerial/ros/node_handle.h ****  * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  28:ROSSerial/ros/node_handle.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:ROSSerial/ros/node_handle.h ****  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  30:ROSSerial/ros/node_handle.h ****  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  31:ROSSerial/ros/node_handle.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  32:ROSSerial/ros/node_handle.h ****  * POSSIBILITY OF SUCH DAMAGE.
  33:ROSSerial/ros/node_handle.h ****  */
  34:ROSSerial/ros/node_handle.h **** 
  35:ROSSerial/ros/node_handle.h **** #ifndef ROS_NODE_HANDLE_H_
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 57


  36:ROSSerial/ros/node_handle.h **** #define ROS_NODE_HANDLE_H_
  37:ROSSerial/ros/node_handle.h **** 
  38:ROSSerial/ros/node_handle.h **** #include <stdint.h>
  39:ROSSerial/ros/node_handle.h **** 
  40:ROSSerial/ros/node_handle.h **** #include "std_msgs/Time.h"
  41:ROSSerial/ros/node_handle.h **** #include "rosserial_msgs/TopicInfo.h"
  42:ROSSerial/ros/node_handle.h **** #include "rosserial_msgs/Log.h"
  43:ROSSerial/ros/node_handle.h **** #include "rosserial_msgs/RequestParam.h"
  44:ROSSerial/ros/node_handle.h **** #include "std_msgs/ROSString.h"
  45:ROSSerial/ros/node_handle.h **** #include "ros/msg.h"
  46:ROSSerial/ros/node_handle.h **** 
  47:ROSSerial/ros/node_handle.h **** namespace ros
  48:ROSSerial/ros/node_handle.h **** {
  49:ROSSerial/ros/node_handle.h **** 
  50:ROSSerial/ros/node_handle.h **** class NodeHandleBase_
  51:ROSSerial/ros/node_handle.h **** {
  52:ROSSerial/ros/node_handle.h **** public:
  53:ROSSerial/ros/node_handle.h ****   virtual int publish(int id, const Msg* msg) = 0;
  54:ROSSerial/ros/node_handle.h ****   virtual int spinOnce() = 0;
  55:ROSSerial/ros/node_handle.h ****   virtual bool connected() = 0;
  56:ROSSerial/ros/node_handle.h **** };
  57:ROSSerial/ros/node_handle.h **** }
  58:ROSSerial/ros/node_handle.h **** 
  59:ROSSerial/ros/node_handle.h **** #include "ros/publisher.h"
  60:ROSSerial/ros/node_handle.h **** #include "ros/subscriber.h"
  61:ROSSerial/ros/node_handle.h **** #include "ros/service_server.h"
  62:ROSSerial/ros/node_handle.h **** #include "ros/service_client.h"
  63:ROSSerial/ros/node_handle.h **** #include "std_msgs/UInt16.h"
  64:ROSSerial/ros/node_handle.h **** 
  65:ROSSerial/ros/node_handle.h **** namespace ros
  66:ROSSerial/ros/node_handle.h **** {
  67:ROSSerial/ros/node_handle.h **** 
  68:ROSSerial/ros/node_handle.h **** const int SPIN_OK = 0;
  69:ROSSerial/ros/node_handle.h **** const int SPIN_ERR = -1;
  70:ROSSerial/ros/node_handle.h **** const int SPIN_TIMEOUT = -2;
  71:ROSSerial/ros/node_handle.h **** 
  72:ROSSerial/ros/node_handle.h **** const uint8_t SYNC_SECONDS  = 5;
  73:ROSSerial/ros/node_handle.h **** const uint8_t MODE_FIRST_FF = 0;
  74:ROSSerial/ros/node_handle.h **** 
  75:ROSSerial/ros/node_handle.h **** /*
  76:ROSSerial/ros/node_handle.h ****  * The second sync byte is a protocol version. It's value is 0xff for the first
  77:ROSSerial/ros/node_handle.h ****  * version of the rosserial protocol (used up to hydro), 0xfe for the second version
  78:ROSSerial/ros/node_handle.h ****  * (introduced in hydro), 0xfd for the next, and so on. Its purpose is to enable
  79:ROSSerial/ros/node_handle.h ****  * detection of mismatched protocol versions (e.g. hydro rosserial_python with groovy
  80:ROSSerial/ros/node_handle.h ****  * rosserial_arduino. It must be changed in both this file and in
  81:ROSSerial/ros/node_handle.h ****  * rosserial_python/src/rosserial_python/SerialClient.py
  82:ROSSerial/ros/node_handle.h ****  */
  83:ROSSerial/ros/node_handle.h **** const uint8_t MODE_PROTOCOL_VER   = 1;
  84:ROSSerial/ros/node_handle.h **** const uint8_t PROTOCOL_VER1       = 0xff; // through groovy
  85:ROSSerial/ros/node_handle.h **** const uint8_t PROTOCOL_VER2       = 0xfe; // in hydro
  86:ROSSerial/ros/node_handle.h **** const uint8_t PROTOCOL_VER        = PROTOCOL_VER2;
  87:ROSSerial/ros/node_handle.h **** const uint8_t MODE_SIZE_L         = 2;
  88:ROSSerial/ros/node_handle.h **** const uint8_t MODE_SIZE_H         = 3;
  89:ROSSerial/ros/node_handle.h **** const uint8_t MODE_SIZE_CHECKSUM  = 4;    // checksum for msg size received from size L and H
  90:ROSSerial/ros/node_handle.h **** const uint8_t MODE_TOPIC_L        = 5;    // waiting for topic id
  91:ROSSerial/ros/node_handle.h **** const uint8_t MODE_TOPIC_H        = 6;
  92:ROSSerial/ros/node_handle.h **** const uint8_t MODE_MESSAGE        = 7;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 58


  93:ROSSerial/ros/node_handle.h **** const uint8_t MODE_MSG_CHECKSUM   = 8;    // checksum for msg and topic id
  94:ROSSerial/ros/node_handle.h **** 
  95:ROSSerial/ros/node_handle.h **** 
  96:ROSSerial/ros/node_handle.h **** const uint8_t SERIAL_MSG_TIMEOUT  = 20;   // 20 milliseconds to recieve all of message data
  97:ROSSerial/ros/node_handle.h **** 
  98:ROSSerial/ros/node_handle.h **** using rosserial_msgs::TopicInfo;
  99:ROSSerial/ros/node_handle.h **** 
 100:ROSSerial/ros/node_handle.h **** typedef struct
 101:ROSSerial/ros/node_handle.h **** {
 102:ROSSerial/ros/node_handle.h ****     uint16_t topic_id;
 103:ROSSerial/ros/node_handle.h ****     const char* topic_name;
 104:ROSSerial/ros/node_handle.h ****     const char* message_type;
 105:ROSSerial/ros/node_handle.h ****     const char* md5sum;
 106:ROSSerial/ros/node_handle.h ****     void (*callback)(const Msg& );
 107:ROSSerial/ros/node_handle.h **** } SubscriberType;
 108:ROSSerial/ros/node_handle.h **** 
 109:ROSSerial/ros/node_handle.h **** typedef struct
 110:ROSSerial/ros/node_handle.h **** {
 111:ROSSerial/ros/node_handle.h ****     uint16_t topic_id;
 112:ROSSerial/ros/node_handle.h ****     const char* topic_name;
 113:ROSSerial/ros/node_handle.h ****     const Msg* msg; 
 114:ROSSerial/ros/node_handle.h ****     const char* message_type;
 115:ROSSerial/ros/node_handle.h ****     const char* md5sum;
 116:ROSSerial/ros/node_handle.h **** } PublisherType;
 117:ROSSerial/ros/node_handle.h **** 
 118:ROSSerial/ros/node_handle.h **** /* Node Handle */
 119:ROSSerial/ros/node_handle.h **** template<class Hardware,
 120:ROSSerial/ros/node_handle.h ****          int MAX_SUBSCRIBERS = 25,
 121:ROSSerial/ros/node_handle.h ****          int MAX_PUBLISHERS = 25,
 122:ROSSerial/ros/node_handle.h ****          int INPUT_SIZE = 512,
 123:ROSSerial/ros/node_handle.h ****          int OUTPUT_SIZE = 512>
 124:ROSSerial/ros/node_handle.h **** class NodeHandle_ : public NodeHandleBase_
 125:ROSSerial/ros/node_handle.h **** {
 126:ROSSerial/ros/node_handle.h **** protected:
 127:ROSSerial/ros/node_handle.h ****   Hardware hardware_;
 128:ROSSerial/ros/node_handle.h **** 
 129:ROSSerial/ros/node_handle.h ****   /* time used for syncing */
 130:ROSSerial/ros/node_handle.h ****   uint32_t rt_time;
 131:ROSSerial/ros/node_handle.h **** 
 132:ROSSerial/ros/node_handle.h ****   /* used for computing current time */
 133:ROSSerial/ros/node_handle.h ****   uint32_t sec_offset, nsec_offset;
 134:ROSSerial/ros/node_handle.h **** 
 135:ROSSerial/ros/node_handle.h ****   /* Spinonce maximum work timeout */
 136:ROSSerial/ros/node_handle.h ****   uint32_t spin_timeout_;
 137:ROSSerial/ros/node_handle.h **** 
 138:ROSSerial/ros/node_handle.h ****   uint8_t message_in[INPUT_SIZE];
 139:ROSSerial/ros/node_handle.h ****   uint8_t message_out[OUTPUT_SIZE];
 140:ROSSerial/ros/node_handle.h **** 
 141:ROSSerial/ros/node_handle.h ****   Publisher * publishers[MAX_PUBLISHERS];
 142:ROSSerial/ros/node_handle.h ****   PublisherType publishers2[MAX_PUBLISHERS];
 143:ROSSerial/ros/node_handle.h ****   Subscriber_ * subscribers[MAX_SUBSCRIBERS];
 144:ROSSerial/ros/node_handle.h ****   SubscriberType subscribers2[MAX_SUBSCRIBERS];
 145:ROSSerial/ros/node_handle.h **** 
 146:ROSSerial/ros/node_handle.h ****   /*
 147:ROSSerial/ros/node_handle.h ****    * Setup Functions
 148:ROSSerial/ros/node_handle.h ****    */
 149:ROSSerial/ros/node_handle.h **** public:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 59


 150:ROSSerial/ros/node_handle.h ****   NodeHandle_() : configured_(false)
 151:ROSSerial/ros/node_handle.h ****   {
 152:ROSSerial/ros/node_handle.h **** 
 153:ROSSerial/ros/node_handle.h ****     for (unsigned int i = 0; i < MAX_PUBLISHERS; i++) {
 154:ROSSerial/ros/node_handle.h ****       publishers[i] = 0;
 155:ROSSerial/ros/node_handle.h ****       publishers2[i].topic_id = 0;
 156:ROSSerial/ros/node_handle.h ****     }
 157:ROSSerial/ros/node_handle.h **** 
 158:ROSSerial/ros/node_handle.h ****     for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++) {
 159:ROSSerial/ros/node_handle.h ****       subscribers[i] = 0;
 160:ROSSerial/ros/node_handle.h ****       subscribers2[i].topic_id = 0;
 161:ROSSerial/ros/node_handle.h ****     }
 162:ROSSerial/ros/node_handle.h **** 
 163:ROSSerial/ros/node_handle.h ****     for (unsigned int i = 0; i < INPUT_SIZE; i++)
 164:ROSSerial/ros/node_handle.h ****       message_in[i] = 0;
 165:ROSSerial/ros/node_handle.h **** 
 166:ROSSerial/ros/node_handle.h ****     for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 167:ROSSerial/ros/node_handle.h ****       message_out[i] = 0;
 168:ROSSerial/ros/node_handle.h **** 
 169:ROSSerial/ros/node_handle.h ****     req_param_resp.ints_length = 0;
 170:ROSSerial/ros/node_handle.h ****     req_param_resp.ints = NULL;
 171:ROSSerial/ros/node_handle.h ****     req_param_resp.floats_length = 0;
 172:ROSSerial/ros/node_handle.h ****     req_param_resp.floats = NULL;
 173:ROSSerial/ros/node_handle.h ****     req_param_resp.ints_length = 0;
 174:ROSSerial/ros/node_handle.h ****     req_param_resp.ints = NULL;
 175:ROSSerial/ros/node_handle.h **** 
 176:ROSSerial/ros/node_handle.h ****     spin_timeout_ = 0;
 177:ROSSerial/ros/node_handle.h ****   }
 178:ROSSerial/ros/node_handle.h **** 
 179:ROSSerial/ros/node_handle.h ****   Hardware* getHardware()
 180:ROSSerial/ros/node_handle.h ****   {
 181:ROSSerial/ros/node_handle.h ****     return &hardware_;
 182:ROSSerial/ros/node_handle.h ****   }
 183:ROSSerial/ros/node_handle.h **** 
 184:ROSSerial/ros/node_handle.h ****   /* Start serial, initialize buffers */
 185:ROSSerial/ros/node_handle.h ****   void initNode()
 186:ROSSerial/ros/node_handle.h ****   {
 187:ROSSerial/ros/node_handle.h ****     hardware_.init();
 188:ROSSerial/ros/node_handle.h ****     mode_ = 0;
 189:ROSSerial/ros/node_handle.h ****     bytes_ = 0;
 190:ROSSerial/ros/node_handle.h ****     index_ = 0;
 191:ROSSerial/ros/node_handle.h ****     topic_ = 0;
 192:ROSSerial/ros/node_handle.h ****     printf("Node init\n");
 193:ROSSerial/ros/node_handle.h ****   };
 194:ROSSerial/ros/node_handle.h **** 
 195:ROSSerial/ros/node_handle.h ****   /* Start a named port, which may be network server IP, initialize buffers */
 196:ROSSerial/ros/node_handle.h ****   void initNode(char *portName)
 197:ROSSerial/ros/node_handle.h ****   {
 198:ROSSerial/ros/node_handle.h ****     hardware_.init(portName);
 199:ROSSerial/ros/node_handle.h ****     mode_ = 0;
 200:ROSSerial/ros/node_handle.h ****     bytes_ = 0;
 201:ROSSerial/ros/node_handle.h ****     index_ = 0;
 202:ROSSerial/ros/node_handle.h ****     topic_ = 0;
 203:ROSSerial/ros/node_handle.h ****   };
 204:ROSSerial/ros/node_handle.h **** 
 205:ROSSerial/ros/node_handle.h ****   /**
 206:ROSSerial/ros/node_handle.h ****    * @brief Sets the maximum time in millisconds that spinOnce() can work.
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 60


 207:ROSSerial/ros/node_handle.h ****    * This will not effect the processing of the buffer, as spinOnce processes
 208:ROSSerial/ros/node_handle.h ****    * one byte at a time. It simply sets the maximum time that one call can
 209:ROSSerial/ros/node_handle.h ****    * process for. You can choose to clear the buffer if that is beneficial if
 210:ROSSerial/ros/node_handle.h ****    * SPIN_TIMEOUT is returned from spinOnce().
 211:ROSSerial/ros/node_handle.h ****    * @param timeout The timeout in milliseconds that spinOnce will function.
 212:ROSSerial/ros/node_handle.h ****    */
 213:ROSSerial/ros/node_handle.h ****   void setSpinTimeout(const uint32_t& timeout)
 214:ROSSerial/ros/node_handle.h ****   {
 215:ROSSerial/ros/node_handle.h ****      spin_timeout_ = timeout;
 216:ROSSerial/ros/node_handle.h ****   }
 217:ROSSerial/ros/node_handle.h **** 
 218:ROSSerial/ros/node_handle.h **** protected:
 219:ROSSerial/ros/node_handle.h ****   //State machine variables for spinOnce
 220:ROSSerial/ros/node_handle.h ****   int mode_;
 221:ROSSerial/ros/node_handle.h ****   int bytes_;
 222:ROSSerial/ros/node_handle.h ****   int topic_;
 223:ROSSerial/ros/node_handle.h ****   int index_;
 224:ROSSerial/ros/node_handle.h ****   int checksum_;
 225:ROSSerial/ros/node_handle.h **** 
 226:ROSSerial/ros/node_handle.h ****   bool configured_;
 227:ROSSerial/ros/node_handle.h **** 
 228:ROSSerial/ros/node_handle.h ****   /* used for syncing the time */
 229:ROSSerial/ros/node_handle.h ****   uint32_t last_sync_time;
 230:ROSSerial/ros/node_handle.h ****   uint32_t last_sync_receive_time;
 231:ROSSerial/ros/node_handle.h ****   uint32_t last_msg_timeout_time;
 232:ROSSerial/ros/node_handle.h **** 
 233:ROSSerial/ros/node_handle.h **** public:
 234:ROSSerial/ros/node_handle.h ****   /* This function goes in your loop() function, it handles
 235:ROSSerial/ros/node_handle.h ****    *  serial input and callbacks for subscribers.
 236:ROSSerial/ros/node_handle.h ****    */
 237:ROSSerial/ros/node_handle.h **** 
 238:ROSSerial/ros/node_handle.h ****   virtual int spinOnce() {
 239:ROSSerial/ros/node_handle.h ****     return spinOnce1();
 240:ROSSerial/ros/node_handle.h ****   }
 241:ROSSerial/ros/node_handle.h **** 
 242:ROSSerial/ros/node_handle.h **** //calling spinOnce() directly from spin_task gives stackoverflow
 243:ROSSerial/ros/node_handle.h ****   int spinOnce1()
 244:ROSSerial/ros/node_handle.h ****   {
 245:ROSSerial/ros/node_handle.h ****     static void (*s_CallBack)(char *);
 246:ROSSerial/ros/node_handle.h ****     
 247:ROSSerial/ros/node_handle.h ****     //printf("spinOnce\n");
 248:ROSSerial/ros/node_handle.h ****     /* restart if timed out */
 249:ROSSerial/ros/node_handle.h ****     uint32_t c_time = hardware_.time();
 250:ROSSerial/ros/node_handle.h ****     if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 251:ROSSerial/ros/node_handle.h ****     {
 252:ROSSerial/ros/node_handle.h ****       //printf("spinOnce  setting configured_ false %lu, %lu, %ld\n",c_time, 
 253:ROSSerial/ros/node_handle.h ****       //        last_sync_receive_time, (c_time-last_sync_receive_time));
 254:ROSSerial/ros/node_handle.h ****       configured_ = false;
 255:ROSSerial/ros/node_handle.h ****     }
 256:ROSSerial/ros/node_handle.h **** 
 257:ROSSerial/ros/node_handle.h ****     /* reset if message has timed out */
 258:ROSSerial/ros/node_handle.h ****     if (mode_ != MODE_FIRST_FF)
 259:ROSSerial/ros/node_handle.h ****     {
 260:ROSSerial/ros/node_handle.h ****       if (c_time > last_msg_timeout_time)
 261:ROSSerial/ros/node_handle.h ****       {
 262:ROSSerial/ros/node_handle.h ****         mode_ = MODE_FIRST_FF;
 263:ROSSerial/ros/node_handle.h ****       }
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 61


 264:ROSSerial/ros/node_handle.h ****     }
 265:ROSSerial/ros/node_handle.h **** 
 266:ROSSerial/ros/node_handle.h ****     /* while available buffer, read data */
 267:ROSSerial/ros/node_handle.h ****     while (true)
 268:ROSSerial/ros/node_handle.h ****     {
 269:ROSSerial/ros/node_handle.h ****       // If a timeout has been specified, check how long spinOnce has been running.
 270:ROSSerial/ros/node_handle.h ****       if (spin_timeout_ > 0)
 271:ROSSerial/ros/node_handle.h ****       {
 272:ROSSerial/ros/node_handle.h ****         // If the maximum processing timeout has been exceeded, exit with error.
 273:ROSSerial/ros/node_handle.h ****         // The next spinOnce can continue where it left off, or optionally
 274:ROSSerial/ros/node_handle.h ****         // based on the application in use, the hardware buffer could be flushed
 275:ROSSerial/ros/node_handle.h ****         // and start fresh.
 276:ROSSerial/ros/node_handle.h ****         if ((hardware_.time() - c_time) > spin_timeout_)
 277:ROSSerial/ros/node_handle.h ****         {
 278:ROSSerial/ros/node_handle.h ****           // Exit the spin, processing timeout exceeded.
 279:ROSSerial/ros/node_handle.h ****           return SPIN_TIMEOUT;
 280:ROSSerial/ros/node_handle.h ****         }
 281:ROSSerial/ros/node_handle.h ****       }
 282:ROSSerial/ros/node_handle.h ****       int data = hardware_.read();
 283:ROSSerial/ros/node_handle.h ****       if (data < 0)
 284:ROSSerial/ros/node_handle.h ****         break;
 285:ROSSerial/ros/node_handle.h ****       checksum_ += data;
 286:ROSSerial/ros/node_handle.h ****       if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 287:ROSSerial/ros/node_handle.h ****       {
 288:ROSSerial/ros/node_handle.h ****         message_in[index_++] = data;
 289:ROSSerial/ros/node_handle.h ****         bytes_--;
 290:ROSSerial/ros/node_handle.h ****         if (bytes_ == 0)                 /* is message complete? if so, checksum */
 291:ROSSerial/ros/node_handle.h ****           mode_ = MODE_MSG_CHECKSUM;
 292:ROSSerial/ros/node_handle.h ****       }
 293:ROSSerial/ros/node_handle.h ****       else if (mode_ == MODE_FIRST_FF)
 294:ROSSerial/ros/node_handle.h ****       {
 295:ROSSerial/ros/node_handle.h ****         if (data == 0xff)
 296:ROSSerial/ros/node_handle.h ****         {
 297:ROSSerial/ros/node_handle.h ****           mode_++;
 298:ROSSerial/ros/node_handle.h ****           last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 299:ROSSerial/ros/node_handle.h ****         }
 300:ROSSerial/ros/node_handle.h ****         else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 301:ROSSerial/ros/node_handle.h ****         {
 302:ROSSerial/ros/node_handle.h ****           /* We have been stuck in spinOnce too long, return error */
 303:ROSSerial/ros/node_handle.h ****           configured_ = false;
 304:ROSSerial/ros/node_handle.h ****           return SPIN_TIMEOUT;
 305:ROSSerial/ros/node_handle.h ****         }
 306:ROSSerial/ros/node_handle.h ****       }
 307:ROSSerial/ros/node_handle.h ****       else if (mode_ == MODE_PROTOCOL_VER)
 308:ROSSerial/ros/node_handle.h ****       {
 309:ROSSerial/ros/node_handle.h ****         if (data == PROTOCOL_VER)
 310:ROSSerial/ros/node_handle.h ****         {
 311:ROSSerial/ros/node_handle.h ****           mode_++;
 312:ROSSerial/ros/node_handle.h ****         }
 313:ROSSerial/ros/node_handle.h ****         else
 314:ROSSerial/ros/node_handle.h ****         {
 315:ROSSerial/ros/node_handle.h ****           mode_ = MODE_FIRST_FF;
 316:ROSSerial/ros/node_handle.h ****           if (configured_ == false)
 317:ROSSerial/ros/node_handle.h ****             requestSyncTime();  /* send a msg back showing our protocol version */
 318:ROSSerial/ros/node_handle.h ****         }
 319:ROSSerial/ros/node_handle.h ****       }
 320:ROSSerial/ros/node_handle.h ****       else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 62


 321:ROSSerial/ros/node_handle.h ****       {
 322:ROSSerial/ros/node_handle.h ****         bytes_ = data;
 323:ROSSerial/ros/node_handle.h ****         index_ = 0;
 324:ROSSerial/ros/node_handle.h ****         mode_++;
 325:ROSSerial/ros/node_handle.h ****         checksum_ = data;               /* first byte for calculating size checksum */
 326:ROSSerial/ros/node_handle.h ****       }
 327:ROSSerial/ros/node_handle.h ****       else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 328:ROSSerial/ros/node_handle.h ****       {
 329:ROSSerial/ros/node_handle.h ****         bytes_ += data << 8;
 330:ROSSerial/ros/node_handle.h ****         mode_++;
 331:ROSSerial/ros/node_handle.h ****       }
 332:ROSSerial/ros/node_handle.h ****       else if (mode_ == MODE_SIZE_CHECKSUM)
 333:ROSSerial/ros/node_handle.h ****       {
 334:ROSSerial/ros/node_handle.h ****         if ((checksum_ % 256) == 255)
 335:ROSSerial/ros/node_handle.h ****           mode_++;
 336:ROSSerial/ros/node_handle.h ****         else
 337:ROSSerial/ros/node_handle.h ****           mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 338:ROSSerial/ros/node_handle.h ****       }
 339:ROSSerial/ros/node_handle.h ****       else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 340:ROSSerial/ros/node_handle.h ****       {
 341:ROSSerial/ros/node_handle.h ****         topic_ = data;
 342:ROSSerial/ros/node_handle.h ****         mode_++;
 343:ROSSerial/ros/node_handle.h ****         checksum_ = data;               /* first byte included in checksum */
 344:ROSSerial/ros/node_handle.h ****       }
 345:ROSSerial/ros/node_handle.h ****       else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 346:ROSSerial/ros/node_handle.h ****       {
 347:ROSSerial/ros/node_handle.h ****         topic_ += data << 8;
 348:ROSSerial/ros/node_handle.h ****         mode_ = MODE_MESSAGE;
 349:ROSSerial/ros/node_handle.h ****         if (bytes_ == 0)
 350:ROSSerial/ros/node_handle.h ****           mode_ = MODE_MSG_CHECKSUM;
 351:ROSSerial/ros/node_handle.h ****       }
 352:ROSSerial/ros/node_handle.h ****       else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 353:ROSSerial/ros/node_handle.h ****       {
 354:ROSSerial/ros/node_handle.h ****         mode_ = MODE_FIRST_FF;
 355:ROSSerial/ros/node_handle.h ****         if ((checksum_ % 256) == 255)
 356:ROSSerial/ros/node_handle.h ****         {
 357:ROSSerial/ros/node_handle.h ****           if (topic_ == TopicInfo::ID_PUBLISHER)
 358:ROSSerial/ros/node_handle.h ****           {
 359:ROSSerial/ros/node_handle.h ****             requestSyncTime();
 360:ROSSerial/ros/node_handle.h ****             negotiateTopics();
 361:ROSSerial/ros/node_handle.h ****             last_sync_time = c_time;
 362:ROSSerial/ros/node_handle.h ****             last_sync_receive_time = c_time;
 363:ROSSerial/ros/node_handle.h ****             return SPIN_ERR;
 364:ROSSerial/ros/node_handle.h ****           }
 365:ROSSerial/ros/node_handle.h ****           else if (topic_ == TopicInfo::ID_TIME)
 366:ROSSerial/ros/node_handle.h ****           {
 367:ROSSerial/ros/node_handle.h ****             syncTime(message_in);
 368:ROSSerial/ros/node_handle.h ****           }
 369:ROSSerial/ros/node_handle.h ****           else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 370:ROSSerial/ros/node_handle.h ****           {
 371:ROSSerial/ros/node_handle.h ****             req_param_resp.deserialize(message_in);
 372:ROSSerial/ros/node_handle.h ****             param_recieved = true;
 373:ROSSerial/ros/node_handle.h ****           }
 374:ROSSerial/ros/node_handle.h ****           else if (topic_ == TopicInfo::ID_TX_STOP)
 375:ROSSerial/ros/node_handle.h ****           {
 376:ROSSerial/ros/node_handle.h ****             configured_ = false;
 377:ROSSerial/ros/node_handle.h ****           }
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 63


 378:ROSSerial/ros/node_handle.h ****           else
 379:ROSSerial/ros/node_handle.h ****           {
 380:ROSSerial/ros/node_handle.h ****             if (subscribers2[topic_ - 100].topic_id != 0) {
 381:ROSSerial/ros/node_handle.h ****               s_CallBack = (void (*)(char*))subscribers2[topic_ - 100].callback;
 382:ROSSerial/ros/node_handle.h ****               //printf("Calling callback with %id\n",subscribers2[topic_ - 100].topic_id);
 383:ROSSerial/ros/node_handle.h ****               s_CallBack(message_in);
 384:ROSSerial/ros/node_handle.h ****             }
 385:ROSSerial/ros/node_handle.h ****           }
 386:ROSSerial/ros/node_handle.h ****         }
 387:ROSSerial/ros/node_handle.h ****       }
 388:ROSSerial/ros/node_handle.h ****     }
 389:ROSSerial/ros/node_handle.h **** 
 390:ROSSerial/ros/node_handle.h ****     /* occasionally sync time */
 391:ROSSerial/ros/node_handle.h ****     if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 392:ROSSerial/ros/node_handle.h ****     {
 393:ROSSerial/ros/node_handle.h ****       //printf("Resetting sync time %lu, %lu, %ld\n",c_time, last_sync_time, (c_time-last_sync_time
 394:ROSSerial/ros/node_handle.h ****       requestSyncTime(); 
 395:ROSSerial/ros/node_handle.h ****       last_sync_time = c_time;
 396:ROSSerial/ros/node_handle.h ****     }
 397:ROSSerial/ros/node_handle.h **** 
 398:ROSSerial/ros/node_handle.h ****     return SPIN_OK;
 399:ROSSerial/ros/node_handle.h ****   }
 400:ROSSerial/ros/node_handle.h **** 
 401:ROSSerial/ros/node_handle.h **** 
 402:ROSSerial/ros/node_handle.h ****   /* Are we connected to the PC? */
 403:ROSSerial/ros/node_handle.h ****   virtual bool connected()
 404:ROSSerial/ros/node_handle.h ****   {
 405:ROSSerial/ros/node_handle.h ****     return configured_;
 406:ROSSerial/ros/node_handle.h ****   };
 407:ROSSerial/ros/node_handle.h **** 
 408:ROSSerial/ros/node_handle.h ****   /********************************************************************
 409:ROSSerial/ros/node_handle.h ****    * Time functions
 410:ROSSerial/ros/node_handle.h ****    */
 411:ROSSerial/ros/node_handle.h **** 
 412:ROSSerial/ros/node_handle.h ****   void requestSyncTime()
 413:ROSSerial/ros/node_handle.h ****   {
 414:ROSSerial/ros/node_handle.h ****     if(last_sync_receive_time < rt_time)
 415:ROSSerial/ros/node_handle.h ****     {
 416:ROSSerial/ros/node_handle.h ****       printf("skip requestSyncTime as one is pending %lu\n",hardware_.time());
 417:ROSSerial/ros/node_handle.h ****       return;
 418:ROSSerial/ros/node_handle.h ****     }
 419:ROSSerial/ros/node_handle.h ****     std_msgs::Time t;
 420:ROSSerial/ros/node_handle.h ****     rt_time = hardware_.time();
 421:ROSSerial/ros/node_handle.h ****     printf("requestSyncTime  rt_time=%lu\n",rt_time);
 422:ROSSerial/ros/node_handle.h ****     publish1(TopicInfo::ID_TIME, &t);
 423:ROSSerial/ros/node_handle.h ****     //printf("end requestSyncTime  rt_time=%lu\n",hardware_.time());
 424:ROSSerial/ros/node_handle.h ****   }
 425:ROSSerial/ros/node_handle.h **** 
 426:ROSSerial/ros/node_handle.h ****   void syncTime(uint8_t * data)
 427:ROSSerial/ros/node_handle.h ****   {
 428:ROSSerial/ros/node_handle.h ****     std_msgs::Time t;
 429:ROSSerial/ros/node_handle.h ****     uint32_t offset = hardware_.time() - rt_time;
 430:ROSSerial/ros/node_handle.h **** 
 431:ROSSerial/ros/node_handle.h ****     t.deserialize(data);
 432:ROSSerial/ros/node_handle.h ****     t.data.sec += offset / 1000;
 433:ROSSerial/ros/node_handle.h ****     t.data.nsec += (offset % 1000) * 1000000UL;
 434:ROSSerial/ros/node_handle.h **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 64


 435:ROSSerial/ros/node_handle.h ****     this->setNow(t.data);
 436:ROSSerial/ros/node_handle.h ****     uint32_t c_time = hardware_.time();
 437:ROSSerial/ros/node_handle.h ****     printf("syncTime c_time=%lu, offset=%ld\n",c_time,offset);
 438:ROSSerial/ros/node_handle.h ****     last_sync_receive_time = c_time;
 439:ROSSerial/ros/node_handle.h ****   }
 440:ROSSerial/ros/node_handle.h **** 
 441:ROSSerial/ros/node_handle.h ****   Time now()
 442:ROSSerial/ros/node_handle.h ****   {
 443:ROSSerial/ros/node_handle.h ****     uint32_t ms = hardware_.time();
 444:ROSSerial/ros/node_handle.h ****     Time current_time;
 445:ROSSerial/ros/node_handle.h ****     current_time.sec = ms / 1000 + sec_offset;
 446:ROSSerial/ros/node_handle.h ****     current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
 447:ROSSerial/ros/node_handle.h ****     normalizeSecNSec(current_time.sec, current_time.nsec);
 448:ROSSerial/ros/node_handle.h ****     return current_time;
 449:ROSSerial/ros/node_handle.h ****   }
 450:ROSSerial/ros/node_handle.h **** 
 451:ROSSerial/ros/node_handle.h ****   void setNow(Time & new_now)
 452:ROSSerial/ros/node_handle.h ****   {
 453:ROSSerial/ros/node_handle.h ****     uint32_t ms = hardware_.time();
 454:ROSSerial/ros/node_handle.h ****     sec_offset = new_now.sec - ms / 1000 - 1;
 455:ROSSerial/ros/node_handle.h ****     nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 456:ROSSerial/ros/node_handle.h ****     normalizeSecNSec(sec_offset, nsec_offset);
 457:ROSSerial/ros/node_handle.h ****   }
 458:ROSSerial/ros/node_handle.h **** 
 459:ROSSerial/ros/node_handle.h ****   /********************************************************************
 460:ROSSerial/ros/node_handle.h ****    * Topic Management
 461:ROSSerial/ros/node_handle.h ****    */
 462:ROSSerial/ros/node_handle.h **** 
 463:ROSSerial/ros/node_handle.h ****    /* Register a new publisher without C++ template */
 464:ROSSerial/ros/node_handle.h ****   PublisherType* addPublisher(char * topic_name, Msg * msg)
 465:ROSSerial/ros/node_handle.h ****   {
 466:ROSSerial/ros/node_handle.h ****     for (int i = 0; i < MAX_PUBLISHERS; i++)
 467:ROSSerial/ros/node_handle.h ****     {
 468:ROSSerial/ros/node_handle.h ****       if (publishers2[i].topic_id == 0) {// empty slot}
 469:ROSSerial/ros/node_handle.h **** 
 470:ROSSerial/ros/node_handle.h ****         publishers2[i].topic_id = i + 100 + MAX_SUBSCRIBERS;
 471:ROSSerial/ros/node_handle.h ****         publishers2[i].topic_name = topic_name;
 472:ROSSerial/ros/node_handle.h ****         publishers2[i].msg = msg;
 473:ROSSerial/ros/node_handle.h ****         publishers2[i].message_type = msg->getType();
 474:ROSSerial/ros/node_handle.h ****         publishers2[i].md5sum = msg->getMD5();
 475:ROSSerial/ros/node_handle.h **** 
 476:ROSSerial/ros/node_handle.h ****         return &publishers2[i];
 477:ROSSerial/ros/node_handle.h ****       }
 478:ROSSerial/ros/node_handle.h ****     }
 479:ROSSerial/ros/node_handle.h ****     return nullptr;
 480:ROSSerial/ros/node_handle.h ****   }
 481:ROSSerial/ros/node_handle.h **** 
 482:ROSSerial/ros/node_handle.h ****   /* Register a new publisher */
 483:ROSSerial/ros/node_handle.h ****   bool advertise(Publisher & p)
 484:ROSSerial/ros/node_handle.h ****   {
 485:ROSSerial/ros/node_handle.h ****     for (int i = 0; i < MAX_PUBLISHERS; i++)
 486:ROSSerial/ros/node_handle.h ****     {
 487:ROSSerial/ros/node_handle.h ****       if (publishers[i] == 0) // empty slot
 488:ROSSerial/ros/node_handle.h ****       {
 489:ROSSerial/ros/node_handle.h ****         publishers[i] = &p;
 490:ROSSerial/ros/node_handle.h ****         p.id_ = i + 100 + MAX_SUBSCRIBERS;
 491:ROSSerial/ros/node_handle.h ****         p.nh_ = this;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 65


 492:ROSSerial/ros/node_handle.h ****         return true;
 493:ROSSerial/ros/node_handle.h ****       }
 494:ROSSerial/ros/node_handle.h ****     }
 495:ROSSerial/ros/node_handle.h ****     return false;
 496:ROSSerial/ros/node_handle.h ****   }
 497:ROSSerial/ros/node_handle.h **** 
 498:ROSSerial/ros/node_handle.h ****   /* Register a new subscriber */
 499:ROSSerial/ros/node_handle.h ****   template<typename SubscriberT>
 500:ROSSerial/ros/node_handle.h ****   bool subscribe(SubscriberT& s)
 501:ROSSerial/ros/node_handle.h ****   {
 502:ROSSerial/ros/node_handle.h ****     for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 503:ROSSerial/ros/node_handle.h ****     {
 504:ROSSerial/ros/node_handle.h ****       if (subscribers[i] == 0) // empty slot
 505:ROSSerial/ros/node_handle.h ****       {
 506:ROSSerial/ros/node_handle.h ****         subscribers[i] = static_cast<Subscriber_*>(&s);
 507:ROSSerial/ros/node_handle.h ****         s.id_ = i + 100;
 508:ROSSerial/ros/node_handle.h ****         return true;
 509:ROSSerial/ros/node_handle.h ****       }
 510:ROSSerial/ros/node_handle.h ****     }
 511:ROSSerial/ros/node_handle.h ****     return false;
 512:ROSSerial/ros/node_handle.h ****   }
 513:ROSSerial/ros/node_handle.h **** 
 514:ROSSerial/ros/node_handle.h ****   bool addSubscriber(SubscriberType sub)
 515:ROSSerial/ros/node_handle.h ****   {
 516:ROSSerial/ros/node_handle.h ****     for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 2374              		.loc 6 516 0
 2375 0020 0024     		movs	r4, #0
 2376              	.LVL346:
 2377              	.L116:
 2378 0022 042C     		cmp	r4, #4
 2379 0024 26DC     		bgt	.L114
 2380              	.LBB256:
 517:ROSSerial/ros/node_handle.h ****     {
 518:ROSSerial/ros/node_handle.h ****       if (subscribers2[i].topic_id == 0) {// empty slot}
 2381              		.loc 6 518 0
 2382 0026 04EB8403 		add	r3, r4, r4, lsl #2
 2383 002a 06EB8303 		add	r3, r6, r3, lsl #2
 2384 002e B3F8A434 		ldrh	r3, [r3, #1188]
 2385 0032 0BB1     		cbz	r3, .L118
 2386              	.LBE256:
 516:ROSSerial/ros/node_handle.h ****     {
 2387              		.loc 6 516 0
 2388 0034 0134     		adds	r4, r4, #1
 2389              	.LVL347:
 2390 0036 F4E7     		b	.L116
 2391              	.L118:
 2392              	.LBB258:
 2393              	.LBB257:
 519:ROSSerial/ros/node_handle.h ****         void * ptr = &subscribers2[i];
 2394              		.loc 6 519 0
 2395 0038 4FEA840C 		lsl	ip, r4, #2
 2396 003c 0CEB0405 		add	r5, ip, r4
 2397 0040 AD00     		lsls	r5, r5, #2
 2398 0042 05F59465 		add	r5, r5, #1184
 2399 0046 3544     		add	r5, r5, r6
 2400              	.LVL348:
 520:ROSSerial/ros/node_handle.h ****         memcpy(ptr, &sub, sizeof(sub));
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 66


 2401              		.loc 6 520 0
 2402 0048 6F46     		mov	r7, sp
 2403 004a 0FCF     		ldmia	r7!, {r0, r1, r2, r3}
 2404 004c 6860     		str	r0, [r5, #4]	@ unaligned
 2405 004e A960     		str	r1, [r5, #8]	@ unaligned
 2406 0050 EA60     		str	r2, [r5, #12]	@ unaligned
 2407 0052 2B61     		str	r3, [r5, #16]	@ unaligned
 2408 0054 3868     		ldr	r0, [r7]
 2409 0056 6861     		str	r0, [r5, #20]	@ unaligned
 521:ROSSerial/ros/node_handle.h ****         subscribers2[i].topic_id = i + 100;
 2410              		.loc 6 521 0
 2411 0058 04F16402 		add	r2, r4, #100
 2412 005c 92B2     		uxth	r2, r2
 2413 005e 0CEB0403 		add	r3, ip, r4
 2414 0062 06EB8303 		add	r3, r6, r3, lsl #2
 2415 0066 A3F8A424 		strh	r2, [r3, #1188]	@ movhi
 522:ROSSerial/ros/node_handle.h ****         printf("Registered %s with id %d\n", \
 2416              		.loc 6 522 0
 2417 006a D3F8A814 		ldr	r1, [r3, #1192]
 2418 006e 0748     		ldr	r0, .L119+16
 2419 0070 FFF7FEFF 		bl	printf
 2420              	.LVL349:
 2421              	.L114:
 2422              	.LBE257:
 2423              	.LBE258:
 2424              	.LBE255:
 2425              	.LBE254:
 2426              		.loc 3 35 0
 2427 0074 0120     		movs	r0, #1
 2428 0076 0BB0     		add	sp, sp, #44
 2429              	.LCFI10:
 2430              		.cfi_def_cfa_offset 20
 2431              		@ sp needed
 2432 0078 F0BD     		pop	{r4, r5, r6, r7, pc}
 2433              	.LVL350:
 2434              	.L120:
 2435 007a 00BF     		.align	2
 2436              	.L119:
 2437 007c 00000000 		.word	.LC4
 2438 0080 00000000 		.word	.LC2
 2439 0084 00000000 		.word	.LC3
 2440 0088 00000000 		.word	_Z13wheels_cmd_cbPh
 2441 008c 0C000000 		.word	.LC5
 2442              		.cfi_endproc
 2443              	.LFE502:
 2444              		.fnend
 2446              		.section	.text._GLOBAL__sub_I__Z13wheels_cmd_cbPh,"ax",%progbits
 2447              		.align	1
 2448              		.syntax unified
 2449              		.thumb
 2450              		.thumb_func
 2451              		.fpu fpv4-sp-d16
 2453              	_GLOBAL__sub_I__Z13wheels_cmd_cbPh:
 2454              		.fnstart
 2455              	.LFB507:
 2456              		.loc 3 35 0
 2457              		.cfi_startproc
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 67


 2458              		@ args = 0, pretend = 0, frame = 0
 2459              		@ frame_needed = 0, uses_anonymous_args = 0
 2460 0000 08B5     		push	{r3, lr}
 2461              	.LCFI11:
 2462              		.cfi_def_cfa_offset 8
 2463              		.cfi_offset 3, -8
 2464              		.cfi_offset 14, -4
 2465              		.loc 3 35 0
 2466 0002 4FF6FF71 		movw	r1, #65535
 2467 0006 0120     		movs	r0, #1
 2468 0008 FFF7FEFF 		bl	_Z41__static_initialization_and_destruction_0ii
 2469              	.LVL351:
 2470 000c 08BD     		pop	{r3, pc}
 2471              		.cfi_endproc
 2472              	.LFE507:
 2473              		.cantunwind
 2474              		.fnend
 2476              		.section	.init_array,"aw",%init_array
 2477              		.align	2
 2478 0000 00000000 		.word	_GLOBAL__sub_I__Z13wheels_cmd_cbPh(target1)
 2479              		.weak	_ZTVN8std_msgs6HeaderE
 2480              		.section	.rodata._ZTVN8std_msgs6HeaderE,"aG",%progbits,_ZTVN8std_msgs6HeaderE,comdat
 2481              		.align	2
 2484              	_ZTVN8std_msgs6HeaderE:
 2485 0000 00000000 		.word	0
 2486 0004 00000000 		.word	0
 2487 0008 00000000 		.word	_ZNK8std_msgs6Header9serializeEPh
 2488 000c 00000000 		.word	_ZN8std_msgs6Header11deserializeEPh
 2489 0010 00000000 		.word	_ZN8std_msgs6Header7getTypeEv
 2490 0014 00000000 		.word	_ZN8std_msgs6Header6getMD5Ev
 2491              		.weak	_ZTVN11sensor_msgs10JointStateE
 2492              		.section	.rodata._ZTVN11sensor_msgs10JointStateE,"aG",%progbits,_ZTVN11sensor_msgs10JointStateE,co
 2493              		.align	2
 2496              	_ZTVN11sensor_msgs10JointStateE:
 2497 0000 00000000 		.word	0
 2498 0004 00000000 		.word	0
 2499 0008 00000000 		.word	_ZNK11sensor_msgs10JointState9serializeEPh
 2500 000c 00000000 		.word	_ZN11sensor_msgs10JointState11deserializeEPh
 2501 0010 00000000 		.word	_ZN11sensor_msgs10JointState7getTypeEv
 2502 0014 00000000 		.word	_ZN11sensor_msgs10JointState6getMD5Ev
 2503              		.section	.bss._ZL14wheelPositions,"aw",%nobits
 2504              		.align	2
 2505              		.set	.LANCHOR0,. + 0
 2508              	_ZL14wheelPositions:
 2509 0000 00000000 		.space	72
 2509      00000000 
 2509      00000000 
 2509      00000000 
 2509      00000000 
 2510              		.section	.rodata._Z21rosSubscribeWheelsCmdPN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi512EE
 2511              		.align	2
 2512              	.LC4:
 2513 0000 77686565 		.ascii	"wheels_cmd\000"
 2513      6C735F63 
 2513      6D6400
 2514 000b 00       		.space	1
 2515              	.LC5:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 68


 2516 000c 52656769 		.ascii	"Registered %s with id %d\012\000"
 2516      73746572 
 2516      65642025 
 2516      73207769 
 2516      74682069 
 2517              		.section	.rodata._ZN11sensor_msgs10JointState6getMD5Ev.str1.4,"aMS",%progbits,1
 2518              		.align	2
 2519              	.LC3:
 2520 0000 33303636 		.ascii	"3066dcd76a6cfaef579bd0f34173e9fd\000"
 2520      64636437 
 2520      36613663 
 2520      66616566 
 2520      35373962 
 2521              		.section	.rodata._ZN11sensor_msgs10JointState7getTypeEv.str1.4,"aMS",%progbits,1
 2522              		.align	2
 2523              	.LC2:
 2524 0000 73656E73 		.ascii	"sensor_msgs/JointState\000"
 2524      6F725F6D 
 2524      7367732F 
 2524      4A6F696E 
 2524      74537461 
 2525              		.section	.rodata._ZN8std_msgs6Header6getMD5Ev.str1.4,"aMS",%progbits,1
 2526              		.align	2
 2527              	.LC1:
 2528 0000 32313736 		.ascii	"2176decaecbce78abc3b96ef049fabed\000"
 2528      64656361 
 2528      65636263 
 2528      65373861 
 2528      62633362 
 2529              		.section	.rodata._ZN8std_msgs6Header7getTypeEv.str1.4,"aMS",%progbits,1
 2530              		.align	2
 2531              	.LC0:
 2532 0000 7374645F 		.ascii	"std_msgs/Header\000"
 2532      6D736773 
 2532      2F486561 
 2532      64657200 
 2533              		.text
 2534              	.Letext0:
 2535              		.file 7 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 2536              		.file 8 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 2537              		.file 9 "Drivers/CMSIS/CM4/CoreSupport/core_cm4.h"
 2538              		.file 10 "Inc/system_at32f4xx.h"
 2539              		.file 11 "Drivers/CMSIS/CM4/DeviceSupport/at32f4xx.h"
 2540              		.file 12 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.
 2541              		.file 13 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/lock.h"
 2542              		.file 14 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_types.h"
 2543              		.file 15 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/reent.h"
 2544              		.file 16 "Drivers/Modified_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 2545              		.file 17 "Drivers/Modified_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 2546              		.file 18 "Drivers/Modified_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 2547              		.file 19 "ROSSerial/AT32hardware.h"
 2548              		.file 20 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/c++/7.3.1/cstdlib"
 2549              		.file 21 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/c++/7.3.1/cmath"
 2550              		.file 22 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/c++/7.3.1/cstring"
 2551              		.file 23 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/c++/7.3.1/arm-none-ea
 2552              		.file 24 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/stdlib.h"
 2553              		.file 25 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/c++/7.3.1/stdlib.h"
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 69


 2554              		.file 26 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/math.h"
 2555              		.file 27 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/c++/7.3.1/math.h"
 2556              		.file 28 "<built-in>"
 2557              		.file 29 "ROSSerial/ros/duration.h"
 2558              		.file 30 "ROSSerial/ros.h"
 2559              		.file 31 "ROSSerial/rosserial_msgs/TopicInfo.h"
 2560              		.file 32 "ROSSerial/rosserial_msgs/RequestParam.h"
 2561              		.file 33 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/string.h"
 2562              		.file 34 "ROSSerial/std_msgs/Time.h"
 2563              		.file 35 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/stdio.h"
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 70


DEFINED SYMBOLS
                            *ABS*:0000000000000000 ROS_subscribe.cpp
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:17     .text._ZN8std_msgs6Header11deserializeEPh:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:24     .text._ZN8std_msgs6Header11deserializeEPh:0000000000000000 _ZN8std_msgs6Header11deserializeEPh
.ARM.exidx.text._ZN8std_msgs6Header11deserializeEPh:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:136    .text._ZN8std_msgs6Header7getTypeEv:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:143    .text._ZN8std_msgs6Header7getTypeEv:0000000000000000 _ZN8std_msgs6Header7getTypeEv
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:159    .text._ZN8std_msgs6Header7getTypeEv:0000000000000004 $d
.ARM.exidx.text._ZN8std_msgs6Header7getTypeEv:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:166    .text._ZN8std_msgs6Header6getMD5Ev:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:173    .text._ZN8std_msgs6Header6getMD5Ev:0000000000000000 _ZN8std_msgs6Header6getMD5Ev
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:189    .text._ZN8std_msgs6Header6getMD5Ev:0000000000000004 $d
.ARM.exidx.text._ZN8std_msgs6Header6getMD5Ev:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:196    .text._ZN11sensor_msgs10JointState7getTypeEv:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:203    .text._ZN11sensor_msgs10JointState7getTypeEv:0000000000000000 _ZN11sensor_msgs10JointState7getTypeEv
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:220    .text._ZN11sensor_msgs10JointState7getTypeEv:0000000000000004 $d
.ARM.exidx.text._ZN11sensor_msgs10JointState7getTypeEv:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:227    .text._ZN11sensor_msgs10JointState6getMD5Ev:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:234    .text._ZN11sensor_msgs10JointState6getMD5Ev:0000000000000000 _ZN11sensor_msgs10JointState6getMD5Ev
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:250    .text._ZN11sensor_msgs10JointState6getMD5Ev:0000000000000004 $d
.ARM.exidx.text._ZN11sensor_msgs10JointState6getMD5Ev:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:257    .text._Z41__static_initialization_and_destruction_0ii:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:263    .text._Z41__static_initialization_and_destruction_0ii:0000000000000000 _Z41__static_initialization_and_destruction_0ii
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:335    .text._Z41__static_initialization_and_destruction_0ii:0000000000000038 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:2496   .rodata._ZTVN11sensor_msgs10JointStateE:0000000000000000 _ZTVN11sensor_msgs10JointStateE
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:2484   .rodata._ZTVN8std_msgs6HeaderE:0000000000000000 _ZTVN8std_msgs6HeaderE
.ARM.exidx.text._Z41__static_initialization_and_destruction_0ii:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:344    .text._ZNK8std_msgs6Header9serializeEPh:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:351    .text._ZNK8std_msgs6Header9serializeEPh:0000000000000000 _ZNK8std_msgs6Header9serializeEPh
.ARM.exidx.text._ZNK8std_msgs6Header9serializeEPh:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:438    .text._ZNK11sensor_msgs10JointState9serializeEPh:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:445    .text._ZNK11sensor_msgs10JointState9serializeEPh:0000000000000000 _ZNK11sensor_msgs10JointState9serializeEPh
.ARM.exidx.text._ZNK11sensor_msgs10JointState9serializeEPh:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:948    .text._ZN11sensor_msgs10JointState11deserializeEPh:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:955    .text._ZN11sensor_msgs10JointState11deserializeEPh:0000000000000000 _ZN11sensor_msgs10JointState11deserializeEPh
.ARM.exidx.text._ZN11sensor_msgs10JointState11deserializeEPh:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:1571   .text._Z13wheels_cmd_cbPh:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:1578   .text._Z13wheels_cmd_cbPh:0000000000000000 _Z13wheels_cmd_cbPh
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:2127   .text._Z13wheels_cmd_cbPh:000000000000027c $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:2134   .text._Z13wheels_cmd_cbPh:0000000000000280 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:2220   .text._Z13wheels_cmd_cbPh:00000000000002e8 $d
.ARM.exidx.text._Z13wheels_cmd_cbPh:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:2227   .text._Z17getWheelPositionsv:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:2234   .text._Z17getWheelPositionsv:0000000000000000 _Z17getWheelPositionsv
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:2311   .text._Z17getWheelPositionsv:000000000000005c $d
.ARM.exidx.text._Z17getWheelPositionsv:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:2320   .text._Z21rosSubscribeWheelsCmdPN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi512EEE:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:2327   .text._Z21rosSubscribeWheelsCmdPN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi512EEE:0000000000000000 _Z21rosSubscribeWheelsCmdPN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi512EEE
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:2437   .text._Z21rosSubscribeWheelsCmdPN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi512EEE:000000000000007c $d
.ARM.exidx.text._Z21rosSubscribeWheelsCmdPN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi512EEE:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:2447   .text._GLOBAL__sub_I__Z13wheels_cmd_cbPh:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:2453   .text._GLOBAL__sub_I__Z13wheels_cmd_cbPh:0000000000000000 _GLOBAL__sub_I__Z13wheels_cmd_cbPh
.ARM.exidx.text._GLOBAL__sub_I__Z13wheels_cmd_cbPh:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:2477   .init_array:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:2481   .rodata._ZTVN8std_msgs6HeaderE:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:2493   .rodata._ZTVN11sensor_msgs10JointStateE:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:2504   .bss._ZL14wheelPositions:0000000000000000 $d
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s 			page 71


/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:2508   .bss._ZL14wheelPositions:0000000000000000 _ZL14wheelPositions
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:2511   .rodata._Z21rosSubscribeWheelsCmdPN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi512EEE.str1.4:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:2518   .rodata._ZN11sensor_msgs10JointState6getMD5Ev.str1.4:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:2522   .rodata._ZN11sensor_msgs10JointState7getTypeEv.str1.4:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:2526   .rodata._ZN8std_msgs6Header6getMD5Ev.str1.4:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccNmXTve.s:2530   .rodata._ZN8std_msgs6Header7getTypeEv.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
strlen
memcpy
realloc
printf
__aeabi_unwind_cpp_pr0
