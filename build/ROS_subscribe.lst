ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"ROS_subscribe.cpp"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text._ZN8std_msgs6Header11deserializeEPh,"axG",%progbits,_ZN8std_msgs6Header11deserializ
  17              		.align	1
  18              		.weak	_ZN8std_msgs6Header11deserializeEPh
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	_ZN8std_msgs6Header11deserializeEPh:
  25              		.fnstart
  26              	.LFB475:
  27              		.file 1 "ROSSerial/std_msgs/Header.h"
   1:ROSSerial/std_msgs/Header.h **** #ifndef _ROS_std_msgs_Header_h
   2:ROSSerial/std_msgs/Header.h **** #define _ROS_std_msgs_Header_h
   3:ROSSerial/std_msgs/Header.h **** 
   4:ROSSerial/std_msgs/Header.h **** #include <stdint.h>
   5:ROSSerial/std_msgs/Header.h **** #include <string.h>
   6:ROSSerial/std_msgs/Header.h **** #include <stdlib.h>
   7:ROSSerial/std_msgs/Header.h **** #include "ros/msg.h"
   8:ROSSerial/std_msgs/Header.h **** #include "ros/time.h"
   9:ROSSerial/std_msgs/Header.h **** 
  10:ROSSerial/std_msgs/Header.h **** namespace std_msgs
  11:ROSSerial/std_msgs/Header.h **** {
  12:ROSSerial/std_msgs/Header.h **** 
  13:ROSSerial/std_msgs/Header.h ****   class Header : public ros::Msg
  14:ROSSerial/std_msgs/Header.h ****   {
  15:ROSSerial/std_msgs/Header.h ****     public:
  16:ROSSerial/std_msgs/Header.h ****       uint32_t seq;
  17:ROSSerial/std_msgs/Header.h ****       ros::Time stamp;
  18:ROSSerial/std_msgs/Header.h ****       const char* frame_id;
  19:ROSSerial/std_msgs/Header.h **** 
  20:ROSSerial/std_msgs/Header.h ****     virtual int serialize(unsigned char *outbuffer) const
  21:ROSSerial/std_msgs/Header.h ****     {
  22:ROSSerial/std_msgs/Header.h ****       int offset = 0;
  23:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
  24:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
  25:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
  26:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
  27:ROSSerial/std_msgs/Header.h ****       offset += sizeof(this->seq);
  28:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
  29:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
  30:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
  31:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 2


  32:ROSSerial/std_msgs/Header.h ****       offset += sizeof(this->stamp.sec);
  33:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
  34:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
  35:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
  36:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
  37:ROSSerial/std_msgs/Header.h ****       offset += sizeof(this->stamp.nsec);
  38:ROSSerial/std_msgs/Header.h ****       uint32_t length_frame_id = strlen(this->frame_id);
  39:ROSSerial/std_msgs/Header.h ****       memcpy(outbuffer + offset, &length_frame_id, sizeof(uint32_t));
  40:ROSSerial/std_msgs/Header.h ****       offset += 4;
  41:ROSSerial/std_msgs/Header.h ****       memcpy(outbuffer + offset, this->frame_id, length_frame_id);
  42:ROSSerial/std_msgs/Header.h ****       offset += length_frame_id;
  43:ROSSerial/std_msgs/Header.h ****       return offset;
  44:ROSSerial/std_msgs/Header.h ****     }
  45:ROSSerial/std_msgs/Header.h **** 
  46:ROSSerial/std_msgs/Header.h ****     virtual int deserialize(unsigned char *inbuffer)
  28              		.loc 1 46 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34 0000 30B4     		push	{r4, r5}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 4, -8
  38              		.cfi_offset 5, -4
  39              	.LVL1:
  47:ROSSerial/std_msgs/Header.h ****     {
  48:ROSSerial/std_msgs/Header.h ****       int offset = 0;
  49:ROSSerial/std_msgs/Header.h ****       this->seq =  ((uint32_t) (*(inbuffer + offset)));
  40              		.loc 1 49 0
  41 0002 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
  42 0004 4360     		str	r3, [r0, #4]
  50:ROSSerial/std_msgs/Header.h ****       this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  43              		.loc 1 50 0
  44 0006 4A78     		ldrb	r2, [r1, #1]	@ zero_extendqisi2
  45 0008 43EA0223 		orr	r3, r3, r2, lsl #8
  46 000c 4360     		str	r3, [r0, #4]
  51:ROSSerial/std_msgs/Header.h ****       this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  47              		.loc 1 51 0
  48 000e 8A78     		ldrb	r2, [r1, #2]	@ zero_extendqisi2
  49 0010 43EA0243 		orr	r3, r3, r2, lsl #16
  50 0014 4360     		str	r3, [r0, #4]
  52:ROSSerial/std_msgs/Header.h ****       this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  51              		.loc 1 52 0
  52 0016 CA78     		ldrb	r2, [r1, #3]	@ zero_extendqisi2
  53 0018 43EA0263 		orr	r3, r3, r2, lsl #24
  54 001c 4360     		str	r3, [r0, #4]
  55              	.LVL2:
  53:ROSSerial/std_msgs/Header.h ****       offset += sizeof(this->seq);
  54:ROSSerial/std_msgs/Header.h ****       this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
  56              		.loc 1 54 0
  57 001e 0B79     		ldrb	r3, [r1, #4]	@ zero_extendqisi2
  58 0020 8360     		str	r3, [r0, #8]
  55:ROSSerial/std_msgs/Header.h ****       this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  59              		.loc 1 55 0
  60 0022 4A79     		ldrb	r2, [r1, #5]	@ zero_extendqisi2
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 3


  61 0024 43EA0223 		orr	r3, r3, r2, lsl #8
  62 0028 8360     		str	r3, [r0, #8]
  56:ROSSerial/std_msgs/Header.h ****       this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  63              		.loc 1 56 0
  64 002a 8A79     		ldrb	r2, [r1, #6]	@ zero_extendqisi2
  65 002c 43EA0243 		orr	r3, r3, r2, lsl #16
  66 0030 8360     		str	r3, [r0, #8]
  57:ROSSerial/std_msgs/Header.h ****       this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  67              		.loc 1 57 0
  68 0032 CA79     		ldrb	r2, [r1, #7]	@ zero_extendqisi2
  69 0034 43EA0263 		orr	r3, r3, r2, lsl #24
  70 0038 8360     		str	r3, [r0, #8]
  71              	.LVL3:
  58:ROSSerial/std_msgs/Header.h ****       offset += sizeof(this->stamp.sec);
  59:ROSSerial/std_msgs/Header.h ****       this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
  72              		.loc 1 59 0
  73 003a 0B7A     		ldrb	r3, [r1, #8]	@ zero_extendqisi2
  74 003c C360     		str	r3, [r0, #12]
  60:ROSSerial/std_msgs/Header.h ****       this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  75              		.loc 1 60 0
  76 003e 4A7A     		ldrb	r2, [r1, #9]	@ zero_extendqisi2
  77 0040 43EA0223 		orr	r3, r3, r2, lsl #8
  78 0044 C360     		str	r3, [r0, #12]
  61:ROSSerial/std_msgs/Header.h ****       this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  79              		.loc 1 61 0
  80 0046 8A7A     		ldrb	r2, [r1, #10]	@ zero_extendqisi2
  81 0048 43EA0243 		orr	r3, r3, r2, lsl #16
  82 004c C360     		str	r3, [r0, #12]
  62:ROSSerial/std_msgs/Header.h ****       this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  83              		.loc 1 62 0
  84 004e CA7A     		ldrb	r2, [r1, #11]	@ zero_extendqisi2
  85 0050 43EA0263 		orr	r3, r3, r2, lsl #24
  86 0054 C360     		str	r3, [r0, #12]
  87              	.LVL4:
  63:ROSSerial/std_msgs/Header.h ****       offset += sizeof(this->stamp.nsec);
  64:ROSSerial/std_msgs/Header.h ****       uint32_t length_frame_id;
  65:ROSSerial/std_msgs/Header.h ****       memcpy(&length_frame_id, (inbuffer + offset), sizeof(uint32_t));
  88              		.loc 1 65 0
  89 0056 CD68     		ldr	r5, [r1, #12]	@ unaligned
  90              	.LVL5:
  91              	.LBB62:
  66:ROSSerial/std_msgs/Header.h ****       offset += 4;
  67:ROSSerial/std_msgs/Header.h ****       for(unsigned int k= offset; k< offset+length_frame_id; ++k){
  92              		.loc 1 67 0
  93 0058 1023     		movs	r3, #16
  94              	.LVL6:
  95              	.L3:
  96              		.loc 1 67 0 is_stmt 0 discriminator 3
  97 005a 05F11002 		add	r2, r5, #16
  98 005e 9A42     		cmp	r2, r3
  99 0060 04D9     		bls	.L2
  68:ROSSerial/std_msgs/Header.h ****           inbuffer[k-1]=inbuffer[k];
 100              		.loc 1 68 0 is_stmt 1 discriminator 2
 101 0062 5A1E     		subs	r2, r3, #1
 102 0064 CC5C     		ldrb	r4, [r1, r3]	@ zero_extendqisi2
 103 0066 8C54     		strb	r4, [r1, r2]
  67:ROSSerial/std_msgs/Header.h ****           inbuffer[k-1]=inbuffer[k];
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 4


 104              		.loc 1 67 0 discriminator 2
 105 0068 0133     		adds	r3, r3, #1
 106              	.LVL7:
 107 006a F6E7     		b	.L3
 108              	.L2:
 109              	.LBE62:
  69:ROSSerial/std_msgs/Header.h ****       }
  70:ROSSerial/std_msgs/Header.h ****       inbuffer[offset+length_frame_id-1]=0;
 110              		.loc 1 70 0
 111 006c 0F35     		adds	r5, r5, #15
 112              	.LVL8:
 113 006e 0023     		movs	r3, #0
 114              	.LVL9:
 115 0070 4B55     		strb	r3, [r1, r5]
  71:ROSSerial/std_msgs/Header.h ****       this->frame_id = (char *)(inbuffer + offset-1);
 116              		.loc 1 71 0
 117 0072 0F31     		adds	r1, r1, #15
 118              	.LVL10:
 119 0074 0161     		str	r1, [r0, #16]
 120              	.LVL11:
  72:ROSSerial/std_msgs/Header.h ****       offset += length_frame_id;
  73:ROSSerial/std_msgs/Header.h ****      return offset;
  74:ROSSerial/std_msgs/Header.h ****     }
 121              		.loc 1 74 0
 122 0076 1046     		mov	r0, r2
 123              	.LVL12:
 124 0078 30BC     		pop	{r4, r5}
 125              	.LCFI1:
 126              		.cfi_restore 5
 127              		.cfi_restore 4
 128              		.cfi_def_cfa_offset 0
 129 007a 7047     		bx	lr
 130              		.cfi_endproc
 131              	.LFE475:
 132              		.cantunwind
 133              		.fnend
 135              		.section	.text._ZN8std_msgs6Header7getTypeEv,"axG",%progbits,_ZN8std_msgs6Header7getTypeEv,comdat
 136              		.align	1
 137              		.weak	_ZN8std_msgs6Header7getTypeEv
 138              		.syntax unified
 139              		.thumb
 140              		.thumb_func
 141              		.fpu fpv4-sp-d16
 143              	_ZN8std_msgs6Header7getTypeEv:
 144              		.fnstart
 145              	.LFB476:
  75:ROSSerial/std_msgs/Header.h **** 
  76:ROSSerial/std_msgs/Header.h ****     const char * getType(){ return "std_msgs/Header"; };
 146              		.loc 1 76 0
 147              		.cfi_startproc
 148              		@ args = 0, pretend = 0, frame = 0
 149              		@ frame_needed = 0, uses_anonymous_args = 0
 150              		@ link register save eliminated.
 151              	.LVL13:
 152              		.loc 1 76 0
 153 0000 0048     		ldr	r0, .L6
 154              	.LVL14:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 5


 155 0002 7047     		bx	lr
 156              	.L7:
 157              		.align	2
 158              	.L6:
 159 0004 00000000 		.word	.LC0
 160              		.cfi_endproc
 161              	.LFE476:
 162              		.cantunwind
 163              		.fnend
 165              		.section	.text._ZN8std_msgs6Header6getMD5Ev,"axG",%progbits,_ZN8std_msgs6Header6getMD5Ev,comdat
 166              		.align	1
 167              		.weak	_ZN8std_msgs6Header6getMD5Ev
 168              		.syntax unified
 169              		.thumb
 170              		.thumb_func
 171              		.fpu fpv4-sp-d16
 173              	_ZN8std_msgs6Header6getMD5Ev:
 174              		.fnstart
 175              	.LFB477:
  77:ROSSerial/std_msgs/Header.h ****     const char * getMD5(){ return "2176decaecbce78abc3b96ef049fabed"; };
 176              		.loc 1 77 0
 177              		.cfi_startproc
 178              		@ args = 0, pretend = 0, frame = 0
 179              		@ frame_needed = 0, uses_anonymous_args = 0
 180              		@ link register save eliminated.
 181              	.LVL15:
 182              		.loc 1 77 0
 183 0000 0048     		ldr	r0, .L9
 184              	.LVL16:
 185 0002 7047     		bx	lr
 186              	.L10:
 187              		.align	2
 188              	.L9:
 189 0004 00000000 		.word	.LC1
 190              		.cfi_endproc
 191              	.LFE477:
 192              		.cantunwind
 193              		.fnend
 195              		.section	.text._ZN11sensor_msgs10JointState7getTypeEv,"axG",%progbits,_ZN11sensor_msgs10JointState
 196              		.align	1
 197              		.weak	_ZN11sensor_msgs10JointState7getTypeEv
 198              		.syntax unified
 199              		.thumb
 200              		.thumb_func
 201              		.fpu fpv4-sp-d16
 203              	_ZN11sensor_msgs10JointState7getTypeEv:
 204              		.fnstart
 205              	.LFB489:
 206              		.file 2 "ROSSerial/sensor_msgs/JointState.h"
   1:ROSSerial/sensor_msgs/JointState.h **** #ifndef _ROS_sensor_msgs_JointState_h
   2:ROSSerial/sensor_msgs/JointState.h **** #define _ROS_sensor_msgs_JointState_h
   3:ROSSerial/sensor_msgs/JointState.h **** 
   4:ROSSerial/sensor_msgs/JointState.h **** #include <stdint.h>
   5:ROSSerial/sensor_msgs/JointState.h **** #include <string.h>
   6:ROSSerial/sensor_msgs/JointState.h **** #include <stdlib.h>
   7:ROSSerial/sensor_msgs/JointState.h **** #include "ros/msg.h"
   8:ROSSerial/sensor_msgs/JointState.h **** #include "std_msgs/Header.h"
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 6


   9:ROSSerial/sensor_msgs/JointState.h **** 
  10:ROSSerial/sensor_msgs/JointState.h **** namespace sensor_msgs
  11:ROSSerial/sensor_msgs/JointState.h **** {
  12:ROSSerial/sensor_msgs/JointState.h **** 
  13:ROSSerial/sensor_msgs/JointState.h ****   class JointState : public ros::Msg
  14:ROSSerial/sensor_msgs/JointState.h ****   {
  15:ROSSerial/sensor_msgs/JointState.h ****     public:
  16:ROSSerial/sensor_msgs/JointState.h ****       typedef std_msgs::Header _header_type;
  17:ROSSerial/sensor_msgs/JointState.h ****       _header_type header;
  18:ROSSerial/sensor_msgs/JointState.h ****       uint32_t name_length;
  19:ROSSerial/sensor_msgs/JointState.h ****       typedef char* _name_type;
  20:ROSSerial/sensor_msgs/JointState.h ****       _name_type st_name;
  21:ROSSerial/sensor_msgs/JointState.h ****       _name_type * name;
  22:ROSSerial/sensor_msgs/JointState.h ****       uint32_t position_length;
  23:ROSSerial/sensor_msgs/JointState.h ****       typedef float _position_type;
  24:ROSSerial/sensor_msgs/JointState.h ****       _position_type st_position;
  25:ROSSerial/sensor_msgs/JointState.h ****       _position_type * position;
  26:ROSSerial/sensor_msgs/JointState.h ****       uint32_t velocity_length;
  27:ROSSerial/sensor_msgs/JointState.h ****       typedef float _velocity_type;
  28:ROSSerial/sensor_msgs/JointState.h ****       _velocity_type st_velocity;
  29:ROSSerial/sensor_msgs/JointState.h ****       _velocity_type * velocity;
  30:ROSSerial/sensor_msgs/JointState.h ****       uint32_t effort_length;
  31:ROSSerial/sensor_msgs/JointState.h ****       typedef float _effort_type;
  32:ROSSerial/sensor_msgs/JointState.h ****       _effort_type st_effort;
  33:ROSSerial/sensor_msgs/JointState.h ****       _effort_type * effort;
  34:ROSSerial/sensor_msgs/JointState.h **** 
  35:ROSSerial/sensor_msgs/JointState.h ****     JointState():
  36:ROSSerial/sensor_msgs/JointState.h ****       header(),
  37:ROSSerial/sensor_msgs/JointState.h ****       name_length(0), name(NULL),
  38:ROSSerial/sensor_msgs/JointState.h ****       position_length(0), position(NULL),
  39:ROSSerial/sensor_msgs/JointState.h ****       velocity_length(0), velocity(NULL),
  40:ROSSerial/sensor_msgs/JointState.h ****       effort_length(0), effort(NULL)
  41:ROSSerial/sensor_msgs/JointState.h ****     {
  42:ROSSerial/sensor_msgs/JointState.h ****     }
  43:ROSSerial/sensor_msgs/JointState.h **** 
  44:ROSSerial/sensor_msgs/JointState.h ****     virtual int serialize(unsigned char *outbuffer) const
  45:ROSSerial/sensor_msgs/JointState.h ****     {
  46:ROSSerial/sensor_msgs/JointState.h ****       int offset = 0;
  47:ROSSerial/sensor_msgs/JointState.h ****       offset += this->header.serialize(outbuffer + offset);
  48:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 0) = (this->name_length >> (8 * 0)) & 0xFF;
  49:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 1) = (this->name_length >> (8 * 1)) & 0xFF;
  50:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 2) = (this->name_length >> (8 * 2)) & 0xFF;
  51:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 3) = (this->name_length >> (8 * 3)) & 0xFF;
  52:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->name_length);
  53:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < name_length; i++){
  54:ROSSerial/sensor_msgs/JointState.h ****       uint32_t length_namei = strlen(this->name[i]);
  55:ROSSerial/sensor_msgs/JointState.h ****       varToArr(outbuffer + offset, length_namei);
  56:ROSSerial/sensor_msgs/JointState.h ****       offset += 4;
  57:ROSSerial/sensor_msgs/JointState.h ****       memcpy(outbuffer + offset, this->name[i], length_namei);
  58:ROSSerial/sensor_msgs/JointState.h ****       offset += length_namei;
  59:ROSSerial/sensor_msgs/JointState.h ****       }
  60:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 0) = (this->position_length >> (8 * 0)) & 0xFF;
  61:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 1) = (this->position_length >> (8 * 1)) & 0xFF;
  62:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 2) = (this->position_length >> (8 * 2)) & 0xFF;
  63:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 3) = (this->position_length >> (8 * 3)) & 0xFF;
  64:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->position_length);
  65:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < position_length; i++){
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 7


  66:ROSSerial/sensor_msgs/JointState.h ****       offset += serializeAvrFloat64(outbuffer + offset, this->position[i]);
  67:ROSSerial/sensor_msgs/JointState.h ****       }
  68:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 0) = (this->velocity_length >> (8 * 0)) & 0xFF;
  69:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 1) = (this->velocity_length >> (8 * 1)) & 0xFF;
  70:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 2) = (this->velocity_length >> (8 * 2)) & 0xFF;
  71:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 3) = (this->velocity_length >> (8 * 3)) & 0xFF;
  72:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->velocity_length);
  73:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < velocity_length; i++){
  74:ROSSerial/sensor_msgs/JointState.h ****       offset += serializeAvrFloat64(outbuffer + offset, this->velocity[i]);
  75:ROSSerial/sensor_msgs/JointState.h ****       }
  76:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 0) = (this->effort_length >> (8 * 0)) & 0xFF;
  77:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 1) = (this->effort_length >> (8 * 1)) & 0xFF;
  78:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 2) = (this->effort_length >> (8 * 2)) & 0xFF;
  79:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 3) = (this->effort_length >> (8 * 3)) & 0xFF;
  80:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->effort_length);
  81:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < effort_length; i++){
  82:ROSSerial/sensor_msgs/JointState.h ****       offset += serializeAvrFloat64(outbuffer + offset, this->effort[i]);
  83:ROSSerial/sensor_msgs/JointState.h ****       }
  84:ROSSerial/sensor_msgs/JointState.h ****       return offset;
  85:ROSSerial/sensor_msgs/JointState.h ****     }
  86:ROSSerial/sensor_msgs/JointState.h **** 
  87:ROSSerial/sensor_msgs/JointState.h ****     virtual int deserialize(unsigned char *inbuffer)
  88:ROSSerial/sensor_msgs/JointState.h ****     {
  89:ROSSerial/sensor_msgs/JointState.h ****       int offset = 0;
  90:ROSSerial/sensor_msgs/JointState.h ****       offset += this->header.deserialize(inbuffer + offset);
  91:ROSSerial/sensor_msgs/JointState.h ****       uint32_t name_lengthT = ((uint32_t) (*(inbuffer + offset))); 
  92:ROSSerial/sensor_msgs/JointState.h ****       name_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
  93:ROSSerial/sensor_msgs/JointState.h ****       name_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
  94:ROSSerial/sensor_msgs/JointState.h ****       name_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
  95:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->name_length);
  96:ROSSerial/sensor_msgs/JointState.h ****       if(name_lengthT > name_length)
  97:ROSSerial/sensor_msgs/JointState.h ****         this->name = (char**)realloc(this->name, name_lengthT * sizeof(char*));
  98:ROSSerial/sensor_msgs/JointState.h ****       name_length = name_lengthT;
  99:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < name_length; i++){
 100:ROSSerial/sensor_msgs/JointState.h ****       uint32_t length_st_name;
 101:ROSSerial/sensor_msgs/JointState.h ****       arrToVar(length_st_name, (inbuffer + offset));
 102:ROSSerial/sensor_msgs/JointState.h ****       offset += 4;
 103:ROSSerial/sensor_msgs/JointState.h ****       for(unsigned int k= offset; k< offset+length_st_name; ++k){
 104:ROSSerial/sensor_msgs/JointState.h ****           inbuffer[k-1]=inbuffer[k];
 105:ROSSerial/sensor_msgs/JointState.h ****       }
 106:ROSSerial/sensor_msgs/JointState.h ****       inbuffer[offset+length_st_name-1]=0;
 107:ROSSerial/sensor_msgs/JointState.h ****       this->st_name = (char *)(inbuffer + offset-1);
 108:ROSSerial/sensor_msgs/JointState.h ****       offset += length_st_name;
 109:ROSSerial/sensor_msgs/JointState.h ****         memcpy( &(this->name[i]), &(this->st_name), sizeof(char*));
 110:ROSSerial/sensor_msgs/JointState.h ****       }
 111:ROSSerial/sensor_msgs/JointState.h ****       uint32_t position_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 112:ROSSerial/sensor_msgs/JointState.h ****       position_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 113:ROSSerial/sensor_msgs/JointState.h ****       position_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 114:ROSSerial/sensor_msgs/JointState.h ****       position_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 115:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->position_length);
 116:ROSSerial/sensor_msgs/JointState.h ****       if(position_lengthT > position_length)
 117:ROSSerial/sensor_msgs/JointState.h ****         this->position = (float*)realloc(this->position, position_lengthT * sizeof(float));
 118:ROSSerial/sensor_msgs/JointState.h ****       position_length = position_lengthT;
 119:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < position_length; i++){
 120:ROSSerial/sensor_msgs/JointState.h ****       offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_position));
 121:ROSSerial/sensor_msgs/JointState.h ****         memcpy( &(this->position[i]), &(this->st_position), sizeof(float));
 122:ROSSerial/sensor_msgs/JointState.h ****       }
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 8


 123:ROSSerial/sensor_msgs/JointState.h ****       uint32_t velocity_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 124:ROSSerial/sensor_msgs/JointState.h ****       velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 125:ROSSerial/sensor_msgs/JointState.h ****       velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 126:ROSSerial/sensor_msgs/JointState.h ****       velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 127:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->velocity_length);
 128:ROSSerial/sensor_msgs/JointState.h ****       if(velocity_lengthT > velocity_length)
 129:ROSSerial/sensor_msgs/JointState.h ****         this->velocity = (float*)realloc(this->velocity, velocity_lengthT * sizeof(float));
 130:ROSSerial/sensor_msgs/JointState.h ****       velocity_length = velocity_lengthT;
 131:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < velocity_length; i++){
 132:ROSSerial/sensor_msgs/JointState.h ****       offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_velocity));
 133:ROSSerial/sensor_msgs/JointState.h ****         memcpy( &(this->velocity[i]), &(this->st_velocity), sizeof(float));
 134:ROSSerial/sensor_msgs/JointState.h ****       }
 135:ROSSerial/sensor_msgs/JointState.h ****       uint32_t effort_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 136:ROSSerial/sensor_msgs/JointState.h ****       effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 137:ROSSerial/sensor_msgs/JointState.h ****       effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 138:ROSSerial/sensor_msgs/JointState.h ****       effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 139:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->effort_length);
 140:ROSSerial/sensor_msgs/JointState.h ****       if(effort_lengthT > effort_length)
 141:ROSSerial/sensor_msgs/JointState.h ****         this->effort = (float*)realloc(this->effort, effort_lengthT * sizeof(float));
 142:ROSSerial/sensor_msgs/JointState.h ****       effort_length = effort_lengthT;
 143:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < effort_length; i++){
 144:ROSSerial/sensor_msgs/JointState.h ****       offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_effort));
 145:ROSSerial/sensor_msgs/JointState.h ****         memcpy( &(this->effort[i]), &(this->st_effort), sizeof(float));
 146:ROSSerial/sensor_msgs/JointState.h ****       }
 147:ROSSerial/sensor_msgs/JointState.h ****      return offset;
 148:ROSSerial/sensor_msgs/JointState.h ****     }
 149:ROSSerial/sensor_msgs/JointState.h **** 
 150:ROSSerial/sensor_msgs/JointState.h ****     const char * getType(){ return "sensor_msgs/JointState"; };
 207              		.loc 2 150 0
 208              		.cfi_startproc
 209              		@ args = 0, pretend = 0, frame = 0
 210              		@ frame_needed = 0, uses_anonymous_args = 0
 211              		@ link register save eliminated.
 212              	.LVL17:
 213              		.loc 2 150 0
 214 0000 0048     		ldr	r0, .L12
 215              	.LVL18:
 216 0002 7047     		bx	lr
 217              	.L13:
 218              		.align	2
 219              	.L12:
 220 0004 00000000 		.word	.LC2
 221              		.cfi_endproc
 222              	.LFE489:
 223              		.cantunwind
 224              		.fnend
 226              		.section	.text._ZN11sensor_msgs10JointState6getMD5Ev,"axG",%progbits,_ZN11sensor_msgs10JointState6
 227              		.align	1
 228              		.weak	_ZN11sensor_msgs10JointState6getMD5Ev
 229              		.syntax unified
 230              		.thumb
 231              		.thumb_func
 232              		.fpu fpv4-sp-d16
 234              	_ZN11sensor_msgs10JointState6getMD5Ev:
 235              		.fnstart
 236              	.LFB490:
 151:ROSSerial/sensor_msgs/JointState.h ****     const char * getMD5(){ return "3066dcd76a6cfaef579bd0f34173e9fd"; };
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 9


 237              		.loc 2 151 0
 238              		.cfi_startproc
 239              		@ args = 0, pretend = 0, frame = 0
 240              		@ frame_needed = 0, uses_anonymous_args = 0
 241              		@ link register save eliminated.
 242              	.LVL19:
 243              		.loc 2 151 0
 244 0000 0048     		ldr	r0, .L15
 245              	.LVL20:
 246 0002 7047     		bx	lr
 247              	.L16:
 248              		.align	2
 249              	.L15:
 250 0004 00000000 		.word	.LC3
 251              		.cfi_endproc
 252              	.LFE490:
 253              		.cantunwind
 254              		.fnend
 256              		.section	.text._Z41__static_initialization_and_destruction_0ii,"ax",%progbits
 257              		.align	1
 258              		.syntax unified
 259              		.thumb
 260              		.thumb_func
 261              		.fpu fpv4-sp-d16
 263              	_Z41__static_initialization_and_destruction_0ii:
 264              		.fnstart
 265              	.LFB497:
 266              		.file 3 "./Src/ROS_subscribe.cpp"
   1:./Src/ROS_subscribe.cpp **** /*
   2:./Src/ROS_subscribe.cpp ****  * ros_subscribe.cpp
   3:./Src/ROS_subscribe.cpp ****  *
   4:./Src/ROS_subscribe.cpp ****  *  Created on: Mar 18, 2019
   5:./Src/ROS_subscribe.cpp ****  *      Author: Shirish Jamthe
   6:./Src/ROS_subscribe.cpp ****  * to test publish use following
   7:./Src/ROS_subscribe.cpp ****  * $ rostopic pub /wheels_cmd sensor_msgs/JointState "{name:['LEFT','RIGHT'], position:[10,10],velo
   8:./Src/ROS_subscribe.cpp ****  */
   9:./Src/ROS_subscribe.cpp **** 
  10:./Src/ROS_subscribe.cpp **** #include "ROS_subscribe.h"
  11:./Src/ROS_subscribe.cpp **** #include "pid.h"
  12:./Src/ROS_subscribe.cpp **** #include "flashcontent.h"
  13:./Src/ROS_subscribe.cpp **** 
  14:./Src/ROS_subscribe.cpp **** #define SAFETY_MS 2000
  15:./Src/ROS_subscribe.cpp **** const int position_pwms[2] = {50,55};
  16:./Src/ROS_subscribe.cpp **** 
  17:./Src/ROS_subscribe.cpp **** extern "C" 
  18:./Src/ROS_subscribe.cpp **** {
  19:./Src/ROS_subscribe.cpp **** 	void wheels_pwm_set(void);
  20:./Src/ROS_subscribe.cpp **** }
  21:./Src/ROS_subscribe.cpp **** 
  22:./Src/ROS_subscribe.cpp **** static sensor_msgs::JointState wheelPositions;
  23:./Src/ROS_subscribe.cpp **** uint32_t wheelInputAt; //MS at which we received the input callback
  24:./Src/ROS_subscribe.cpp **** 
  25:./Src/ROS_subscribe.cpp **** extern int pwms[2];
  26:./Src/ROS_subscribe.cpp **** extern pid_controller  PositionPid[2];
  27:./Src/ROS_subscribe.cpp **** extern PID_FLOATS PositionPidFloats[2];
  28:./Src/ROS_subscribe.cpp **** extern pid_controller  SpeedPid[2];
  29:./Src/ROS_subscribe.cpp **** extern PID_FLOATS SpeedPidFloats[2];
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 10


  30:./Src/ROS_subscribe.cpp **** 
  31:./Src/ROS_subscribe.cpp **** extern volatile WHEEL_POSN_STRUCT wheel_posn[2];
  32:./Src/ROS_subscribe.cpp **** 
  33:./Src/ROS_subscribe.cpp **** long ticksTarget[2] = {0,0}; //ticks target set by ROS
  34:./Src/ROS_subscribe.cpp **** float rpmTarget[2] = {0,0}; //velocity/rpm target set by ROS
  35:./Src/ROS_subscribe.cpp **** int motionDirection[2]; //Were we asked to move forward or back?
  36:./Src/ROS_subscribe.cpp **** 
  37:./Src/ROS_subscribe.cpp **** void wheels_cmd_cb(unsigned char* msg)
  38:./Src/ROS_subscribe.cpp **** {
  39:./Src/ROS_subscribe.cpp **** 	wheelInputAt = HAL_GetTick();
  40:./Src/ROS_subscribe.cpp **** 	wheelPositions.deserialize(msg); 
  41:./Src/ROS_subscribe.cpp ****   for (int i=0; i < wheelPositions.name_length && i<2; i++)
  42:./Src/ROS_subscribe.cpp ****   {
  43:./Src/ROS_subscribe.cpp ****     ticksTarget[i] = long(wheelPositions.position[i]) + wheel_posn[i].ticks; 
  44:./Src/ROS_subscribe.cpp ****     //
  45:./Src/ROS_subscribe.cpp ****     if(ticksTarget[i]*wheel_posn[i].direction >= wheel_posn[i].ticks*wheel_posn[i].direction)
  46:./Src/ROS_subscribe.cpp ****     {
  47:./Src/ROS_subscribe.cpp ****       motionDirection[i] = 1*wheel_posn[i].direction;
  48:./Src/ROS_subscribe.cpp ****     }
  49:./Src/ROS_subscribe.cpp ****     else
  50:./Src/ROS_subscribe.cpp ****     {
  51:./Src/ROS_subscribe.cpp ****       motionDirection[i] = -1*wheel_posn[i].direction;
  52:./Src/ROS_subscribe.cpp ****     }
  53:./Src/ROS_subscribe.cpp ****     if(wheelPositions.position[i] != 0)
  54:./Src/ROS_subscribe.cpp ****     {
  55:./Src/ROS_subscribe.cpp ****       pid_reset(&PositionPid[i]); //we need to rest integral error for every new target
  56:./Src/ROS_subscribe.cpp ****     }
  57:./Src/ROS_subscribe.cpp ****     //reset speed only if we are not moving
  58:./Src/ROS_subscribe.cpp ****     if(wheel_posn[i].rpm != 0 && wheelPositions.velocity[i] != rpmTarget[i])
  59:./Src/ROS_subscribe.cpp ****     {
  60:./Src/ROS_subscribe.cpp ****       pid_reset(&SpeedPid[i]); 
  61:./Src/ROS_subscribe.cpp ****     }
  62:./Src/ROS_subscribe.cpp ****     rpmTarget[i] = wheelPositions.velocity[i]; //store old rpm target so we don't reset pid
  63:./Src/ROS_subscribe.cpp ****     //printf("%lu: wheels_cmd_cb tickTarget=%ld, dir=%d\n",wheelInputAt,ticksTarget[i],motionDirect
  64:./Src/ROS_subscribe.cpp ****   }
  65:./Src/ROS_subscribe.cpp **** }
  66:./Src/ROS_subscribe.cpp **** 
  67:./Src/ROS_subscribe.cpp **** void wheels_pwm_set()
  68:./Src/ROS_subscribe.cpp **** {
  69:./Src/ROS_subscribe.cpp ****   uint32_t now = HAL_GetTick();
  70:./Src/ROS_subscribe.cpp **** 
  71:./Src/ROS_subscribe.cpp ****   //safety stop if no new update in MS
  72:./Src/ROS_subscribe.cpp ****   if((now - wheelInputAt) > SAFETY_MS)
  73:./Src/ROS_subscribe.cpp ****   {
  74:./Src/ROS_subscribe.cpp ****     for (int i=0; i<2;i++)
  75:./Src/ROS_subscribe.cpp ****     {
  76:./Src/ROS_subscribe.cpp ****       if(pwms[i] != 0) {
  77:./Src/ROS_subscribe.cpp ****         printf("%lu:LIMIT reached. set speed to 0 , %lu, %lu for pwms[%d]=%d ticks=%ld\n",
  78:./Src/ROS_subscribe.cpp ****             now, wheelInputAt, (now - wheelInputAt), i, pwms[i], wheel_posn[i].ticks);
  79:./Src/ROS_subscribe.cpp ****       }
  80:./Src/ROS_subscribe.cpp ****       pwms[i] = 0; //emergency stop motor
  81:./Src/ROS_subscribe.cpp **** 	    wheelInputAt = 0; //reset clock;
  82:./Src/ROS_subscribe.cpp ****     }
  83:./Src/ROS_subscribe.cpp ****     return;
  84:./Src/ROS_subscribe.cpp ****   }
  85:./Src/ROS_subscribe.cpp ****   else if (wheelInputAt > 0) //set PWM based on input from ros
  86:./Src/ROS_subscribe.cpp ****   {
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 11


  87:./Src/ROS_subscribe.cpp ****     //check wheelPositions.name_length <= 2 for safety
  88:./Src/ROS_subscribe.cpp ****     for (int i=0;i < wheelPositions.name_length && i < 2; i++)
  89:./Src/ROS_subscribe.cpp ****     {
  90:./Src/ROS_subscribe.cpp ****       //If the current position exceed target (with right direction) then stop motor
  91:./Src/ROS_subscribe.cpp ****       if(wheelPositions.position[i] != 0 && 
  92:./Src/ROS_subscribe.cpp ****         ticksTarget[i]*motionDirection[i] <= wheel_posn[i].ticks*motionDirection[i])
  93:./Src/ROS_subscribe.cpp ****       {
  94:./Src/ROS_subscribe.cpp ****         // printf("%lu:Target[%d] met %ld <= %ld pwms=%d\n",now,i,
  95:./Src/ROS_subscribe.cpp ****         //       ticksTarget[i]*motionDirection[i],wheel_posn[i].ticks*motionDirection[i],pwms[i] )
  96:./Src/ROS_subscribe.cpp ****        
  97:./Src/ROS_subscribe.cpp ****         // We met or exceeded the target stop motor
  98:./Src/ROS_subscribe.cpp ****         pwms[i] = 0;
  99:./Src/ROS_subscribe.cpp ****       }
 100:./Src/ROS_subscribe.cpp ****       else if(wheelPositions.position[i] != 0)
 101:./Src/ROS_subscribe.cpp ****       {
 102:./Src/ROS_subscribe.cpp ****         if (pid_need_compute(&PositionPid[i])) {
 103:./Src/ROS_subscribe.cpp ****           // Read process feedback
 104:./Src/ROS_subscribe.cpp ****           PositionPidFloats[i].set = ticksTarget[i];
 105:./Src/ROS_subscribe.cpp ****           PositionPidFloats[i].in = wheel_posn[i].ticks;
 106:./Src/ROS_subscribe.cpp ****           // Compute new PID output value
 107:./Src/ROS_subscribe.cpp ****           pid_compute(&PositionPid[i]);
 108:./Src/ROS_subscribe.cpp ****           //Change actuator value
 109:./Src/ROS_subscribe.cpp ****           int pwm = PositionPidFloats[i].out;
 110:./Src/ROS_subscribe.cpp ****           pwm = CLAMP(pwm, -PWM_LIMIT, PWM_LIMIT);
 111:./Src/ROS_subscribe.cpp ****           pwms[i] = pwm*wheel_posn[i].direction; 
 112:./Src/ROS_subscribe.cpp **** 
 113:./Src/ROS_subscribe.cpp ****         }
 114:./Src/ROS_subscribe.cpp ****         // printf("%lu:Target[%d] set for %ld <= %ld, pwms=%d\n",now,i,
 115:./Src/ROS_subscribe.cpp ****         //       ticksTarget[i]*motionDirection[i],wheel_posn[i].ticks*motionDirection[i],pwms[i] )
 116:./Src/ROS_subscribe.cpp ****       }
 117:./Src/ROS_subscribe.cpp ****       // rpm velocity 
 118:./Src/ROS_subscribe.cpp ****       else if(wheelPositions.velocity[i] != 0 && wheelPositions.velocity[i] != wheel_posn[i].rpm)
 119:./Src/ROS_subscribe.cpp ****       {
 120:./Src/ROS_subscribe.cpp ****         if (pid_need_compute(&SpeedPid[i])) {
 121:./Src/ROS_subscribe.cpp ****           // Read process feedback
 122:./Src/ROS_subscribe.cpp ****           SpeedPidFloats[i].set = wheelPositions.velocity[i];
 123:./Src/ROS_subscribe.cpp ****           SpeedPidFloats[i].in = wheel_posn[i].rpm;
 124:./Src/ROS_subscribe.cpp ****           // Compute new PID output value
 125:./Src/ROS_subscribe.cpp ****           pid_compute(&SpeedPid[i]);
 126:./Src/ROS_subscribe.cpp ****           //Change actuator value
 127:./Src/ROS_subscribe.cpp ****           int pwm = SpeedPidFloats[i].out;
 128:./Src/ROS_subscribe.cpp ****           pwm = CLAMP(pwm, -PWM_LIMIT, PWM_LIMIT);
 129:./Src/ROS_subscribe.cpp ****           pwms[i] = pwm*wheel_posn[i].direction; 
 130:./Src/ROS_subscribe.cpp ****         }
 131:./Src/ROS_subscribe.cpp ****       }
 132:./Src/ROS_subscribe.cpp ****       //pwm can  be set directly
 133:./Src/ROS_subscribe.cpp ****       else if(wheelPositions.effort[i] != 0)
 134:./Src/ROS_subscribe.cpp ****       {
 135:./Src/ROS_subscribe.cpp ****         //Make sure we are withing prescribed limits
 136:./Src/ROS_subscribe.cpp ****         if(wheelPositions.effort[i] < 0)
 137:./Src/ROS_subscribe.cpp ****         {
 138:./Src/ROS_subscribe.cpp ****           pwms[i] = MAX(-PWM_LIMIT,int(wheelPositions.effort[i])); 
 139:./Src/ROS_subscribe.cpp ****         }
 140:./Src/ROS_subscribe.cpp ****         else
 141:./Src/ROS_subscribe.cpp ****         {
 142:./Src/ROS_subscribe.cpp ****           pwms[i] = MIN(PWM_LIMIT,int(wheelPositions.effort[i])); 
 143:./Src/ROS_subscribe.cpp ****         }
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 12


 144:./Src/ROS_subscribe.cpp ****         printf("%lu:New PWM set for pwms[%d]=%d\n",now,i,pwms[i]);
 145:./Src/ROS_subscribe.cpp ****       }     
 146:./Src/ROS_subscribe.cpp ****     } // end of for
 147:./Src/ROS_subscribe.cpp ****   } //end of if-else
 148:./Src/ROS_subscribe.cpp **** } //end of function
 149:./Src/ROS_subscribe.cpp **** 
 150:./Src/ROS_subscribe.cpp **** uint32_t rosSubscribeWheelsCmd(ros::NodeHandle *nh)
 151:./Src/ROS_subscribe.cpp **** {
 152:./Src/ROS_subscribe.cpp ****     ros::SubscriberType sub ;
 153:./Src/ROS_subscribe.cpp ****     const sensor_msgs::JointState msg;
 154:./Src/ROS_subscribe.cpp **** 	sub.topic_name = "wheels_cmd";
 155:./Src/ROS_subscribe.cpp **** 	sub.message_type = msg.getType();
 156:./Src/ROS_subscribe.cpp **** 	sub.md5sum = msg.getMD5();
 157:./Src/ROS_subscribe.cpp **** 	sub.callback = wheels_cmd_cb;
 158:./Src/ROS_subscribe.cpp **** 	
 159:./Src/ROS_subscribe.cpp **** 	nh->addSubscriber(sub);
 160:./Src/ROS_subscribe.cpp **** 	
 161:./Src/ROS_subscribe.cpp ****     return 1;
 162:./Src/ROS_subscribe.cpp **** }
 267              		.loc 3 162 0
 268              		.cfi_startproc
 269              		@ args = 0, pretend = 0, frame = 0
 270              		@ frame_needed = 0, uses_anonymous_args = 0
 271              		@ link register save eliminated.
 272              	.LVL21:
 273              		.loc 3 162 0
 274 0000 0128     		cmp	r0, #1
 275 0002 00D0     		beq	.L19
 276              	.LVL22:
 277              	.L17:
 278 0004 7047     		bx	lr
 279              	.LVL23:
 280              	.L19:
 281              		.loc 3 162 0 is_stmt 0 discriminator 1
 282 0006 4FF6FF73 		movw	r3, #65535
 283 000a 9942     		cmp	r1, r3
 284 000c FAD1     		bne	.L17
 285              	.LVL24:
 286              	.LBB63:
 287              	.LBB64:
 288              	.LBB65:
  40:ROSSerial/sensor_msgs/JointState.h ****     {
 289              		.loc 2 40 0 is_stmt 1
 290 000e 0A4B     		ldr	r3, .L20
 291 0010 1946     		mov	r1, r3
 292              	.LVL25:
 293 0012 0A4A     		ldr	r2, .L20+4
 294 0014 41F8082B 		str	r2, [r1], #8
 295 0018 0022     		movs	r2, #0
 296 001a 9A60     		str	r2, [r3, #8]
 297 001c CA60     		str	r2, [r1, #12]
 298              	.LVL26:
 299              	.LBB66:
 300              	.LBB67:
  13:ROSSerial/std_msgs/Header.h ****   {
 301              		.loc 1 13 0
 302 001e 0849     		ldr	r1, .L20+8
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 13


 303 0020 5960     		str	r1, [r3, #4]
 304              	.LVL27:
 305              	.LBB68:
 306              	.LBB69:
 307              	.LBB70:
 308              		.file 4 "ROSSerial/ros/time.h"
   1:ROSSerial/ros/time.h **** /*
   2:ROSSerial/ros/time.h ****  * Software License Agreement (BSD License)
   3:ROSSerial/ros/time.h ****  *
   4:ROSSerial/ros/time.h ****  * Copyright (c) 2011, Willow Garage, Inc.
   5:ROSSerial/ros/time.h ****  * All rights reserved.
   6:ROSSerial/ros/time.h ****  *
   7:ROSSerial/ros/time.h ****  * Redistribution and use in source and binary forms, with or without
   8:ROSSerial/ros/time.h ****  * modification, are permitted provided that the following conditions
   9:ROSSerial/ros/time.h ****  * are met:
  10:ROSSerial/ros/time.h ****  *
  11:ROSSerial/ros/time.h ****  *  * Redistributions of source code must retain the above copyright
  12:ROSSerial/ros/time.h ****  *    notice, this list of conditions and the following disclaimer.
  13:ROSSerial/ros/time.h ****  *  * Redistributions in binary form must reproduce the above
  14:ROSSerial/ros/time.h ****  *    copyright notice, this list of conditions and the following
  15:ROSSerial/ros/time.h ****  *    disclaimer in the documentation and/or other materials provided
  16:ROSSerial/ros/time.h ****  *    with the distribution.
  17:ROSSerial/ros/time.h ****  *  * Neither the name of Willow Garage, Inc. nor the names of its
  18:ROSSerial/ros/time.h ****  *    contributors may be used to endorse or promote prducts derived
  19:ROSSerial/ros/time.h ****  *    from this software without specific prior written permission.
  20:ROSSerial/ros/time.h ****  *
  21:ROSSerial/ros/time.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  22:ROSSerial/ros/time.h ****  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  23:ROSSerial/ros/time.h ****  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  24:ROSSerial/ros/time.h ****  * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
  25:ROSSerial/ros/time.h ****  * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  26:ROSSerial/ros/time.h ****  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  27:ROSSerial/ros/time.h ****  * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  28:ROSSerial/ros/time.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:ROSSerial/ros/time.h ****  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  30:ROSSerial/ros/time.h ****  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  31:ROSSerial/ros/time.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  32:ROSSerial/ros/time.h ****  * POSSIBILITY OF SUCH DAMAGE.
  33:ROSSerial/ros/time.h ****  */
  34:ROSSerial/ros/time.h **** 
  35:ROSSerial/ros/time.h **** #ifndef ROS_TIME_H_
  36:ROSSerial/ros/time.h **** #define ROS_TIME_H_
  37:ROSSerial/ros/time.h **** 
  38:ROSSerial/ros/time.h **** #include "ros/duration.h"
  39:ROSSerial/ros/time.h **** #include <math.h>
  40:ROSSerial/ros/time.h **** #include <stdint.h>
  41:ROSSerial/ros/time.h **** 
  42:ROSSerial/ros/time.h **** namespace ros
  43:ROSSerial/ros/time.h **** {
  44:ROSSerial/ros/time.h **** void normalizeSecNSec(uint32_t &sec, uint32_t &nsec);
  45:ROSSerial/ros/time.h **** 
  46:ROSSerial/ros/time.h **** class Time
  47:ROSSerial/ros/time.h **** {
  48:ROSSerial/ros/time.h **** public:
  49:ROSSerial/ros/time.h ****   uint32_t sec, nsec;
  50:ROSSerial/ros/time.h **** 
  51:ROSSerial/ros/time.h ****   Time() : sec(0), nsec(0) {}
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 14


 309              		.loc 4 51 0
 310 0022 DA60     		str	r2, [r3, #12]
 311 0024 1A61     		str	r2, [r3, #16]
 312              	.LVL28:
 313              	.LBE70:
 314              	.LBE69:
 315              	.LBE68:
 316              	.LBE67:
 317              	.LBE66:
  40:ROSSerial/sensor_msgs/JointState.h ****     {
 318              		.loc 2 40 0
 319 0026 9A61     		str	r2, [r3, #24]
 320 0028 1A62     		str	r2, [r3, #32]
 321 002a 5A62     		str	r2, [r3, #36]
 322 002c DA62     		str	r2, [r3, #44]
 323 002e 1A63     		str	r2, [r3, #48]
 324 0030 9A63     		str	r2, [r3, #56]
 325 0032 DA63     		str	r2, [r3, #60]
 326 0034 5A64     		str	r2, [r3, #68]
 327              	.LBE65:
 328              	.LBE64:
 329              	.LBE63:
 330              		.loc 3 162 0
 331 0036 E5E7     		b	.L17
 332              	.L21:
 333              		.align	2
 334              	.L20:
 335 0038 00000000 		.word	.LANCHOR0
 336 003c 08000000 		.word	_ZTVN11sensor_msgs10JointStateE+8
 337 0040 08000000 		.word	_ZTVN8std_msgs6HeaderE+8
 338              		.cfi_endproc
 339              	.LFE497:
 340              		.cantunwind
 341              		.fnend
 343              		.section	.text._ZNK8std_msgs6Header9serializeEPh,"axG",%progbits,_ZNK8std_msgs6Header9serializeEPh
 344              		.align	1
 345              		.weak	_ZNK8std_msgs6Header9serializeEPh
 346              		.syntax unified
 347              		.thumb
 348              		.thumb_func
 349              		.fpu fpv4-sp-d16
 351              	_ZNK8std_msgs6Header9serializeEPh:
 352              		.fnstart
 353              	.LFB474:
  20:ROSSerial/std_msgs/Header.h ****     {
 354              		.loc 1 20 0
 355              		.cfi_startproc
 356              		@ args = 0, pretend = 0, frame = 0
 357              		@ frame_needed = 0, uses_anonymous_args = 0
 358              	.LVL29:
 359 0000 70B5     		push	{r4, r5, r6, lr}
 360              	.LCFI2:
 361              		.cfi_def_cfa_offset 16
 362              		.cfi_offset 4, -16
 363              		.cfi_offset 5, -12
 364              		.cfi_offset 6, -8
 365              		.cfi_offset 14, -4
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 15


 366 0002 0546     		mov	r5, r0
 367 0004 0C46     		mov	r4, r1
 368              	.LVL30:
  23:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 369              		.loc 1 23 0
 370 0006 4368     		ldr	r3, [r0, #4]
 371 0008 0B70     		strb	r3, [r1]
  24:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 372              		.loc 1 24 0
 373 000a 4368     		ldr	r3, [r0, #4]
 374 000c 1B0A     		lsrs	r3, r3, #8
 375 000e 4B70     		strb	r3, [r1, #1]
  25:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 376              		.loc 1 25 0
 377 0010 C388     		ldrh	r3, [r0, #6]
 378 0012 8B70     		strb	r3, [r1, #2]
  26:ROSSerial/std_msgs/Header.h ****       offset += sizeof(this->seq);
 379              		.loc 1 26 0
 380 0014 C379     		ldrb	r3, [r0, #7]	@ zero_extendqisi2
 381 0016 CB70     		strb	r3, [r1, #3]
 382              	.LVL31:
  28:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 383              		.loc 1 28 0
 384 0018 8368     		ldr	r3, [r0, #8]
 385 001a 0B71     		strb	r3, [r1, #4]
  29:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 386              		.loc 1 29 0
 387 001c 8368     		ldr	r3, [r0, #8]
 388 001e 1B0A     		lsrs	r3, r3, #8
 389 0020 4B71     		strb	r3, [r1, #5]
  30:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 390              		.loc 1 30 0
 391 0022 4389     		ldrh	r3, [r0, #10]
 392 0024 8B71     		strb	r3, [r1, #6]
  31:ROSSerial/std_msgs/Header.h ****       offset += sizeof(this->stamp.sec);
 393              		.loc 1 31 0
 394 0026 C37A     		ldrb	r3, [r0, #11]	@ zero_extendqisi2
 395 0028 CB71     		strb	r3, [r1, #7]
 396              	.LVL32:
  33:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 397              		.loc 1 33 0
 398 002a C368     		ldr	r3, [r0, #12]
 399 002c 0B72     		strb	r3, [r1, #8]
  34:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 400              		.loc 1 34 0
 401 002e C368     		ldr	r3, [r0, #12]
 402 0030 1B0A     		lsrs	r3, r3, #8
 403 0032 4B72     		strb	r3, [r1, #9]
  35:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 404              		.loc 1 35 0
 405 0034 C389     		ldrh	r3, [r0, #14]
 406 0036 8B72     		strb	r3, [r1, #10]
  36:ROSSerial/std_msgs/Header.h ****       offset += sizeof(this->stamp.nsec);
 407              		.loc 1 36 0
 408 0038 C37B     		ldrb	r3, [r0, #15]	@ zero_extendqisi2
 409 003a CB72     		strb	r3, [r1, #11]
 410              	.LVL33:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 16


  38:ROSSerial/std_msgs/Header.h ****       memcpy(outbuffer + offset, &length_frame_id, sizeof(uint32_t));
 411              		.loc 1 38 0
 412 003c 0069     		ldr	r0, [r0, #16]
 413              	.LVL34:
 414 003e FFF7FEFF 		bl	strlen
 415              	.LVL35:
 416 0042 0646     		mov	r6, r0
 417              	.LVL36:
  39:ROSSerial/std_msgs/Header.h ****       offset += 4;
 418              		.loc 1 39 0
 419 0044 E060     		str	r0, [r4, #12]	@ unaligned
 420              	.LVL37:
  41:ROSSerial/std_msgs/Header.h ****       offset += length_frame_id;
 421              		.loc 1 41 0
 422 0046 0246     		mov	r2, r0
 423 0048 2969     		ldr	r1, [r5, #16]
 424 004a 04F11000 		add	r0, r4, #16
 425              	.LVL38:
 426 004e FFF7FEFF 		bl	memcpy
 427              	.LVL39:
  44:ROSSerial/std_msgs/Header.h **** 
 428              		.loc 1 44 0
 429 0052 06F11000 		add	r0, r6, #16
 430              	.LVL40:
 431 0056 70BD     		pop	{r4, r5, r6, pc}
 432              		.cfi_endproc
 433              	.LFE474:
 434              		.cantunwind
 435              		.fnend
 437              		.section	.text._ZNK11sensor_msgs10JointState9serializeEPh,"axG",%progbits,_ZNK11sensor_msgs10Joint
 438              		.align	1
 439              		.weak	_ZNK11sensor_msgs10JointState9serializeEPh
 440              		.syntax unified
 441              		.thumb
 442              		.thumb_func
 443              		.fpu fpv4-sp-d16
 445              	_ZNK11sensor_msgs10JointState9serializeEPh:
 446              		.fnstart
 447              	.LFB487:
  44:ROSSerial/sensor_msgs/JointState.h ****     {
 448              		.loc 2 44 0
 449              		.cfi_startproc
 450              		@ args = 0, pretend = 0, frame = 0
 451              		@ frame_needed = 0, uses_anonymous_args = 0
 452              	.LVL41:
 453 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 454              	.LCFI3:
 455              		.cfi_def_cfa_offset 32
 456              		.cfi_offset 3, -32
 457              		.cfi_offset 4, -28
 458              		.cfi_offset 5, -24
 459              		.cfi_offset 6, -20
 460              		.cfi_offset 7, -16
 461              		.cfi_offset 8, -12
 462              		.cfi_offset 9, -8
 463              		.cfi_offset 14, -4
 464 0004 0646     		mov	r6, r0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 17


 465 0006 0D46     		mov	r5, r1
 466              	.LVL42:
 467              	.LBB86:
 468              	.LBB87:
  23:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 469              		.loc 1 23 0
 470 0008 8368     		ldr	r3, [r0, #8]
 471 000a 0B70     		strb	r3, [r1]
  24:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 472              		.loc 1 24 0
 473 000c 8368     		ldr	r3, [r0, #8]
 474 000e 1B0A     		lsrs	r3, r3, #8
 475 0010 4B70     		strb	r3, [r1, #1]
  25:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 476              		.loc 1 25 0
 477 0012 4389     		ldrh	r3, [r0, #10]
 478 0014 8B70     		strb	r3, [r1, #2]
  26:ROSSerial/std_msgs/Header.h ****       offset += sizeof(this->seq);
 479              		.loc 1 26 0
 480 0016 C37A     		ldrb	r3, [r0, #11]	@ zero_extendqisi2
 481 0018 CB70     		strb	r3, [r1, #3]
 482              	.LVL43:
  28:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 483              		.loc 1 28 0
 484 001a C368     		ldr	r3, [r0, #12]
 485 001c 0B71     		strb	r3, [r1, #4]
  29:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 486              		.loc 1 29 0
 487 001e C368     		ldr	r3, [r0, #12]
 488 0020 1B0A     		lsrs	r3, r3, #8
 489 0022 4B71     		strb	r3, [r1, #5]
  30:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 490              		.loc 1 30 0
 491 0024 C389     		ldrh	r3, [r0, #14]
 492 0026 8B71     		strb	r3, [r1, #6]
  31:ROSSerial/std_msgs/Header.h ****       offset += sizeof(this->stamp.sec);
 493              		.loc 1 31 0
 494 0028 C37B     		ldrb	r3, [r0, #15]	@ zero_extendqisi2
 495 002a CB71     		strb	r3, [r1, #7]
 496              	.LVL44:
  33:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 497              		.loc 1 33 0
 498 002c 0369     		ldr	r3, [r0, #16]
 499 002e 0B72     		strb	r3, [r1, #8]
  34:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 500              		.loc 1 34 0
 501 0030 0369     		ldr	r3, [r0, #16]
 502 0032 1B0A     		lsrs	r3, r3, #8
 503 0034 4B72     		strb	r3, [r1, #9]
  35:ROSSerial/std_msgs/Header.h ****       *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 504              		.loc 1 35 0
 505 0036 438A     		ldrh	r3, [r0, #18]
 506 0038 8B72     		strb	r3, [r1, #10]
  36:ROSSerial/std_msgs/Header.h ****       offset += sizeof(this->stamp.nsec);
 507              		.loc 1 36 0
 508 003a C37C     		ldrb	r3, [r0, #19]	@ zero_extendqisi2
 509 003c CB72     		strb	r3, [r1, #11]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 18


 510              	.LVL45:
  38:ROSSerial/std_msgs/Header.h ****       memcpy(outbuffer + offset, &length_frame_id, sizeof(uint32_t));
 511              		.loc 1 38 0
 512 003e 4069     		ldr	r0, [r0, #20]
 513              	.LVL46:
 514 0040 FFF7FEFF 		bl	strlen
 515              	.LVL47:
 516 0044 0446     		mov	r4, r0
 517              	.LVL48:
  39:ROSSerial/std_msgs/Header.h ****       offset += 4;
 518              		.loc 1 39 0
 519 0046 E860     		str	r0, [r5, #12]	@ unaligned
 520              	.LVL49:
  41:ROSSerial/std_msgs/Header.h ****       offset += length_frame_id;
 521              		.loc 1 41 0
 522 0048 0246     		mov	r2, r0
 523 004a 7169     		ldr	r1, [r6, #20]
 524 004c 05F11000 		add	r0, r5, #16
 525              	.LVL50:
 526 0050 FFF7FEFF 		bl	memcpy
 527              	.LVL51:
  42:ROSSerial/std_msgs/Header.h ****       return offset;
 528              		.loc 1 42 0
 529 0054 04F11003 		add	r3, r4, #16
 530              	.LVL52:
 531              	.LBE87:
 532              	.LBE86:
  48:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 1) = (this->name_length >> (8 * 1)) & 0xFF;
 533              		.loc 2 48 0
 534 0058 B269     		ldr	r2, [r6, #24]
 535 005a EA54     		strb	r2, [r5, r3]
  49:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 2) = (this->name_length >> (8 * 2)) & 0xFF;
 536              		.loc 2 49 0
 537 005c B369     		ldr	r3, [r6, #24]
 538 005e 1B0A     		lsrs	r3, r3, #8
 539 0060 04F11102 		add	r2, r4, #17
 540 0064 AB54     		strb	r3, [r5, r2]
  50:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 3) = (this->name_length >> (8 * 3)) & 0xFF;
 541              		.loc 2 50 0
 542 0066 728B     		ldrh	r2, [r6, #26]
 543 0068 04F11203 		add	r3, r4, #18
 544 006c EA54     		strb	r2, [r5, r3]
  51:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->name_length);
 545              		.loc 2 51 0
 546 006e F27E     		ldrb	r2, [r6, #27]	@ zero_extendqisi2
 547 0070 04F11303 		add	r3, r4, #19
 548 0074 EA54     		strb	r2, [r5, r3]
  52:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < name_length; i++){
 549              		.loc 2 52 0
 550 0076 1434     		adds	r4, r4, #20
 551              	.LVL53:
 552              	.LBB88:
  53:ROSSerial/sensor_msgs/JointState.h ****       uint32_t length_namei = strlen(this->name[i]);
 553              		.loc 2 53 0
 554 0078 4FF00008 		mov	r8, #0
 555 007c 0AE0     		b	.L28
 556              	.LVL54:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 19


 557              	.L26:
 558              	.LBB89:
  56:ROSSerial/sensor_msgs/JointState.h ****       memcpy(outbuffer + offset, this->name[i], length_namei);
 559              		.loc 2 56 0 discriminator 2
 560 007e 0434     		adds	r4, r4, #4
 561              	.LVL55:
  57:ROSSerial/sensor_msgs/JointState.h ****       offset += length_namei;
 562              		.loc 2 57 0 discriminator 2
 563 0080 336A     		ldr	r3, [r6, #32]
 564 0082 3A46     		mov	r2, r7
 565 0084 53F80910 		ldr	r1, [r3, r9]
 566 0088 2819     		adds	r0, r5, r4
 567 008a FFF7FEFF 		bl	memcpy
 568              	.LVL56:
  58:ROSSerial/sensor_msgs/JointState.h ****       }
 569              		.loc 2 58 0 discriminator 2
 570 008e 3C44     		add	r4, r4, r7
 571              	.LVL57:
 572              	.LBE89:
  53:ROSSerial/sensor_msgs/JointState.h ****       uint32_t length_namei = strlen(this->name[i]);
 573              		.loc 2 53 0 discriminator 2
 574 0090 08F10108 		add	r8, r8, #1
 575              	.LVL58:
 576              	.L28:
  53:ROSSerial/sensor_msgs/JointState.h ****       uint32_t length_namei = strlen(this->name[i]);
 577              		.loc 2 53 0 is_stmt 0 discriminator 3
 578 0094 B369     		ldr	r3, [r6, #24]
 579 0096 4345     		cmp	r3, r8
 580 0098 12D9     		bls	.L25
 581              	.LBB92:
  54:ROSSerial/sensor_msgs/JointState.h ****       varToArr(outbuffer + offset, length_namei);
 582              		.loc 2 54 0 is_stmt 1 discriminator 2
 583 009a 336A     		ldr	r3, [r6, #32]
 584 009c 4FEA8809 		lsl	r9, r8, #2
 585 00a0 53F82800 		ldr	r0, [r3, r8, lsl #2]
 586 00a4 FFF7FEFF 		bl	strlen
 587              	.LVL59:
 588 00a8 0746     		mov	r7, r0
 589              	.LVL60:
  55:ROSSerial/sensor_msgs/JointState.h ****       offset += 4;
 590              		.loc 2 55 0 discriminator 2
 591 00aa 2046     		mov	r0, r4
 592              	.LVL61:
 593              	.LBB90:
 594              	.LBB91:
 595              		.file 5 "ROSSerial/ros/msg.h"
   1:ROSSerial/ros/msg.h **** /*
   2:ROSSerial/ros/msg.h ****  * Software License Agreement (BSD License)
   3:ROSSerial/ros/msg.h ****  *
   4:ROSSerial/ros/msg.h ****  * Copyright (c) 2011, Willow Garage, Inc.
   5:ROSSerial/ros/msg.h ****  * All rights reserved.
   6:ROSSerial/ros/msg.h ****  *
   7:ROSSerial/ros/msg.h ****  * Redistribution and use in source and binary forms, with or without
   8:ROSSerial/ros/msg.h ****  * modification, are permitted provided that the following conditions
   9:ROSSerial/ros/msg.h ****  * are met:
  10:ROSSerial/ros/msg.h ****  *
  11:ROSSerial/ros/msg.h ****  *  * Redistributions of source code must retain the above copyright
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 20


  12:ROSSerial/ros/msg.h ****  *    notice, this list of conditions and the following disclaimer.
  13:ROSSerial/ros/msg.h ****  *  * Redistributions in binary form must reproduce the above
  14:ROSSerial/ros/msg.h ****  *    copyright notice, this list of conditions and the following
  15:ROSSerial/ros/msg.h ****  *    disclaimer in the documentation and/or other materials provided
  16:ROSSerial/ros/msg.h ****  *    with the distribution.
  17:ROSSerial/ros/msg.h ****  *  * Neither the name of Willow Garage, Inc. nor the names of its
  18:ROSSerial/ros/msg.h ****  *    contributors may be used to endorse or promote prducts derived
  19:ROSSerial/ros/msg.h ****  *    from this software without specific prior written permission.
  20:ROSSerial/ros/msg.h ****  *
  21:ROSSerial/ros/msg.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  22:ROSSerial/ros/msg.h ****  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  23:ROSSerial/ros/msg.h ****  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  24:ROSSerial/ros/msg.h ****  * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
  25:ROSSerial/ros/msg.h ****  * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  26:ROSSerial/ros/msg.h ****  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  27:ROSSerial/ros/msg.h ****  * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  28:ROSSerial/ros/msg.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:ROSSerial/ros/msg.h ****  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  30:ROSSerial/ros/msg.h ****  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  31:ROSSerial/ros/msg.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  32:ROSSerial/ros/msg.h ****  * POSSIBILITY OF SUCH DAMAGE.
  33:ROSSerial/ros/msg.h ****  */
  34:ROSSerial/ros/msg.h **** 
  35:ROSSerial/ros/msg.h **** #ifndef _ROS_MSG_H_
  36:ROSSerial/ros/msg.h **** #define _ROS_MSG_H_
  37:ROSSerial/ros/msg.h **** 
  38:ROSSerial/ros/msg.h **** #include <stdint.h>
  39:ROSSerial/ros/msg.h **** #include <stddef.h>
  40:ROSSerial/ros/msg.h **** 
  41:ROSSerial/ros/msg.h **** namespace ros
  42:ROSSerial/ros/msg.h **** {
  43:ROSSerial/ros/msg.h **** 
  44:ROSSerial/ros/msg.h **** /* Base Message Type */
  45:ROSSerial/ros/msg.h **** class Msg
  46:ROSSerial/ros/msg.h **** {
  47:ROSSerial/ros/msg.h **** public:
  48:ROSSerial/ros/msg.h ****   virtual int serialize(unsigned char *outbuffer) const = 0;
  49:ROSSerial/ros/msg.h ****   virtual int deserialize(unsigned char *data) = 0;
  50:ROSSerial/ros/msg.h ****   virtual const char * getType() = 0;
  51:ROSSerial/ros/msg.h ****   virtual const char * getMD5() = 0;
  52:ROSSerial/ros/msg.h **** 
  53:ROSSerial/ros/msg.h ****   /**
  54:ROSSerial/ros/msg.h ****    * @brief This tricky function handles promoting a 32bit float to a 64bit
  55:ROSSerial/ros/msg.h ****    *        double, so that AVR can publish messages containing float64
  56:ROSSerial/ros/msg.h ****    *        fields, despite AVV having no native support for double.
  57:ROSSerial/ros/msg.h ****    *
  58:ROSSerial/ros/msg.h ****    * @param[out] outbuffer pointer for buffer to serialize to.
  59:ROSSerial/ros/msg.h ****    * @param[in] f value to serialize.
  60:ROSSerial/ros/msg.h ****    *
  61:ROSSerial/ros/msg.h ****    * @return number of bytes to advance the buffer pointer.
  62:ROSSerial/ros/msg.h ****    *
  63:ROSSerial/ros/msg.h ****    */
  64:ROSSerial/ros/msg.h ****   static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
  65:ROSSerial/ros/msg.h ****   {
  66:ROSSerial/ros/msg.h ****     const int32_t* val = (int32_t*) &f;
  67:ROSSerial/ros/msg.h ****     int32_t exp = ((*val >> 23) & 255);
  68:ROSSerial/ros/msg.h ****     if (exp != 0)
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 21


  69:ROSSerial/ros/msg.h ****     {
  70:ROSSerial/ros/msg.h ****       exp += 1023 - 127;
  71:ROSSerial/ros/msg.h ****     }
  72:ROSSerial/ros/msg.h **** 
  73:ROSSerial/ros/msg.h ****     int32_t sig = *val;
  74:ROSSerial/ros/msg.h ****     *(outbuffer++) = 0;
  75:ROSSerial/ros/msg.h ****     *(outbuffer++) = 0;
  76:ROSSerial/ros/msg.h ****     *(outbuffer++) = 0;
  77:ROSSerial/ros/msg.h ****     *(outbuffer++) = (sig << 5) & 0xff;
  78:ROSSerial/ros/msg.h ****     *(outbuffer++) = (sig >> 3) & 0xff;
  79:ROSSerial/ros/msg.h ****     *(outbuffer++) = (sig >> 11) & 0xff;
  80:ROSSerial/ros/msg.h ****     *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
  81:ROSSerial/ros/msg.h ****     *(outbuffer++) = (exp >> 4) & 0x7F;
  82:ROSSerial/ros/msg.h **** 
  83:ROSSerial/ros/msg.h ****     // Mark negative bit as necessary.
  84:ROSSerial/ros/msg.h ****     if (f < 0)
  85:ROSSerial/ros/msg.h ****     {
  86:ROSSerial/ros/msg.h ****       *(outbuffer - 1) |= 0x80;
  87:ROSSerial/ros/msg.h ****     }
  88:ROSSerial/ros/msg.h **** 
  89:ROSSerial/ros/msg.h ****     return 8;
  90:ROSSerial/ros/msg.h ****   }
  91:ROSSerial/ros/msg.h **** 
  92:ROSSerial/ros/msg.h ****   /**
  93:ROSSerial/ros/msg.h ****    * @brief This tricky function handles demoting a 64bit double to a
  94:ROSSerial/ros/msg.h ****    *        32bit float, so that AVR can understand messages containing
  95:ROSSerial/ros/msg.h ****    *        float64 fields, despite AVR having no native support for double.
  96:ROSSerial/ros/msg.h ****    *
  97:ROSSerial/ros/msg.h ****    * @param[in] inbuffer pointer for buffer to deserialize from.
  98:ROSSerial/ros/msg.h ****    * @param[out] f pointer to place the deserialized value in.
  99:ROSSerial/ros/msg.h ****    *
 100:ROSSerial/ros/msg.h ****    * @return number of bytes to advance the buffer pointer.
 101:ROSSerial/ros/msg.h ****    */
 102:ROSSerial/ros/msg.h ****   static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 103:ROSSerial/ros/msg.h ****   {
 104:ROSSerial/ros/msg.h ****     uint32_t* val = (uint32_t*)f;
 105:ROSSerial/ros/msg.h ****     inbuffer += 3;
 106:ROSSerial/ros/msg.h **** 
 107:ROSSerial/ros/msg.h ****     // Copy truncated mantissa.
 108:ROSSerial/ros/msg.h ****     *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 109:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 110:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 111:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 112:ROSSerial/ros/msg.h **** 
 113:ROSSerial/ros/msg.h ****     // Copy truncated exponent.
 114:ROSSerial/ros/msg.h ****     uint32_t exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 115:ROSSerial/ros/msg.h ****     exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 116:ROSSerial/ros/msg.h ****     if (exp != 0)
 117:ROSSerial/ros/msg.h ****     {
 118:ROSSerial/ros/msg.h ****       *val |= ((exp) - 1023 + 127) << 23;
 119:ROSSerial/ros/msg.h ****     }
 120:ROSSerial/ros/msg.h **** 
 121:ROSSerial/ros/msg.h ****     // Copy negative sign.
 122:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 123:ROSSerial/ros/msg.h **** 
 124:ROSSerial/ros/msg.h ****     return 8;
 125:ROSSerial/ros/msg.h ****   }
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 22


 126:ROSSerial/ros/msg.h **** 
 127:ROSSerial/ros/msg.h ****   // Copy data from variable into a byte array
 128:ROSSerial/ros/msg.h ****   template<typename A, typename V>
 129:ROSSerial/ros/msg.h ****   static void varToArr(A arr, const V var)
 130:ROSSerial/ros/msg.h ****   {
 131:ROSSerial/ros/msg.h ****     for (size_t i = 0; i < sizeof(V); i++)
 596              		.loc 5 131 0 discriminator 2
 597 00ac 0023     		movs	r3, #0
 598              	.LVL62:
 599              	.L27:
 600              		.loc 5 131 0 is_stmt 0
 601 00ae 032B     		cmp	r3, #3
 602 00b0 E5D8     		bhi	.L26
 132:ROSSerial/ros/msg.h ****       arr[i] = (var >> (8 * i));
 603              		.loc 5 132 0 is_stmt 1
 604 00b2 DA00     		lsls	r2, r3, #3
 605 00b4 27FA02F2 		lsr	r2, r7, r2
 606 00b8 C118     		adds	r1, r0, r3
 607 00ba 6A54     		strb	r2, [r5, r1]
 131:ROSSerial/ros/msg.h ****       arr[i] = (var >> (8 * i));
 608              		.loc 5 131 0
 609 00bc 0133     		adds	r3, r3, #1
 610              	.LVL63:
 611 00be F6E7     		b	.L27
 612              	.LVL64:
 613              	.L25:
 614              	.LBE91:
 615              	.LBE90:
 616              	.LBE92:
 617              	.LBE88:
  60:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 1) = (this->position_length >> (8 * 1)) & 0xFF;
 618              		.loc 2 60 0
 619 00c0 736A     		ldr	r3, [r6, #36]
 620 00c2 2B55     		strb	r3, [r5, r4]
  61:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 2) = (this->position_length >> (8 * 2)) & 0xFF;
 621              		.loc 2 61 0
 622 00c4 736A     		ldr	r3, [r6, #36]
 623 00c6 1B0A     		lsrs	r3, r3, #8
 624 00c8 621C     		adds	r2, r4, #1
 625 00ca AB54     		strb	r3, [r5, r2]
  62:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 3) = (this->position_length >> (8 * 3)) & 0xFF;
 626              		.loc 2 62 0
 627 00cc F28C     		ldrh	r2, [r6, #38]
 628 00ce A31C     		adds	r3, r4, #2
 629 00d0 EA54     		strb	r2, [r5, r3]
  63:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->position_length);
 630              		.loc 2 63 0
 631 00d2 96F82720 		ldrb	r2, [r6, #39]	@ zero_extendqisi2
 632 00d6 E31C     		adds	r3, r4, #3
 633 00d8 EA54     		strb	r2, [r5, r3]
  64:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < position_length; i++){
 634              		.loc 2 64 0
 635 00da 201D     		adds	r0, r4, #4
 636              	.LVL65:
 637              	.LBB93:
  65:ROSSerial/sensor_msgs/JointState.h ****       offset += serializeAvrFloat64(outbuffer + offset, this->position[i]);
 638              		.loc 2 65 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 23


 639 00dc 0027     		movs	r7, #0
 640 00de 17E0     		b	.L33
 641              	.LVL66:
 642              	.L30:
 643              	.LBB94:
 644              	.LBB95:
  74:ROSSerial/ros/msg.h ****     *(outbuffer++) = 0;
 645              		.loc 5 74 0
 646 00e0 0024     		movs	r4, #0
 647 00e2 1470     		strb	r4, [r2]
 648              	.LVL67:
  75:ROSSerial/ros/msg.h ****     *(outbuffer++) = 0;
 649              		.loc 5 75 0
 650 00e4 5470     		strb	r4, [r2, #1]
 651              	.LVL68:
  76:ROSSerial/ros/msg.h ****     *(outbuffer++) = (sig << 5) & 0xff;
 652              		.loc 5 76 0
 653 00e6 9470     		strb	r4, [r2, #2]
  77:ROSSerial/ros/msg.h ****     *(outbuffer++) = (sig >> 3) & 0xff;
 654              		.loc 5 77 0
 655 00e8 5C01     		lsls	r4, r3, #5
 656              	.LVL69:
 657 00ea D470     		strb	r4, [r2, #3]
  78:ROSSerial/ros/msg.h ****     *(outbuffer++) = (sig >> 11) & 0xff;
 658              		.loc 5 78 0
 659 00ec DC10     		asrs	r4, r3, #3
 660              	.LVL70:
 661 00ee 1471     		strb	r4, [r2, #4]
  79:ROSSerial/ros/msg.h ****     *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 662              		.loc 5 79 0
 663 00f0 DC12     		asrs	r4, r3, #11
 664              	.LVL71:
 665 00f2 5471     		strb	r4, [r2, #5]
  80:ROSSerial/ros/msg.h ****     *(outbuffer++) = (exp >> 4) & 0x7F;
 666              		.loc 5 80 0
 667 00f4 C3F3C343 		ubfx	r3, r3, #19, #4
 668              	.LVL72:
 669 00f8 43EA0113 		orr	r3, r3, r1, lsl #4
 670 00fc 9371     		strb	r3, [r2, #6]
 671              	.LVL73:
  81:ROSSerial/ros/msg.h **** 
 672              		.loc 5 81 0
 673 00fe 0909     		lsrs	r1, r1, #4
 674              	.LVL74:
 675 0100 D171     		strb	r1, [r2, #7]
  84:ROSSerial/ros/msg.h ****     {
 676              		.loc 5 84 0
 677 0102 F5EEC07A 		vcmpe.f32	s15, #0
 678 0106 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 679 010a 13D4     		bmi	.L48
 680              	.L31:
 681              	.LVL75:
 682              	.LBE95:
 683              	.LBE94:
  66:ROSSerial/sensor_msgs/JointState.h ****       }
 684              		.loc 2 66 0
 685 010c 0830     		adds	r0, r0, #8
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 24


 686              	.LVL76:
  65:ROSSerial/sensor_msgs/JointState.h ****       offset += serializeAvrFloat64(outbuffer + offset, this->position[i]);
 687              		.loc 2 65 0
 688 010e 0137     		adds	r7, r7, #1
 689              	.LVL77:
 690              	.L33:
  65:ROSSerial/sensor_msgs/JointState.h ****       offset += serializeAvrFloat64(outbuffer + offset, this->position[i]);
 691              		.loc 2 65 0 is_stmt 0 discriminator 3
 692 0110 736A     		ldr	r3, [r6, #36]
 693 0112 BB42     		cmp	r3, r7
 694 0114 12D9     		bls	.L29
  66:ROSSerial/sensor_msgs/JointState.h ****       }
 695              		.loc 2 66 0 is_stmt 1 discriminator 2
 696 0116 2A18     		adds	r2, r5, r0
 697 0118 F36A     		ldr	r3, [r6, #44]
 698 011a 03EB8703 		add	r3, r3, r7, lsl #2
 699 011e D3ED007A 		vldr.32	s15, [r3]
 700              	.LVL78:
 701              	.LBB97:
 702              	.LBB96:
  67:ROSSerial/ros/msg.h ****     if (exp != 0)
 703              		.loc 5 67 0 discriminator 2
 704 0122 17EE903A 		vmov	r3, s15	@ int
 705 0126 C3F3C751 		ubfx	r1, r3, #23, #8
 706              	.LVL79:
  68:ROSSerial/ros/msg.h ****     {
 707              		.loc 5 68 0 discriminator 2
 708 012a 0029     		cmp	r1, #0
 709 012c D8D0     		beq	.L30
  70:ROSSerial/ros/msg.h ****     }
 710              		.loc 5 70 0
 711 012e 01F56071 		add	r1, r1, #896
 712              	.LVL80:
 713 0132 D5E7     		b	.L30
 714              	.LVL81:
 715              	.L48:
  86:ROSSerial/ros/msg.h ****     }
 716              		.loc 5 86 0
 717 0134 61F07F01 		orn	r1, r1, #127
 718 0138 D171     		strb	r1, [r2, #7]
 719 013a E7E7     		b	.L31
 720              	.LVL82:
 721              	.L29:
 722              	.LBE96:
 723              	.LBE97:
 724              	.LBE93:
  68:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 1) = (this->velocity_length >> (8 * 1)) & 0xFF;
 725              		.loc 2 68 0
 726 013c 336B     		ldr	r3, [r6, #48]
 727 013e 2B54     		strb	r3, [r5, r0]
  69:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 2) = (this->velocity_length >> (8 * 2)) & 0xFF;
 728              		.loc 2 69 0
 729 0140 336B     		ldr	r3, [r6, #48]
 730 0142 1B0A     		lsrs	r3, r3, #8
 731 0144 421C     		adds	r2, r0, #1
 732 0146 AB54     		strb	r3, [r5, r2]
  70:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 3) = (this->velocity_length >> (8 * 3)) & 0xFF;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 25


 733              		.loc 2 70 0
 734 0148 728E     		ldrh	r2, [r6, #50]
 735 014a 831C     		adds	r3, r0, #2
 736 014c EA54     		strb	r2, [r5, r3]
  71:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->velocity_length);
 737              		.loc 2 71 0
 738 014e 96F83320 		ldrb	r2, [r6, #51]	@ zero_extendqisi2
 739 0152 C31C     		adds	r3, r0, #3
 740 0154 EA54     		strb	r2, [r5, r3]
  72:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < velocity_length; i++){
 741              		.loc 2 72 0
 742 0156 0430     		adds	r0, r0, #4
 743              	.LVL83:
 744              	.LBB98:
  73:ROSSerial/sensor_msgs/JointState.h ****       offset += serializeAvrFloat64(outbuffer + offset, this->velocity[i]);
 745              		.loc 2 73 0
 746 0158 0024     		movs	r4, #0
 747 015a 17E0     		b	.L38
 748              	.LVL84:
 749              	.L35:
 750              	.LBB99:
 751              	.LBB100:
  74:ROSSerial/ros/msg.h ****     *(outbuffer++) = 0;
 752              		.loc 5 74 0
 753 015c 0027     		movs	r7, #0
 754 015e 1770     		strb	r7, [r2]
 755              	.LVL85:
  75:ROSSerial/ros/msg.h ****     *(outbuffer++) = 0;
 756              		.loc 5 75 0
 757 0160 5770     		strb	r7, [r2, #1]
 758              	.LVL86:
  76:ROSSerial/ros/msg.h ****     *(outbuffer++) = (sig << 5) & 0xff;
 759              		.loc 5 76 0
 760 0162 9770     		strb	r7, [r2, #2]
  77:ROSSerial/ros/msg.h ****     *(outbuffer++) = (sig >> 3) & 0xff;
 761              		.loc 5 77 0
 762 0164 5F01     		lsls	r7, r3, #5
 763              	.LVL87:
 764 0166 D770     		strb	r7, [r2, #3]
  78:ROSSerial/ros/msg.h ****     *(outbuffer++) = (sig >> 11) & 0xff;
 765              		.loc 5 78 0
 766 0168 DF10     		asrs	r7, r3, #3
 767              	.LVL88:
 768 016a 1771     		strb	r7, [r2, #4]
  79:ROSSerial/ros/msg.h ****     *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 769              		.loc 5 79 0
 770 016c DF12     		asrs	r7, r3, #11
 771              	.LVL89:
 772 016e 5771     		strb	r7, [r2, #5]
  80:ROSSerial/ros/msg.h ****     *(outbuffer++) = (exp >> 4) & 0x7F;
 773              		.loc 5 80 0
 774 0170 C3F3C343 		ubfx	r3, r3, #19, #4
 775              	.LVL90:
 776 0174 43EA0113 		orr	r3, r3, r1, lsl #4
 777 0178 9371     		strb	r3, [r2, #6]
 778              	.LVL91:
  81:ROSSerial/ros/msg.h **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 26


 779              		.loc 5 81 0
 780 017a 0909     		lsrs	r1, r1, #4
 781              	.LVL92:
 782 017c D171     		strb	r1, [r2, #7]
  84:ROSSerial/ros/msg.h ****     {
 783              		.loc 5 84 0
 784 017e F5EEC07A 		vcmpe.f32	s15, #0
 785 0182 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 786 0186 13D4     		bmi	.L49
 787              	.L36:
 788              	.LVL93:
 789              	.LBE100:
 790              	.LBE99:
  74:ROSSerial/sensor_msgs/JointState.h ****       }
 791              		.loc 2 74 0
 792 0188 0830     		adds	r0, r0, #8
 793              	.LVL94:
  73:ROSSerial/sensor_msgs/JointState.h ****       offset += serializeAvrFloat64(outbuffer + offset, this->velocity[i]);
 794              		.loc 2 73 0
 795 018a 0134     		adds	r4, r4, #1
 796              	.LVL95:
 797              	.L38:
  73:ROSSerial/sensor_msgs/JointState.h ****       offset += serializeAvrFloat64(outbuffer + offset, this->velocity[i]);
 798              		.loc 2 73 0 is_stmt 0 discriminator 3
 799 018c 336B     		ldr	r3, [r6, #48]
 800 018e A342     		cmp	r3, r4
 801 0190 12D9     		bls	.L34
  74:ROSSerial/sensor_msgs/JointState.h ****       }
 802              		.loc 2 74 0 is_stmt 1 discriminator 2
 803 0192 2A18     		adds	r2, r5, r0
 804 0194 B36B     		ldr	r3, [r6, #56]
 805 0196 03EB8403 		add	r3, r3, r4, lsl #2
 806 019a D3ED007A 		vldr.32	s15, [r3]
 807              	.LVL96:
 808              	.LBB102:
 809              	.LBB101:
  67:ROSSerial/ros/msg.h ****     if (exp != 0)
 810              		.loc 5 67 0 discriminator 2
 811 019e 17EE903A 		vmov	r3, s15	@ int
 812 01a2 C3F3C751 		ubfx	r1, r3, #23, #8
 813              	.LVL97:
  68:ROSSerial/ros/msg.h ****     {
 814              		.loc 5 68 0 discriminator 2
 815 01a6 0029     		cmp	r1, #0
 816 01a8 D8D0     		beq	.L35
  70:ROSSerial/ros/msg.h ****     }
 817              		.loc 5 70 0
 818 01aa 01F56071 		add	r1, r1, #896
 819              	.LVL98:
 820 01ae D5E7     		b	.L35
 821              	.LVL99:
 822              	.L49:
  86:ROSSerial/ros/msg.h ****     }
 823              		.loc 5 86 0
 824 01b0 61F07F01 		orn	r1, r1, #127
 825 01b4 D171     		strb	r1, [r2, #7]
 826 01b6 E7E7     		b	.L36
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 27


 827              	.LVL100:
 828              	.L34:
 829              	.LBE101:
 830              	.LBE102:
 831              	.LBE98:
  76:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 1) = (this->effort_length >> (8 * 1)) & 0xFF;
 832              		.loc 2 76 0
 833 01b8 F36B     		ldr	r3, [r6, #60]
 834 01ba 2B54     		strb	r3, [r5, r0]
  77:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 2) = (this->effort_length >> (8 * 2)) & 0xFF;
 835              		.loc 2 77 0
 836 01bc F36B     		ldr	r3, [r6, #60]
 837 01be 1B0A     		lsrs	r3, r3, #8
 838 01c0 421C     		adds	r2, r0, #1
 839 01c2 AB54     		strb	r3, [r5, r2]
  78:ROSSerial/sensor_msgs/JointState.h ****       *(outbuffer + offset + 3) = (this->effort_length >> (8 * 3)) & 0xFF;
 840              		.loc 2 78 0
 841 01c4 F28F     		ldrh	r2, [r6, #62]
 842 01c6 831C     		adds	r3, r0, #2
 843 01c8 EA54     		strb	r2, [r5, r3]
  79:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->effort_length);
 844              		.loc 2 79 0
 845 01ca 96F83F20 		ldrb	r2, [r6, #63]	@ zero_extendqisi2
 846 01ce C31C     		adds	r3, r0, #3
 847 01d0 EA54     		strb	r2, [r5, r3]
  80:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < effort_length; i++){
 848              		.loc 2 80 0
 849 01d2 0430     		adds	r0, r0, #4
 850              	.LVL101:
 851              	.LBB103:
  81:ROSSerial/sensor_msgs/JointState.h ****       offset += serializeAvrFloat64(outbuffer + offset, this->effort[i]);
 852              		.loc 2 81 0
 853 01d4 0024     		movs	r4, #0
 854              	.LVL102:
 855 01d6 17E0     		b	.L43
 856              	.LVL103:
 857              	.L40:
 858              	.LBB104:
 859              	.LBB105:
  74:ROSSerial/ros/msg.h ****     *(outbuffer++) = 0;
 860              		.loc 5 74 0
 861 01d8 0027     		movs	r7, #0
 862 01da 1770     		strb	r7, [r2]
 863              	.LVL104:
  75:ROSSerial/ros/msg.h ****     *(outbuffer++) = 0;
 864              		.loc 5 75 0
 865 01dc 5770     		strb	r7, [r2, #1]
 866              	.LVL105:
  76:ROSSerial/ros/msg.h ****     *(outbuffer++) = (sig << 5) & 0xff;
 867              		.loc 5 76 0
 868 01de 9770     		strb	r7, [r2, #2]
  77:ROSSerial/ros/msg.h ****     *(outbuffer++) = (sig >> 3) & 0xff;
 869              		.loc 5 77 0
 870 01e0 5F01     		lsls	r7, r3, #5
 871              	.LVL106:
 872 01e2 D770     		strb	r7, [r2, #3]
  78:ROSSerial/ros/msg.h ****     *(outbuffer++) = (sig >> 11) & 0xff;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 28


 873              		.loc 5 78 0
 874 01e4 DF10     		asrs	r7, r3, #3
 875              	.LVL107:
 876 01e6 1771     		strb	r7, [r2, #4]
  79:ROSSerial/ros/msg.h ****     *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 877              		.loc 5 79 0
 878 01e8 DF12     		asrs	r7, r3, #11
 879              	.LVL108:
 880 01ea 5771     		strb	r7, [r2, #5]
  80:ROSSerial/ros/msg.h ****     *(outbuffer++) = (exp >> 4) & 0x7F;
 881              		.loc 5 80 0
 882 01ec C3F3C343 		ubfx	r3, r3, #19, #4
 883              	.LVL109:
 884 01f0 43EA0113 		orr	r3, r3, r1, lsl #4
 885 01f4 9371     		strb	r3, [r2, #6]
 886              	.LVL110:
  81:ROSSerial/ros/msg.h **** 
 887              		.loc 5 81 0
 888 01f6 0909     		lsrs	r1, r1, #4
 889              	.LVL111:
 890 01f8 D171     		strb	r1, [r2, #7]
  84:ROSSerial/ros/msg.h ****     {
 891              		.loc 5 84 0
 892 01fa F5EEC07A 		vcmpe.f32	s15, #0
 893 01fe F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 894 0202 13D4     		bmi	.L50
 895              	.L41:
 896              	.LVL112:
 897              	.LBE105:
 898              	.LBE104:
  82:ROSSerial/sensor_msgs/JointState.h ****       }
 899              		.loc 2 82 0
 900 0204 0830     		adds	r0, r0, #8
 901              	.LVL113:
  81:ROSSerial/sensor_msgs/JointState.h ****       offset += serializeAvrFloat64(outbuffer + offset, this->effort[i]);
 902              		.loc 2 81 0
 903 0206 0134     		adds	r4, r4, #1
 904              	.LVL114:
 905              	.L43:
  81:ROSSerial/sensor_msgs/JointState.h ****       offset += serializeAvrFloat64(outbuffer + offset, this->effort[i]);
 906              		.loc 2 81 0 is_stmt 0 discriminator 3
 907 0208 F36B     		ldr	r3, [r6, #60]
 908 020a A342     		cmp	r3, r4
 909 020c 12D9     		bls	.L24
  82:ROSSerial/sensor_msgs/JointState.h ****       }
 910              		.loc 2 82 0 is_stmt 1 discriminator 2
 911 020e 2A18     		adds	r2, r5, r0
 912 0210 736C     		ldr	r3, [r6, #68]
 913 0212 03EB8403 		add	r3, r3, r4, lsl #2
 914 0216 D3ED007A 		vldr.32	s15, [r3]
 915              	.LVL115:
 916              	.LBB107:
 917              	.LBB106:
  67:ROSSerial/ros/msg.h ****     if (exp != 0)
 918              		.loc 5 67 0 discriminator 2
 919 021a 17EE903A 		vmov	r3, s15	@ int
 920 021e C3F3C751 		ubfx	r1, r3, #23, #8
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 29


 921              	.LVL116:
  68:ROSSerial/ros/msg.h ****     {
 922              		.loc 5 68 0 discriminator 2
 923 0222 0029     		cmp	r1, #0
 924 0224 D8D0     		beq	.L40
  70:ROSSerial/ros/msg.h ****     }
 925              		.loc 5 70 0
 926 0226 01F56071 		add	r1, r1, #896
 927              	.LVL117:
 928 022a D5E7     		b	.L40
 929              	.LVL118:
 930              	.L50:
  86:ROSSerial/ros/msg.h ****     }
 931              		.loc 5 86 0
 932 022c 61F07F01 		orn	r1, r1, #127
 933 0230 D171     		strb	r1, [r2, #7]
 934 0232 E7E7     		b	.L41
 935              	.LVL119:
 936              	.L24:
 937              	.LBE106:
 938              	.LBE107:
 939              	.LBE103:
  85:ROSSerial/sensor_msgs/JointState.h **** 
 940              		.loc 2 85 0
 941 0234 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 942              		.cfi_endproc
 943              	.LFE487:
 944              		.cantunwind
 945              		.fnend
 947              		.section	.text._ZN11sensor_msgs10JointState11deserializeEPh,"axG",%progbits,_ZN11sensor_msgs10Join
 948              		.align	1
 949              		.weak	_ZN11sensor_msgs10JointState11deserializeEPh
 950              		.syntax unified
 951              		.thumb
 952              		.thumb_func
 953              		.fpu fpv4-sp-d16
 955              	_ZN11sensor_msgs10JointState11deserializeEPh:
 956              		.fnstart
 957              	.LFB488:
  87:ROSSerial/sensor_msgs/JointState.h ****     {
 958              		.loc 2 87 0
 959              		.cfi_startproc
 960              		@ args = 0, pretend = 0, frame = 0
 961              		@ frame_needed = 0, uses_anonymous_args = 0
 962              	.LVL120:
 963 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 964              	.LCFI4:
 965              		.cfi_def_cfa_offset 24
 966              		.cfi_offset 3, -24
 967              		.cfi_offset 4, -20
 968              		.cfi_offset 5, -16
 969              		.cfi_offset 6, -12
 970              		.cfi_offset 7, -8
 971              		.cfi_offset 14, -4
 972 0002 0446     		mov	r4, r0
 973 0004 0D46     		mov	r5, r1
 974              	.LVL121:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 30


  90:ROSSerial/sensor_msgs/JointState.h ****       uint32_t name_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 975              		.loc 2 90 0
 976 0006 021D     		adds	r2, r0, #4
 977              	.LVL122:
 978              	.LBB135:
 979              	.LBB136:
  49:ROSSerial/std_msgs/Header.h ****       this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 980              		.loc 1 49 0
 981 0008 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 982 000a 5360     		str	r3, [r2, #4]
  50:ROSSerial/std_msgs/Header.h ****       this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 983              		.loc 1 50 0
 984 000c 4978     		ldrb	r1, [r1, #1]	@ zero_extendqisi2
 985              	.LVL123:
 986 000e 43EA0123 		orr	r3, r3, r1, lsl #8
 987 0012 5360     		str	r3, [r2, #4]
  51:ROSSerial/std_msgs/Header.h ****       this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 988              		.loc 1 51 0
 989 0014 A978     		ldrb	r1, [r5, #2]	@ zero_extendqisi2
 990 0016 43EA0143 		orr	r3, r3, r1, lsl #16
 991 001a 5360     		str	r3, [r2, #4]
  52:ROSSerial/std_msgs/Header.h ****       offset += sizeof(this->seq);
 992              		.loc 1 52 0
 993 001c E978     		ldrb	r1, [r5, #3]	@ zero_extendqisi2
 994 001e 43EA0163 		orr	r3, r3, r1, lsl #24
 995 0022 5360     		str	r3, [r2, #4]
 996              	.LVL124:
  54:ROSSerial/std_msgs/Header.h ****       this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 997              		.loc 1 54 0
 998 0024 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 999 0026 9360     		str	r3, [r2, #8]
  55:ROSSerial/std_msgs/Header.h ****       this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 1000              		.loc 1 55 0
 1001 0028 6979     		ldrb	r1, [r5, #5]	@ zero_extendqisi2
 1002 002a 43EA0123 		orr	r3, r3, r1, lsl #8
 1003 002e 9360     		str	r3, [r2, #8]
  56:ROSSerial/std_msgs/Header.h ****       this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 1004              		.loc 1 56 0
 1005 0030 A979     		ldrb	r1, [r5, #6]	@ zero_extendqisi2
 1006 0032 43EA0143 		orr	r3, r3, r1, lsl #16
 1007 0036 9360     		str	r3, [r2, #8]
  57:ROSSerial/std_msgs/Header.h ****       offset += sizeof(this->stamp.sec);
 1008              		.loc 1 57 0
 1009 0038 E979     		ldrb	r1, [r5, #7]	@ zero_extendqisi2
 1010 003a 43EA0163 		orr	r3, r3, r1, lsl #24
 1011 003e 9360     		str	r3, [r2, #8]
 1012              	.LVL125:
  59:ROSSerial/std_msgs/Header.h ****       this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 1013              		.loc 1 59 0
 1014 0040 2B7A     		ldrb	r3, [r5, #8]	@ zero_extendqisi2
 1015 0042 D360     		str	r3, [r2, #12]
  60:ROSSerial/std_msgs/Header.h ****       this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 1016              		.loc 1 60 0
 1017 0044 697A     		ldrb	r1, [r5, #9]	@ zero_extendqisi2
 1018 0046 43EA0123 		orr	r3, r3, r1, lsl #8
 1019 004a D360     		str	r3, [r2, #12]
  61:ROSSerial/std_msgs/Header.h ****       this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 31


 1020              		.loc 1 61 0
 1021 004c A97A     		ldrb	r1, [r5, #10]	@ zero_extendqisi2
 1022 004e 43EA0143 		orr	r3, r3, r1, lsl #16
 1023 0052 D360     		str	r3, [r2, #12]
  62:ROSSerial/std_msgs/Header.h ****       offset += sizeof(this->stamp.nsec);
 1024              		.loc 1 62 0
 1025 0054 E97A     		ldrb	r1, [r5, #11]	@ zero_extendqisi2
 1026 0056 43EA0163 		orr	r3, r3, r1, lsl #24
 1027 005a D360     		str	r3, [r2, #12]
 1028              	.LVL126:
  65:ROSSerial/std_msgs/Header.h ****       offset += 4;
 1029              		.loc 1 65 0
 1030 005c EF68     		ldr	r7, [r5, #12]	@ unaligned
 1031              	.LVL127:
 1032              	.LBB137:
  67:ROSSerial/std_msgs/Header.h ****           inbuffer[k-1]=inbuffer[k];
 1033              		.loc 1 67 0
 1034 005e 1023     		movs	r3, #16
 1035              	.LVL128:
 1036              	.L53:
 1037 0060 07F11006 		add	r6, r7, #16
 1038 0064 9E42     		cmp	r6, r3
 1039 0066 04D9     		bls	.L52
  68:ROSSerial/std_msgs/Header.h ****       }
 1040              		.loc 1 68 0
 1041 0068 591E     		subs	r1, r3, #1
 1042 006a E85C     		ldrb	r0, [r5, r3]	@ zero_extendqisi2
 1043 006c 6854     		strb	r0, [r5, r1]
  67:ROSSerial/std_msgs/Header.h ****           inbuffer[k-1]=inbuffer[k];
 1044              		.loc 1 67 0
 1045 006e 0133     		adds	r3, r3, #1
 1046              	.LVL129:
 1047 0070 F6E7     		b	.L53
 1048              	.L52:
 1049              	.LBE137:
  70:ROSSerial/std_msgs/Header.h ****       this->frame_id = (char *)(inbuffer + offset-1);
 1050              		.loc 1 70 0
 1051 0072 0F37     		adds	r7, r7, #15
 1052              	.LVL130:
 1053 0074 0023     		movs	r3, #0
 1054              	.LVL131:
 1055 0076 EB55     		strb	r3, [r5, r7]
  71:ROSSerial/std_msgs/Header.h ****       offset += length_frame_id;
 1056              		.loc 1 71 0
 1057 0078 05F10F03 		add	r3, r5, #15
 1058 007c 1361     		str	r3, [r2, #16]
 1059              	.LVL132:
 1060              	.LBE136:
 1061              	.LBE135:
  91:ROSSerial/sensor_msgs/JointState.h ****       name_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 1062              		.loc 2 91 0
 1063 007e AF5D     		ldrb	r7, [r5, r6]	@ zero_extendqisi2
 1064              	.LVL133:
  92:ROSSerial/sensor_msgs/JointState.h ****       name_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 1065              		.loc 2 92 0
 1066 0080 731C     		adds	r3, r6, #1
 1067 0082 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 32


 1068 0084 47EA0327 		orr	r7, r7, r3, lsl #8
 1069              	.LVL134:
  93:ROSSerial/sensor_msgs/JointState.h ****       name_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 1070              		.loc 2 93 0
 1071 0088 B31C     		adds	r3, r6, #2
 1072 008a EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1073 008c 47EA0347 		orr	r7, r7, r3, lsl #16
 1074              	.LVL135:
  94:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->name_length);
 1075              		.loc 2 94 0
 1076 0090 F31C     		adds	r3, r6, #3
 1077 0092 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1078 0094 47EA0367 		orr	r7, r7, r3, lsl #24
 1079              	.LVL136:
  95:ROSSerial/sensor_msgs/JointState.h ****       if(name_lengthT > name_length)
 1080              		.loc 2 95 0
 1081 0098 0436     		adds	r6, r6, #4
 1082              	.LVL137:
  96:ROSSerial/sensor_msgs/JointState.h ****         this->name = (char**)realloc(this->name, name_lengthT * sizeof(char*));
 1083              		.loc 2 96 0
 1084 009a A369     		ldr	r3, [r4, #24]
 1085 009c BB42     		cmp	r3, r7
 1086 009e 02D3     		bcc	.L74
 1087              	.L54:
  98:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < name_length; i++){
 1088              		.loc 2 98 0
 1089 00a0 A761     		str	r7, [r4, #24]
 1090              	.LVL138:
 1091              	.LBB138:
  99:ROSSerial/sensor_msgs/JointState.h ****       uint32_t length_st_name;
 1092              		.loc 2 99 0
 1093 00a2 0020     		movs	r0, #0
 1094 00a4 1AE0     		b	.L60
 1095              	.LVL139:
 1096              	.L74:
 1097              	.LBE138:
  97:ROSSerial/sensor_msgs/JointState.h ****       name_length = name_lengthT;
 1098              		.loc 2 97 0
 1099 00a6 B900     		lsls	r1, r7, #2
 1100 00a8 206A     		ldr	r0, [r4, #32]
 1101 00aa FFF7FEFF 		bl	realloc
 1102              	.LVL140:
 1103 00ae 2062     		str	r0, [r4, #32]
 1104 00b0 F6E7     		b	.L54
 1105              	.LVL141:
 1106              	.L56:
 1107              	.LBB145:
 1108              	.LBB139:
 102:ROSSerial/sensor_msgs/JointState.h ****       for(unsigned int k= offset; k< offset+length_st_name; ++k){
 1109              		.loc 2 102 0
 1110 00b2 0436     		adds	r6, r6, #4
 1111              	.LVL142:
 1112              	.LBB140:
 103:ROSSerial/sensor_msgs/JointState.h ****           inbuffer[k-1]=inbuffer[k];
 1113              		.loc 2 103 0
 1114 00b4 3346     		mov	r3, r6
 1115              	.LVL143:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 33


 1116              	.L59:
 103:ROSSerial/sensor_msgs/JointState.h ****           inbuffer[k-1]=inbuffer[k];
 1117              		.loc 2 103 0 is_stmt 0 discriminator 3
 1118 00b6 B118     		adds	r1, r6, r2
 1119 00b8 9942     		cmp	r1, r3
 1120 00ba 04D9     		bls	.L58
 104:ROSSerial/sensor_msgs/JointState.h ****       }
 1121              		.loc 2 104 0 is_stmt 1 discriminator 2
 1122 00bc 591E     		subs	r1, r3, #1
 1123 00be EF5C     		ldrb	r7, [r5, r3]	@ zero_extendqisi2
 1124 00c0 6F54     		strb	r7, [r5, r1]
 103:ROSSerial/sensor_msgs/JointState.h ****           inbuffer[k-1]=inbuffer[k];
 1125              		.loc 2 103 0 discriminator 2
 1126 00c2 0133     		adds	r3, r3, #1
 1127              	.LVL144:
 1128 00c4 F7E7     		b	.L59
 1129              	.L58:
 1130              	.LBE140:
 106:ROSSerial/sensor_msgs/JointState.h ****       this->st_name = (char *)(inbuffer + offset-1);
 1131              		.loc 2 106 0 discriminator 2
 1132 00c6 4B1E     		subs	r3, r1, #1
 1133              	.LVL145:
 1134 00c8 0022     		movs	r2, #0
 1135              	.LVL146:
 1136 00ca EA54     		strb	r2, [r5, r3]
 107:ROSSerial/sensor_msgs/JointState.h ****       offset += length_st_name;
 1137              		.loc 2 107 0 discriminator 2
 1138 00cc 013E     		subs	r6, r6, #1
 1139 00ce AB19     		adds	r3, r5, r6
 1140 00d0 E361     		str	r3, [r4, #28]
 108:ROSSerial/sensor_msgs/JointState.h ****         memcpy( &(this->name[i]), &(this->st_name), sizeof(char*));
 1141              		.loc 2 108 0 discriminator 2
 1142 00d2 0E46     		mov	r6, r1
 1143              	.LVL147:
 109:ROSSerial/sensor_msgs/JointState.h ****       }
 1144              		.loc 2 109 0 discriminator 2
 1145 00d4 226A     		ldr	r2, [r4, #32]
 1146 00d6 42F82030 		str	r3, [r2, r0, lsl #2]	@ unaligned
 1147              	.LBE139:
  99:ROSSerial/sensor_msgs/JointState.h ****       uint32_t length_st_name;
 1148              		.loc 2 99 0 discriminator 2
 1149 00da 0130     		adds	r0, r0, #1
 1150              	.LVL148:
 1151              	.L60:
  99:ROSSerial/sensor_msgs/JointState.h ****       uint32_t length_st_name;
 1152              		.loc 2 99 0 is_stmt 0 discriminator 1
 1153 00dc A369     		ldr	r3, [r4, #24]
 1154 00de 8342     		cmp	r3, r0
 1155 00e0 0CD9     		bls	.L55
 1156              	.LBB144:
 101:ROSSerial/sensor_msgs/JointState.h ****       offset += 4;
 1157              		.loc 2 101 0 is_stmt 1
 1158 00e2 B446     		mov	ip, r6
 1159              	.LVL149:
 1160              	.LBB141:
 1161              	.LBB142:
 133:ROSSerial/ros/msg.h ****   }
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 34


 134:ROSSerial/ros/msg.h **** 
 135:ROSSerial/ros/msg.h ****   // Copy data from a byte array into variable
 136:ROSSerial/ros/msg.h ****   template<typename V, typename A>
 137:ROSSerial/ros/msg.h ****   static void arrToVar(V& var, const A arr)
 138:ROSSerial/ros/msg.h ****   {
 139:ROSSerial/ros/msg.h ****     var = 0;
 1162              		.loc 5 139 0
 1163 00e4 0022     		movs	r2, #0
 1164              	.LBB143:
 140:ROSSerial/ros/msg.h ****     for (size_t i = 0; i < sizeof(V); i++)
 1165              		.loc 5 140 0
 1166 00e6 1346     		mov	r3, r2
 1167              	.LVL150:
 1168              	.L57:
 1169 00e8 032B     		cmp	r3, #3
 1170 00ea E2D8     		bhi	.L56
 141:ROSSerial/ros/msg.h ****       var |= (arr[i] << (8 * i));
 1171              		.loc 5 141 0
 1172 00ec 05EB0C01 		add	r1, r5, ip
 1173 00f0 C95C     		ldrb	r1, [r1, r3]	@ zero_extendqisi2
 1174 00f2 DF00     		lsls	r7, r3, #3
 1175 00f4 B940     		lsls	r1, r1, r7
 1176 00f6 0A43     		orrs	r2, r2, r1
 1177              	.LVL151:
 140:ROSSerial/ros/msg.h ****     for (size_t i = 0; i < sizeof(V); i++)
 1178              		.loc 5 140 0
 1179 00f8 0133     		adds	r3, r3, #1
 1180              	.LVL152:
 1181 00fa F5E7     		b	.L57
 1182              	.LVL153:
 1183              	.L55:
 1184              	.LBE143:
 1185              	.LBE142:
 1186              	.LBE141:
 1187              	.LBE144:
 1188              	.LBE145:
 111:ROSSerial/sensor_msgs/JointState.h ****       position_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 1189              		.loc 2 111 0
 1190 00fc AF5D     		ldrb	r7, [r5, r6]	@ zero_extendqisi2
 1191              	.LVL154:
 112:ROSSerial/sensor_msgs/JointState.h ****       position_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 1192              		.loc 2 112 0
 1193 00fe 731C     		adds	r3, r6, #1
 1194 0100 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1195 0102 47EA0327 		orr	r7, r7, r3, lsl #8
 1196              	.LVL155:
 113:ROSSerial/sensor_msgs/JointState.h ****       position_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 1197              		.loc 2 113 0
 1198 0106 B31C     		adds	r3, r6, #2
 1199 0108 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1200 010a 47EA0347 		orr	r7, r7, r3, lsl #16
 1201              	.LVL156:
 114:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->position_length);
 1202              		.loc 2 114 0
 1203 010e F31C     		adds	r3, r6, #3
 1204 0110 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1205 0112 47EA0367 		orr	r7, r7, r3, lsl #24
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 35


 1206              	.LVL157:
 115:ROSSerial/sensor_msgs/JointState.h ****       if(position_lengthT > position_length)
 1207              		.loc 2 115 0
 1208 0116 0436     		adds	r6, r6, #4
 1209              	.LVL158:
 116:ROSSerial/sensor_msgs/JointState.h ****         this->position = (float*)realloc(this->position, position_lengthT * sizeof(float));
 1210              		.loc 2 116 0
 1211 0118 636A     		ldr	r3, [r4, #36]
 1212 011a BB42     		cmp	r3, r7
 1213 011c 02D3     		bcc	.L75
 1214              	.LVL159:
 1215              	.L61:
 118:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < position_length; i++){
 1216              		.loc 2 118 0
 1217 011e 6762     		str	r7, [r4, #36]
 1218              	.LVL160:
 1219              	.LBB146:
 119:ROSSerial/sensor_msgs/JointState.h ****       offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_position));
 1220              		.loc 2 119 0
 1221 0120 0020     		movs	r0, #0
 1222 0122 12E0     		b	.L64
 1223              	.LVL161:
 1224              	.L75:
 1225              	.LBE146:
 117:ROSSerial/sensor_msgs/JointState.h ****       position_length = position_lengthT;
 1226              		.loc 2 117 0
 1227 0124 B900     		lsls	r1, r7, #2
 1228 0126 E06A     		ldr	r0, [r4, #44]
 1229              	.LVL162:
 1230 0128 FFF7FEFF 		bl	realloc
 1231              	.LVL163:
 1232 012c E062     		str	r0, [r4, #44]
 1233 012e F6E7     		b	.L61
 1234              	.LVL164:
 1235              	.L63:
 1236              	.LBB151:
 1237              	.LBB147:
 1238              	.LBB148:
 122:ROSSerial/ros/msg.h **** 
 1239              		.loc 5 122 0
 1240 0130 CB79     		ldrb	r3, [r1, #7]	@ zero_extendqisi2
 1241 0132 1B06     		lsls	r3, r3, #24
 1242 0134 03F00043 		and	r3, r3, #-2147483648
 1243 0138 A26A     		ldr	r2, [r4, #40]
 1244 013a 1343     		orrs	r3, r3, r2
 1245 013c A362     		str	r3, [r4, #40]
 1246              	.LVL165:
 1247              	.LBE148:
 1248              	.LBE147:
 120:ROSSerial/sensor_msgs/JointState.h ****         memcpy( &(this->position[i]), &(this->st_position), sizeof(float));
 1249              		.loc 2 120 0
 1250 013e 0836     		adds	r6, r6, #8
 1251              	.LVL166:
 121:ROSSerial/sensor_msgs/JointState.h ****       }
 1252              		.loc 2 121 0
 1253 0140 E36A     		ldr	r3, [r4, #44]
 1254 0142 A26A     		ldr	r2, [r4, #40]	@ unaligned
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 36


 1255 0144 43F82020 		str	r2, [r3, r0, lsl #2]	@ unaligned
 119:ROSSerial/sensor_msgs/JointState.h ****       offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_position));
 1256              		.loc 2 119 0
 1257 0148 0130     		adds	r0, r0, #1
 1258              	.LVL167:
 1259              	.L64:
 119:ROSSerial/sensor_msgs/JointState.h ****       offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_position));
 1260              		.loc 2 119 0 is_stmt 0 discriminator 3
 1261 014a 636A     		ldr	r3, [r4, #36]
 1262 014c 8342     		cmp	r3, r0
 1263 014e 1FD9     		bls	.L62
 120:ROSSerial/sensor_msgs/JointState.h ****         memcpy( &(this->position[i]), &(this->st_position), sizeof(float));
 1264              		.loc 2 120 0 is_stmt 1 discriminator 2
 1265 0150 A919     		adds	r1, r5, r6
 1266              	.LVL168:
 1267              	.LBB150:
 1268              	.LBB149:
 108:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 1269              		.loc 5 108 0 discriminator 2
 1270 0152 CB78     		ldrb	r3, [r1, #3]	@ zero_extendqisi2
 1271 0154 5B09     		lsrs	r3, r3, #5
 1272 0156 A362     		str	r3, [r4, #40]
 1273              	.LVL169:
 109:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 1274              		.loc 5 109 0 discriminator 2
 1275 0158 0A79     		ldrb	r2, [r1, #4]	@ zero_extendqisi2
 1276 015a 43EAC203 		orr	r3, r3, r2, lsl #3
 1277 015e A362     		str	r3, [r4, #40]
 1278              	.LVL170:
 110:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 1279              		.loc 5 110 0 discriminator 2
 1280 0160 4A79     		ldrb	r2, [r1, #5]	@ zero_extendqisi2
 1281 0162 43EAC223 		orr	r3, r3, r2, lsl #11
 1282 0166 A362     		str	r3, [r4, #40]
 111:ROSSerial/ros/msg.h **** 
 1283              		.loc 5 111 0 discriminator 2
 1284 0168 8A79     		ldrb	r2, [r1, #6]	@ zero_extendqisi2
 1285 016a D204     		lsls	r2, r2, #19
 1286 016c 02F4F002 		and	r2, r2, #7864320
 1287 0170 1343     		orrs	r3, r3, r2
 1288 0172 A362     		str	r3, [r4, #40]
 1289              	.LVL171:
 114:ROSSerial/ros/msg.h ****     exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 1290              		.loc 5 114 0 discriminator 2
 1291 0174 8F79     		ldrb	r7, [r1, #6]	@ zero_extendqisi2
 1292              	.LVL172:
 115:ROSSerial/ros/msg.h ****     if (exp != 0)
 1293              		.loc 5 115 0 discriminator 2
 1294 0176 CA79     		ldrb	r2, [r1, #7]	@ zero_extendqisi2
 1295 0178 1201     		lsls	r2, r2, #4
 1296 017a 02F4FE62 		and	r2, r2, #2032
 1297              	.LVL173:
 116:ROSSerial/ros/msg.h ****     {
 1298              		.loc 5 116 0 discriminator 2
 1299 017e 52EA1712 		orrs	r2, r2, r7, lsr #4
 1300              	.LVL174:
 1301 0182 D5D0     		beq	.L63
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 37


 118:ROSSerial/ros/msg.h ****     }
 1302              		.loc 5 118 0
 1303 0184 A2F56072 		sub	r2, r2, #896
 1304              	.LVL175:
 1305 0188 43EAC253 		orr	r3, r3, r2, lsl #23
 1306 018c A362     		str	r3, [r4, #40]
 1307 018e CFE7     		b	.L63
 1308              	.LVL176:
 1309              	.L62:
 1310              	.LBE149:
 1311              	.LBE150:
 1312              	.LBE151:
 123:ROSSerial/sensor_msgs/JointState.h ****       velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 1313              		.loc 2 123 0
 1314 0190 AF5D     		ldrb	r7, [r5, r6]	@ zero_extendqisi2
 1315              	.LVL177:
 124:ROSSerial/sensor_msgs/JointState.h ****       velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 1316              		.loc 2 124 0
 1317 0192 731C     		adds	r3, r6, #1
 1318 0194 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1319 0196 47EA0327 		orr	r7, r7, r3, lsl #8
 1320              	.LVL178:
 125:ROSSerial/sensor_msgs/JointState.h ****       velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 1321              		.loc 2 125 0
 1322 019a B31C     		adds	r3, r6, #2
 1323 019c EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1324 019e 47EA0347 		orr	r7, r7, r3, lsl #16
 1325              	.LVL179:
 126:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->velocity_length);
 1326              		.loc 2 126 0
 1327 01a2 F31C     		adds	r3, r6, #3
 1328 01a4 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1329 01a6 47EA0367 		orr	r7, r7, r3, lsl #24
 1330              	.LVL180:
 127:ROSSerial/sensor_msgs/JointState.h ****       if(velocity_lengthT > velocity_length)
 1331              		.loc 2 127 0
 1332 01aa 0436     		adds	r6, r6, #4
 1333              	.LVL181:
 128:ROSSerial/sensor_msgs/JointState.h ****         this->velocity = (float*)realloc(this->velocity, velocity_lengthT * sizeof(float));
 1334              		.loc 2 128 0
 1335 01ac 236B     		ldr	r3, [r4, #48]
 1336 01ae BB42     		cmp	r3, r7
 1337 01b0 02D3     		bcc	.L76
 1338              	.LVL182:
 1339              	.L65:
 130:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < velocity_length; i++){
 1340              		.loc 2 130 0
 1341 01b2 2763     		str	r7, [r4, #48]
 1342              	.LVL183:
 1343              	.LBB152:
 131:ROSSerial/sensor_msgs/JointState.h ****       offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_velocity));
 1344              		.loc 2 131 0
 1345 01b4 0020     		movs	r0, #0
 1346 01b6 12E0     		b	.L68
 1347              	.LVL184:
 1348              	.L76:
 1349              	.LBE152:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 38


 129:ROSSerial/sensor_msgs/JointState.h ****       velocity_length = velocity_lengthT;
 1350              		.loc 2 129 0
 1351 01b8 B900     		lsls	r1, r7, #2
 1352 01ba A06B     		ldr	r0, [r4, #56]
 1353              	.LVL185:
 1354 01bc FFF7FEFF 		bl	realloc
 1355              	.LVL186:
 1356 01c0 A063     		str	r0, [r4, #56]
 1357 01c2 F6E7     		b	.L65
 1358              	.LVL187:
 1359              	.L67:
 1360              	.LBB157:
 1361              	.LBB153:
 1362              	.LBB154:
 122:ROSSerial/ros/msg.h **** 
 1363              		.loc 5 122 0
 1364 01c4 CB79     		ldrb	r3, [r1, #7]	@ zero_extendqisi2
 1365 01c6 1B06     		lsls	r3, r3, #24
 1366 01c8 03F00043 		and	r3, r3, #-2147483648
 1367 01cc 626B     		ldr	r2, [r4, #52]
 1368 01ce 1343     		orrs	r3, r3, r2
 1369 01d0 6363     		str	r3, [r4, #52]
 1370              	.LVL188:
 1371              	.LBE154:
 1372              	.LBE153:
 132:ROSSerial/sensor_msgs/JointState.h ****         memcpy( &(this->velocity[i]), &(this->st_velocity), sizeof(float));
 1373              		.loc 2 132 0
 1374 01d2 0836     		adds	r6, r6, #8
 1375              	.LVL189:
 133:ROSSerial/sensor_msgs/JointState.h ****       }
 1376              		.loc 2 133 0
 1377 01d4 A36B     		ldr	r3, [r4, #56]
 1378 01d6 626B     		ldr	r2, [r4, #52]	@ unaligned
 1379 01d8 43F82020 		str	r2, [r3, r0, lsl #2]	@ unaligned
 131:ROSSerial/sensor_msgs/JointState.h ****       offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_velocity));
 1380              		.loc 2 131 0
 1381 01dc 0130     		adds	r0, r0, #1
 1382              	.LVL190:
 1383              	.L68:
 131:ROSSerial/sensor_msgs/JointState.h ****       offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_velocity));
 1384              		.loc 2 131 0 is_stmt 0 discriminator 3
 1385 01de 236B     		ldr	r3, [r4, #48]
 1386 01e0 8342     		cmp	r3, r0
 1387 01e2 1FD9     		bls	.L66
 132:ROSSerial/sensor_msgs/JointState.h ****         memcpy( &(this->velocity[i]), &(this->st_velocity), sizeof(float));
 1388              		.loc 2 132 0 is_stmt 1 discriminator 2
 1389 01e4 A919     		adds	r1, r5, r6
 1390              	.LVL191:
 1391              	.LBB156:
 1392              	.LBB155:
 108:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 1393              		.loc 5 108 0 discriminator 2
 1394 01e6 CB78     		ldrb	r3, [r1, #3]	@ zero_extendqisi2
 1395 01e8 5B09     		lsrs	r3, r3, #5
 1396 01ea 6363     		str	r3, [r4, #52]
 1397              	.LVL192:
 109:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 39


 1398              		.loc 5 109 0 discriminator 2
 1399 01ec 0A79     		ldrb	r2, [r1, #4]	@ zero_extendqisi2
 1400 01ee 43EAC203 		orr	r3, r3, r2, lsl #3
 1401 01f2 6363     		str	r3, [r4, #52]
 1402              	.LVL193:
 110:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 1403              		.loc 5 110 0 discriminator 2
 1404 01f4 4A79     		ldrb	r2, [r1, #5]	@ zero_extendqisi2
 1405 01f6 43EAC223 		orr	r3, r3, r2, lsl #11
 1406 01fa 6363     		str	r3, [r4, #52]
 111:ROSSerial/ros/msg.h **** 
 1407              		.loc 5 111 0 discriminator 2
 1408 01fc 8A79     		ldrb	r2, [r1, #6]	@ zero_extendqisi2
 1409 01fe D204     		lsls	r2, r2, #19
 1410 0200 02F4F002 		and	r2, r2, #7864320
 1411 0204 1343     		orrs	r3, r3, r2
 1412 0206 6363     		str	r3, [r4, #52]
 1413              	.LVL194:
 114:ROSSerial/ros/msg.h ****     exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 1414              		.loc 5 114 0 discriminator 2
 1415 0208 8F79     		ldrb	r7, [r1, #6]	@ zero_extendqisi2
 1416              	.LVL195:
 115:ROSSerial/ros/msg.h ****     if (exp != 0)
 1417              		.loc 5 115 0 discriminator 2
 1418 020a CA79     		ldrb	r2, [r1, #7]	@ zero_extendqisi2
 1419 020c 1201     		lsls	r2, r2, #4
 1420 020e 02F4FE62 		and	r2, r2, #2032
 1421              	.LVL196:
 116:ROSSerial/ros/msg.h ****     {
 1422              		.loc 5 116 0 discriminator 2
 1423 0212 52EA1712 		orrs	r2, r2, r7, lsr #4
 1424              	.LVL197:
 1425 0216 D5D0     		beq	.L67
 118:ROSSerial/ros/msg.h ****     }
 1426              		.loc 5 118 0
 1427 0218 A2F56072 		sub	r2, r2, #896
 1428              	.LVL198:
 1429 021c 43EAC253 		orr	r3, r3, r2, lsl #23
 1430 0220 6363     		str	r3, [r4, #52]
 1431 0222 CFE7     		b	.L67
 1432              	.LVL199:
 1433              	.L66:
 1434              	.LBE155:
 1435              	.LBE156:
 1436              	.LBE157:
 135:ROSSerial/sensor_msgs/JointState.h ****       effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 1437              		.loc 2 135 0
 1438 0224 AF5D     		ldrb	r7, [r5, r6]	@ zero_extendqisi2
 1439              	.LVL200:
 136:ROSSerial/sensor_msgs/JointState.h ****       effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 1440              		.loc 2 136 0
 1441 0226 731C     		adds	r3, r6, #1
 1442 0228 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1443 022a 47EA0327 		orr	r7, r7, r3, lsl #8
 1444              	.LVL201:
 137:ROSSerial/sensor_msgs/JointState.h ****       effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 1445              		.loc 2 137 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 40


 1446 022e B31C     		adds	r3, r6, #2
 1447 0230 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1448 0232 47EA0347 		orr	r7, r7, r3, lsl #16
 1449              	.LVL202:
 138:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->effort_length);
 1450              		.loc 2 138 0
 1451 0236 F31C     		adds	r3, r6, #3
 1452 0238 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1453 023a 47EA0367 		orr	r7, r7, r3, lsl #24
 1454              	.LVL203:
 139:ROSSerial/sensor_msgs/JointState.h ****       if(effort_lengthT > effort_length)
 1455              		.loc 2 139 0
 1456 023e 0436     		adds	r6, r6, #4
 1457              	.LVL204:
 140:ROSSerial/sensor_msgs/JointState.h ****         this->effort = (float*)realloc(this->effort, effort_lengthT * sizeof(float));
 1458              		.loc 2 140 0
 1459 0240 E36B     		ldr	r3, [r4, #60]
 1460 0242 BB42     		cmp	r3, r7
 1461 0244 02D3     		bcc	.L77
 1462              	.LVL205:
 1463              	.L69:
 142:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < effort_length; i++){
 1464              		.loc 2 142 0
 1465 0246 E763     		str	r7, [r4, #60]
 1466              	.LVL206:
 1467              	.LBB158:
 143:ROSSerial/sensor_msgs/JointState.h ****       offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_effort));
 1468              		.loc 2 143 0
 1469 0248 0020     		movs	r0, #0
 1470 024a 12E0     		b	.L72
 1471              	.LVL207:
 1472              	.L77:
 1473              	.LBE158:
 141:ROSSerial/sensor_msgs/JointState.h ****       effort_length = effort_lengthT;
 1474              		.loc 2 141 0
 1475 024c B900     		lsls	r1, r7, #2
 1476 024e 606C     		ldr	r0, [r4, #68]
 1477              	.LVL208:
 1478 0250 FFF7FEFF 		bl	realloc
 1479              	.LVL209:
 1480 0254 6064     		str	r0, [r4, #68]
 1481 0256 F6E7     		b	.L69
 1482              	.LVL210:
 1483              	.L71:
 1484              	.LBB163:
 1485              	.LBB159:
 1486              	.LBB160:
 122:ROSSerial/ros/msg.h **** 
 1487              		.loc 5 122 0
 1488 0258 CB79     		ldrb	r3, [r1, #7]	@ zero_extendqisi2
 1489 025a 1B06     		lsls	r3, r3, #24
 1490 025c 03F00043 		and	r3, r3, #-2147483648
 1491 0260 226C     		ldr	r2, [r4, #64]
 1492 0262 1343     		orrs	r3, r3, r2
 1493 0264 2364     		str	r3, [r4, #64]
 1494              	.LVL211:
 1495              	.LBE160:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 41


 1496              	.LBE159:
 144:ROSSerial/sensor_msgs/JointState.h ****         memcpy( &(this->effort[i]), &(this->st_effort), sizeof(float));
 1497              		.loc 2 144 0
 1498 0266 0836     		adds	r6, r6, #8
 1499              	.LVL212:
 145:ROSSerial/sensor_msgs/JointState.h ****       }
 1500              		.loc 2 145 0
 1501 0268 636C     		ldr	r3, [r4, #68]
 1502 026a 226C     		ldr	r2, [r4, #64]	@ unaligned
 1503 026c 43F82020 		str	r2, [r3, r0, lsl #2]	@ unaligned
 143:ROSSerial/sensor_msgs/JointState.h ****       offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_effort));
 1504              		.loc 2 143 0
 1505 0270 0130     		adds	r0, r0, #1
 1506              	.LVL213:
 1507              	.L72:
 143:ROSSerial/sensor_msgs/JointState.h ****       offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_effort));
 1508              		.loc 2 143 0 is_stmt 0 discriminator 3
 1509 0272 E36B     		ldr	r3, [r4, #60]
 1510 0274 8342     		cmp	r3, r0
 1511 0276 1FD9     		bls	.L51
 144:ROSSerial/sensor_msgs/JointState.h ****         memcpy( &(this->effort[i]), &(this->st_effort), sizeof(float));
 1512              		.loc 2 144 0 is_stmt 1 discriminator 2
 1513 0278 A919     		adds	r1, r5, r6
 1514              	.LVL214:
 1515              	.LBB162:
 1516              	.LBB161:
 108:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 1517              		.loc 5 108 0 discriminator 2
 1518 027a CB78     		ldrb	r3, [r1, #3]	@ zero_extendqisi2
 1519 027c 5B09     		lsrs	r3, r3, #5
 1520 027e 2364     		str	r3, [r4, #64]
 1521              	.LVL215:
 109:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 1522              		.loc 5 109 0 discriminator 2
 1523 0280 0A79     		ldrb	r2, [r1, #4]	@ zero_extendqisi2
 1524 0282 43EAC203 		orr	r3, r3, r2, lsl #3
 1525 0286 2364     		str	r3, [r4, #64]
 1526              	.LVL216:
 110:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 1527              		.loc 5 110 0 discriminator 2
 1528 0288 4A79     		ldrb	r2, [r1, #5]	@ zero_extendqisi2
 1529 028a 43EAC223 		orr	r3, r3, r2, lsl #11
 1530 028e 2364     		str	r3, [r4, #64]
 111:ROSSerial/ros/msg.h **** 
 1531              		.loc 5 111 0 discriminator 2
 1532 0290 8A79     		ldrb	r2, [r1, #6]	@ zero_extendqisi2
 1533 0292 D204     		lsls	r2, r2, #19
 1534 0294 02F4F002 		and	r2, r2, #7864320
 1535 0298 1343     		orrs	r3, r3, r2
 1536 029a 2364     		str	r3, [r4, #64]
 1537              	.LVL217:
 114:ROSSerial/ros/msg.h ****     exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 1538              		.loc 5 114 0 discriminator 2
 1539 029c 8F79     		ldrb	r7, [r1, #6]	@ zero_extendqisi2
 1540              	.LVL218:
 115:ROSSerial/ros/msg.h ****     if (exp != 0)
 1541              		.loc 5 115 0 discriminator 2
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 42


 1542 029e CA79     		ldrb	r2, [r1, #7]	@ zero_extendqisi2
 1543 02a0 1201     		lsls	r2, r2, #4
 1544 02a2 02F4FE62 		and	r2, r2, #2032
 1545              	.LVL219:
 116:ROSSerial/ros/msg.h ****     {
 1546              		.loc 5 116 0 discriminator 2
 1547 02a6 52EA1712 		orrs	r2, r2, r7, lsr #4
 1548              	.LVL220:
 1549 02aa D5D0     		beq	.L71
 118:ROSSerial/ros/msg.h ****     }
 1550              		.loc 5 118 0
 1551 02ac A2F56072 		sub	r2, r2, #896
 1552              	.LVL221:
 1553 02b0 43EAC253 		orr	r3, r3, r2, lsl #23
 1554 02b4 2364     		str	r3, [r4, #64]
 1555 02b6 CFE7     		b	.L71
 1556              	.LVL222:
 1557              	.L51:
 1558              	.LBE161:
 1559              	.LBE162:
 1560              	.LBE163:
 148:ROSSerial/sensor_msgs/JointState.h **** 
 1561              		.loc 2 148 0
 1562 02b8 3046     		mov	r0, r6
 1563              	.LVL223:
 1564 02ba F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1565              		.cfi_endproc
 1566              	.LFE488:
 1567              		.cantunwind
 1568              		.fnend
 1570              		.section	.text._Z13wheels_cmd_cbPh,"ax",%progbits
 1571              		.align	1
 1572              		.global	_Z13wheels_cmd_cbPh
 1573              		.syntax unified
 1574              		.thumb
 1575              		.thumb_func
 1576              		.fpu fpv4-sp-d16
 1578              	_Z13wheels_cmd_cbPh:
 1579              		.fnstart
 1580              	.LFB491:
  38:./Src/ROS_subscribe.cpp **** 	wheelInputAt = HAL_GetTick();
 1581              		.loc 3 38 0
 1582              		.cfi_startproc
 1583              		@ args = 0, pretend = 0, frame = 0
 1584              		@ frame_needed = 0, uses_anonymous_args = 0
 1585              	.LVL224:
 1586 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1587              		.save {r3, r4, r5, r6, r7, lr}
 1588              	.LCFI5:
 1589              		.cfi_def_cfa_offset 24
 1590              		.cfi_offset 3, -24
 1591              		.cfi_offset 4, -20
 1592              		.cfi_offset 5, -16
 1593              		.cfi_offset 6, -12
 1594              		.cfi_offset 7, -8
 1595              		.cfi_offset 14, -4
 1596 0002 0546     		mov	r5, r0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 43


  39:./Src/ROS_subscribe.cpp **** 	wheelPositions.deserialize(msg); 
 1597              		.loc 3 39 0
 1598 0004 FFF7FEFF 		bl	HAL_GetTick
 1599              	.LVL225:
 1600 0008 9E4B     		ldr	r3, .L112
 1601 000a 1860     		str	r0, [r3]
 1602              	.LVL226:
 1603              	.LBB185:
 1604              	.LBB186:
 1605              	.LBB187:
 1606              	.LBB188:
  49:ROSSerial/std_msgs/Header.h ****       this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 1607              		.loc 1 49 0
 1608 000c 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 1609 000e 9E4B     		ldr	r3, .L112+4
 1610 0010 9A60     		str	r2, [r3, #8]
  50:ROSSerial/std_msgs/Header.h ****       this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 1611              		.loc 1 50 0
 1612 0012 6978     		ldrb	r1, [r5, #1]	@ zero_extendqisi2
 1613 0014 42EA0122 		orr	r2, r2, r1, lsl #8
 1614 0018 9A60     		str	r2, [r3, #8]
  51:ROSSerial/std_msgs/Header.h ****       this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 1615              		.loc 1 51 0
 1616 001a A978     		ldrb	r1, [r5, #2]	@ zero_extendqisi2
 1617 001c 42EA0142 		orr	r2, r2, r1, lsl #16
 1618 0020 9A60     		str	r2, [r3, #8]
  52:ROSSerial/std_msgs/Header.h ****       offset += sizeof(this->seq);
 1619              		.loc 1 52 0
 1620 0022 E978     		ldrb	r1, [r5, #3]	@ zero_extendqisi2
 1621 0024 42EA0162 		orr	r2, r2, r1, lsl #24
 1622 0028 9A60     		str	r2, [r3, #8]
 1623              	.LVL227:
  54:ROSSerial/std_msgs/Header.h ****       this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 1624              		.loc 1 54 0
 1625 002a 2A79     		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 1626 002c DA60     		str	r2, [r3, #12]
  55:ROSSerial/std_msgs/Header.h ****       this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 1627              		.loc 1 55 0
 1628 002e 6979     		ldrb	r1, [r5, #5]	@ zero_extendqisi2
 1629 0030 42EA0122 		orr	r2, r2, r1, lsl #8
 1630 0034 DA60     		str	r2, [r3, #12]
  56:ROSSerial/std_msgs/Header.h ****       this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 1631              		.loc 1 56 0
 1632 0036 A979     		ldrb	r1, [r5, #6]	@ zero_extendqisi2
 1633 0038 42EA0142 		orr	r2, r2, r1, lsl #16
 1634 003c DA60     		str	r2, [r3, #12]
  57:ROSSerial/std_msgs/Header.h ****       offset += sizeof(this->stamp.sec);
 1635              		.loc 1 57 0
 1636 003e E979     		ldrb	r1, [r5, #7]	@ zero_extendqisi2
 1637 0040 42EA0162 		orr	r2, r2, r1, lsl #24
 1638 0044 DA60     		str	r2, [r3, #12]
 1639              	.LVL228:
  59:ROSSerial/std_msgs/Header.h ****       this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 1640              		.loc 1 59 0
 1641 0046 2A7A     		ldrb	r2, [r5, #8]	@ zero_extendqisi2
 1642 0048 1A61     		str	r2, [r3, #16]
  60:ROSSerial/std_msgs/Header.h ****       this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 44


 1643              		.loc 1 60 0
 1644 004a 697A     		ldrb	r1, [r5, #9]	@ zero_extendqisi2
 1645 004c 42EA0122 		orr	r2, r2, r1, lsl #8
 1646 0050 1A61     		str	r2, [r3, #16]
  61:ROSSerial/std_msgs/Header.h ****       this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 1647              		.loc 1 61 0
 1648 0052 A97A     		ldrb	r1, [r5, #10]	@ zero_extendqisi2
 1649 0054 42EA0142 		orr	r2, r2, r1, lsl #16
 1650 0058 1A61     		str	r2, [r3, #16]
  62:ROSSerial/std_msgs/Header.h ****       offset += sizeof(this->stamp.nsec);
 1651              		.loc 1 62 0
 1652 005a E97A     		ldrb	r1, [r5, #11]	@ zero_extendqisi2
 1653 005c 42EA0162 		orr	r2, r2, r1, lsl #24
 1654 0060 1A61     		str	r2, [r3, #16]
 1655              	.LVL229:
  65:ROSSerial/std_msgs/Header.h ****       offset += 4;
 1656              		.loc 1 65 0
 1657 0062 E868     		ldr	r0, [r5, #12]	@ unaligned
 1658              	.LVL230:
 1659              	.LBB189:
  67:ROSSerial/std_msgs/Header.h ****           inbuffer[k-1]=inbuffer[k];
 1660              		.loc 1 67 0
 1661 0064 1023     		movs	r3, #16
 1662              	.LVL231:
 1663              	.L80:
 1664 0066 00F11004 		add	r4, r0, #16
 1665 006a 9C42     		cmp	r4, r3
 1666 006c 04D9     		bls	.L79
  68:ROSSerial/std_msgs/Header.h ****       }
 1667              		.loc 1 68 0
 1668 006e 5A1E     		subs	r2, r3, #1
 1669 0070 E95C     		ldrb	r1, [r5, r3]	@ zero_extendqisi2
 1670 0072 A954     		strb	r1, [r5, r2]
  67:ROSSerial/std_msgs/Header.h ****           inbuffer[k-1]=inbuffer[k];
 1671              		.loc 1 67 0
 1672 0074 0133     		adds	r3, r3, #1
 1673              	.LVL232:
 1674 0076 F6E7     		b	.L80
 1675              	.L79:
 1676              	.LBE189:
  70:ROSSerial/std_msgs/Header.h ****       this->frame_id = (char *)(inbuffer + offset-1);
 1677              		.loc 1 70 0
 1678 0078 0F30     		adds	r0, r0, #15
 1679              	.LVL233:
 1680 007a 0023     		movs	r3, #0
 1681              	.LVL234:
 1682 007c 2B54     		strb	r3, [r5, r0]
  71:ROSSerial/std_msgs/Header.h ****       offset += length_frame_id;
 1683              		.loc 1 71 0
 1684 007e 05F10F03 		add	r3, r5, #15
 1685 0082 814A     		ldr	r2, .L112+4
 1686 0084 5361     		str	r3, [r2, #20]
 1687              	.LVL235:
 1688              	.LBE188:
 1689              	.LBE187:
  91:ROSSerial/sensor_msgs/JointState.h ****       name_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 1690              		.loc 2 91 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 45


 1691 0086 2E5D     		ldrb	r6, [r5, r4]	@ zero_extendqisi2
 1692              	.LVL236:
  92:ROSSerial/sensor_msgs/JointState.h ****       name_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 1693              		.loc 2 92 0
 1694 0088 631C     		adds	r3, r4, #1
 1695 008a EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1696 008c 46EA0326 		orr	r6, r6, r3, lsl #8
 1697              	.LVL237:
  93:ROSSerial/sensor_msgs/JointState.h ****       name_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 1698              		.loc 2 93 0
 1699 0090 A31C     		adds	r3, r4, #2
 1700 0092 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1701 0094 46EA0346 		orr	r6, r6, r3, lsl #16
 1702              	.LVL238:
  94:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->name_length);
 1703              		.loc 2 94 0
 1704 0098 E31C     		adds	r3, r4, #3
 1705 009a EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1706 009c 46EA0366 		orr	r6, r6, r3, lsl #24
 1707              	.LVL239:
  95:ROSSerial/sensor_msgs/JointState.h ****       if(name_lengthT > name_length)
 1708              		.loc 2 95 0
 1709 00a0 0434     		adds	r4, r4, #4
 1710              	.LVL240:
  96:ROSSerial/sensor_msgs/JointState.h ****         this->name = (char**)realloc(this->name, name_lengthT * sizeof(char*));
 1711              		.loc 2 96 0
 1712 00a2 9369     		ldr	r3, [r2, #24]
 1713 00a4 9E42     		cmp	r6, r3
 1714 00a6 03D8     		bhi	.L107
 1715              	.L81:
  98:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < name_length; i++){
 1716              		.loc 2 98 0
 1717 00a8 774B     		ldr	r3, .L112+4
 1718 00aa 9E61     		str	r6, [r3, #24]
 1719              	.LVL241:
 1720              	.LBB190:
  99:ROSSerial/sensor_msgs/JointState.h ****       uint32_t length_st_name;
 1721              		.loc 2 99 0
 1722 00ac 0026     		movs	r6, #0
 1723              	.LVL242:
 1724 00ae 1CE0     		b	.L87
 1725              	.LVL243:
 1726              	.L107:
 1727              	.LBE190:
  97:ROSSerial/sensor_msgs/JointState.h ****       name_length = name_lengthT;
 1728              		.loc 2 97 0
 1729 00b0 1746     		mov	r7, r2
 1730 00b2 B100     		lsls	r1, r6, #2
 1731 00b4 106A     		ldr	r0, [r2, #32]
 1732 00b6 FFF7FEFF 		bl	realloc
 1733              	.LVL244:
 1734 00ba 3862     		str	r0, [r7, #32]
 1735 00bc F4E7     		b	.L81
 1736              	.LVL245:
 1737              	.L83:
 1738              	.LBB197:
 1739              	.LBB191:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 46


 102:ROSSerial/sensor_msgs/JointState.h ****       for(unsigned int k= offset; k< offset+length_st_name; ++k){
 1740              		.loc 2 102 0
 1741 00be 0434     		adds	r4, r4, #4
 1742              	.LVL246:
 1743              	.LBB192:
 103:ROSSerial/sensor_msgs/JointState.h ****           inbuffer[k-1]=inbuffer[k];
 1744              		.loc 2 103 0
 1745 00c0 2346     		mov	r3, r4
 1746              	.LVL247:
 1747              	.L86:
 1748 00c2 1119     		adds	r1, r2, r4
 1749 00c4 9942     		cmp	r1, r3
 1750 00c6 04D9     		bls	.L85
 104:ROSSerial/sensor_msgs/JointState.h ****       }
 1751              		.loc 2 104 0
 1752 00c8 591E     		subs	r1, r3, #1
 1753 00ca E85C     		ldrb	r0, [r5, r3]	@ zero_extendqisi2
 1754 00cc 6854     		strb	r0, [r5, r1]
 103:ROSSerial/sensor_msgs/JointState.h ****           inbuffer[k-1]=inbuffer[k];
 1755              		.loc 2 103 0
 1756 00ce 0133     		adds	r3, r3, #1
 1757              	.LVL248:
 1758 00d0 F7E7     		b	.L86
 1759              	.L85:
 1760              	.LBE192:
 106:ROSSerial/sensor_msgs/JointState.h ****       this->st_name = (char *)(inbuffer + offset-1);
 1761              		.loc 2 106 0
 1762 00d2 4B1E     		subs	r3, r1, #1
 1763              	.LVL249:
 1764 00d4 0022     		movs	r2, #0
 1765              	.LVL250:
 1766 00d6 EA54     		strb	r2, [r5, r3]
 107:ROSSerial/sensor_msgs/JointState.h ****       offset += length_st_name;
 1767              		.loc 2 107 0
 1768 00d8 013C     		subs	r4, r4, #1
 1769 00da 2B19     		adds	r3, r5, r4
 1770 00dc 6A4A     		ldr	r2, .L112+4
 1771 00de D361     		str	r3, [r2, #28]
 108:ROSSerial/sensor_msgs/JointState.h ****         memcpy( &(this->name[i]), &(this->st_name), sizeof(char*));
 1772              		.loc 2 108 0
 1773 00e0 0C46     		mov	r4, r1
 1774              	.LVL251:
 109:ROSSerial/sensor_msgs/JointState.h ****       }
 1775              		.loc 2 109 0
 1776 00e2 126A     		ldr	r2, [r2, #32]
 1777 00e4 42F82630 		str	r3, [r2, r6, lsl #2]	@ unaligned
 1778              	.LBE191:
  99:ROSSerial/sensor_msgs/JointState.h ****       uint32_t length_st_name;
 1779              		.loc 2 99 0
 1780 00e8 0136     		adds	r6, r6, #1
 1781              	.LVL252:
 1782              	.L87:
 1783 00ea 674B     		ldr	r3, .L112+4
 1784 00ec 9B69     		ldr	r3, [r3, #24]
 1785 00ee B342     		cmp	r3, r6
 1786 00f0 0BD9     		bls	.L82
 1787              	.LBB196:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 47


 101:ROSSerial/sensor_msgs/JointState.h ****       offset += 4;
 1788              		.loc 2 101 0
 1789 00f2 2746     		mov	r7, r4
 1790              	.LVL253:
 1791              	.LBB193:
 1792              	.LBB194:
 139:ROSSerial/ros/msg.h ****     for (size_t i = 0; i < sizeof(V); i++)
 1793              		.loc 5 139 0
 1794 00f4 0022     		movs	r2, #0
 1795              	.LBB195:
 140:ROSSerial/ros/msg.h ****       var |= (arr[i] << (8 * i));
 1796              		.loc 5 140 0
 1797 00f6 1346     		mov	r3, r2
 1798              	.LVL254:
 1799              	.L84:
 1800 00f8 032B     		cmp	r3, #3
 1801 00fa E0D8     		bhi	.L83
 1802              		.loc 5 141 0
 1803 00fc E919     		adds	r1, r5, r7
 1804 00fe C95C     		ldrb	r1, [r1, r3]	@ zero_extendqisi2
 1805 0100 D800     		lsls	r0, r3, #3
 1806 0102 8140     		lsls	r1, r1, r0
 1807 0104 0A43     		orrs	r2, r2, r1
 1808              	.LVL255:
 140:ROSSerial/ros/msg.h ****       var |= (arr[i] << (8 * i));
 1809              		.loc 5 140 0
 1810 0106 0133     		adds	r3, r3, #1
 1811              	.LVL256:
 1812 0108 F6E7     		b	.L84
 1813              	.LVL257:
 1814              	.L82:
 1815              	.LBE195:
 1816              	.LBE194:
 1817              	.LBE193:
 1818              	.LBE196:
 1819              	.LBE197:
 111:ROSSerial/sensor_msgs/JointState.h ****       position_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 1820              		.loc 2 111 0
 1821 010a 2E5D     		ldrb	r6, [r5, r4]	@ zero_extendqisi2
 1822              	.LVL258:
 112:ROSSerial/sensor_msgs/JointState.h ****       position_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 1823              		.loc 2 112 0
 1824 010c 631C     		adds	r3, r4, #1
 1825 010e EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1826 0110 46EA0326 		orr	r6, r6, r3, lsl #8
 1827              	.LVL259:
 113:ROSSerial/sensor_msgs/JointState.h ****       position_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 1828              		.loc 2 113 0
 1829 0114 A31C     		adds	r3, r4, #2
 1830 0116 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1831 0118 46EA0346 		orr	r6, r6, r3, lsl #16
 1832              	.LVL260:
 114:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->position_length);
 1833              		.loc 2 114 0
 1834 011c E31C     		adds	r3, r4, #3
 1835 011e EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1836 0120 46EA0366 		orr	r6, r6, r3, lsl #24
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 48


 1837              	.LVL261:
 115:ROSSerial/sensor_msgs/JointState.h ****       if(position_lengthT > position_length)
 1838              		.loc 2 115 0
 1839 0124 0434     		adds	r4, r4, #4
 1840              	.LVL262:
 116:ROSSerial/sensor_msgs/JointState.h ****         this->position = (float*)realloc(this->position, position_lengthT * sizeof(float));
 1841              		.loc 2 116 0
 1842 0126 584B     		ldr	r3, .L112+4
 1843 0128 5B6A     		ldr	r3, [r3, #36]
 1844 012a 9E42     		cmp	r6, r3
 1845 012c 03D8     		bhi	.L108
 1846              	.L88:
 118:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < position_length; i++){
 1847              		.loc 2 118 0
 1848 012e 564B     		ldr	r3, .L112+4
 1849 0130 5E62     		str	r6, [r3, #36]
 1850              	.LVL263:
 1851              	.LBB198:
 119:ROSSerial/sensor_msgs/JointState.h ****       offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_position));
 1852              		.loc 2 119 0
 1853 0132 0020     		movs	r0, #0
 1854 0134 13E0     		b	.L91
 1855              	.LVL264:
 1856              	.L108:
 1857              	.LBE198:
 117:ROSSerial/sensor_msgs/JointState.h ****       position_length = position_lengthT;
 1858              		.loc 2 117 0
 1859 0136 544F     		ldr	r7, .L112+4
 1860 0138 B100     		lsls	r1, r6, #2
 1861 013a F86A     		ldr	r0, [r7, #44]
 1862 013c FFF7FEFF 		bl	realloc
 1863              	.LVL265:
 1864 0140 F862     		str	r0, [r7, #44]
 1865 0142 F4E7     		b	.L88
 1866              	.LVL266:
 1867              	.L90:
 1868              	.LBB203:
 1869              	.LBB199:
 1870              	.LBB200:
 122:ROSSerial/ros/msg.h **** 
 1871              		.loc 5 122 0
 1872 0144 CB79     		ldrb	r3, [r1, #7]	@ zero_extendqisi2
 1873 0146 1B06     		lsls	r3, r3, #24
 1874 0148 03F00043 		and	r3, r3, #-2147483648
 1875 014c 4E49     		ldr	r1, .L112+4
 1876              	.LVL267:
 1877 014e 8A6A     		ldr	r2, [r1, #40]
 1878 0150 1343     		orrs	r3, r3, r2
 1879 0152 8B62     		str	r3, [r1, #40]
 1880              	.LVL268:
 1881              	.LBE200:
 1882              	.LBE199:
 120:ROSSerial/sensor_msgs/JointState.h ****         memcpy( &(this->position[i]), &(this->st_position), sizeof(float));
 1883              		.loc 2 120 0
 1884 0154 0834     		adds	r4, r4, #8
 1885              	.LVL269:
 121:ROSSerial/sensor_msgs/JointState.h ****       }
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 49


 1886              		.loc 2 121 0
 1887 0156 CA6A     		ldr	r2, [r1, #44]
 1888 0158 42F82030 		str	r3, [r2, r0, lsl #2]	@ unaligned
 119:ROSSerial/sensor_msgs/JointState.h ****       offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_position));
 1889              		.loc 2 119 0
 1890 015c 0130     		adds	r0, r0, #1
 1891              	.LVL270:
 1892              	.L91:
 1893 015e 4A4B     		ldr	r3, .L112+4
 1894 0160 5B6A     		ldr	r3, [r3, #36]
 1895 0162 8342     		cmp	r3, r0
 1896 0164 21D9     		bls	.L89
 120:ROSSerial/sensor_msgs/JointState.h ****         memcpy( &(this->position[i]), &(this->st_position), sizeof(float));
 1897              		.loc 2 120 0
 1898 0166 2919     		adds	r1, r5, r4
 1899              	.LVL271:
 1900              	.LBB202:
 1901              	.LBB201:
 108:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 1902              		.loc 5 108 0
 1903 0168 CB78     		ldrb	r3, [r1, #3]	@ zero_extendqisi2
 1904 016a 5B09     		lsrs	r3, r3, #5
 1905 016c 464E     		ldr	r6, .L112+4
 1906 016e B362     		str	r3, [r6, #40]
 1907              	.LVL272:
 109:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 1908              		.loc 5 109 0
 1909 0170 0A79     		ldrb	r2, [r1, #4]	@ zero_extendqisi2
 1910 0172 43EAC203 		orr	r3, r3, r2, lsl #3
 1911 0176 B362     		str	r3, [r6, #40]
 1912              	.LVL273:
 110:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 1913              		.loc 5 110 0
 1914 0178 4A79     		ldrb	r2, [r1, #5]	@ zero_extendqisi2
 1915 017a 43EAC223 		orr	r3, r3, r2, lsl #11
 1916 017e B362     		str	r3, [r6, #40]
 111:ROSSerial/ros/msg.h **** 
 1917              		.loc 5 111 0
 1918 0180 8A79     		ldrb	r2, [r1, #6]	@ zero_extendqisi2
 1919 0182 D204     		lsls	r2, r2, #19
 1920 0184 02F4F002 		and	r2, r2, #7864320
 1921 0188 1343     		orrs	r3, r3, r2
 1922 018a B362     		str	r3, [r6, #40]
 1923              	.LVL274:
 114:ROSSerial/ros/msg.h ****     exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 1924              		.loc 5 114 0
 1925 018c 8E79     		ldrb	r6, [r1, #6]	@ zero_extendqisi2
 1926              	.LVL275:
 115:ROSSerial/ros/msg.h ****     if (exp != 0)
 1927              		.loc 5 115 0
 1928 018e CA79     		ldrb	r2, [r1, #7]	@ zero_extendqisi2
 1929 0190 1201     		lsls	r2, r2, #4
 1930 0192 02F4FE62 		and	r2, r2, #2032
 1931              	.LVL276:
 116:ROSSerial/ros/msg.h ****     {
 1932              		.loc 5 116 0
 1933 0196 52EA1612 		orrs	r2, r2, r6, lsr #4
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 50


 1934              	.LVL277:
 1935 019a D3D0     		beq	.L90
 118:ROSSerial/ros/msg.h ****     }
 1936              		.loc 5 118 0
 1937 019c A2F56072 		sub	r2, r2, #896
 1938              	.LVL278:
 1939 01a0 43EAC253 		orr	r3, r3, r2, lsl #23
 1940 01a4 384A     		ldr	r2, .L112+4
 1941              	.LVL279:
 1942 01a6 9362     		str	r3, [r2, #40]
 1943              	.LVL280:
 1944 01a8 CCE7     		b	.L90
 1945              	.LVL281:
 1946              	.L89:
 1947              	.LBE201:
 1948              	.LBE202:
 1949              	.LBE203:
 123:ROSSerial/sensor_msgs/JointState.h ****       velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 1950              		.loc 2 123 0
 1951 01aa 2E5D     		ldrb	r6, [r5, r4]	@ zero_extendqisi2
 1952              	.LVL282:
 124:ROSSerial/sensor_msgs/JointState.h ****       velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 1953              		.loc 2 124 0
 1954 01ac 631C     		adds	r3, r4, #1
 1955 01ae EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1956 01b0 46EA0326 		orr	r6, r6, r3, lsl #8
 1957              	.LVL283:
 125:ROSSerial/sensor_msgs/JointState.h ****       velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 1958              		.loc 2 125 0
 1959 01b4 A31C     		adds	r3, r4, #2
 1960 01b6 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1961 01b8 46EA0346 		orr	r6, r6, r3, lsl #16
 1962              	.LVL284:
 126:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->velocity_length);
 1963              		.loc 2 126 0
 1964 01bc E31C     		adds	r3, r4, #3
 1965 01be EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1966 01c0 46EA0366 		orr	r6, r6, r3, lsl #24
 1967              	.LVL285:
 127:ROSSerial/sensor_msgs/JointState.h ****       if(velocity_lengthT > velocity_length)
 1968              		.loc 2 127 0
 1969 01c4 0434     		adds	r4, r4, #4
 1970              	.LVL286:
 128:ROSSerial/sensor_msgs/JointState.h ****         this->velocity = (float*)realloc(this->velocity, velocity_lengthT * sizeof(float));
 1971              		.loc 2 128 0
 1972 01c6 304B     		ldr	r3, .L112+4
 1973 01c8 1B6B     		ldr	r3, [r3, #48]
 1974 01ca 9E42     		cmp	r6, r3
 1975 01cc 03D8     		bhi	.L109
 1976              	.LVL287:
 1977              	.L92:
 130:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < velocity_length; i++){
 1978              		.loc 2 130 0
 1979 01ce 2E4B     		ldr	r3, .L112+4
 1980 01d0 1E63     		str	r6, [r3, #48]
 1981              	.LVL288:
 1982              	.LBB204:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 51


 131:ROSSerial/sensor_msgs/JointState.h ****       offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_velocity));
 1983              		.loc 2 131 0
 1984 01d2 0020     		movs	r0, #0
 1985 01d4 13E0     		b	.L95
 1986              	.LVL289:
 1987              	.L109:
 1988              	.LBE204:
 129:ROSSerial/sensor_msgs/JointState.h ****       velocity_length = velocity_lengthT;
 1989              		.loc 2 129 0
 1990 01d6 2C4F     		ldr	r7, .L112+4
 1991 01d8 B100     		lsls	r1, r6, #2
 1992 01da B86B     		ldr	r0, [r7, #56]
 1993              	.LVL290:
 1994 01dc FFF7FEFF 		bl	realloc
 1995              	.LVL291:
 1996 01e0 B863     		str	r0, [r7, #56]
 1997 01e2 F4E7     		b	.L92
 1998              	.LVL292:
 1999              	.L94:
 2000              	.LBB209:
 2001              	.LBB205:
 2002              	.LBB206:
 122:ROSSerial/ros/msg.h **** 
 2003              		.loc 5 122 0
 2004 01e4 CB79     		ldrb	r3, [r1, #7]	@ zero_extendqisi2
 2005 01e6 1B06     		lsls	r3, r3, #24
 2006 01e8 03F00043 		and	r3, r3, #-2147483648
 2007 01ec 2649     		ldr	r1, .L112+4
 2008              	.LVL293:
 2009 01ee 4A6B     		ldr	r2, [r1, #52]
 2010 01f0 1343     		orrs	r3, r3, r2
 2011 01f2 4B63     		str	r3, [r1, #52]
 2012              	.LVL294:
 2013              	.LBE206:
 2014              	.LBE205:
 132:ROSSerial/sensor_msgs/JointState.h ****         memcpy( &(this->velocity[i]), &(this->st_velocity), sizeof(float));
 2015              		.loc 2 132 0
 2016 01f4 0834     		adds	r4, r4, #8
 2017              	.LVL295:
 133:ROSSerial/sensor_msgs/JointState.h ****       }
 2018              		.loc 2 133 0
 2019 01f6 8A6B     		ldr	r2, [r1, #56]
 2020 01f8 42F82030 		str	r3, [r2, r0, lsl #2]	@ unaligned
 131:ROSSerial/sensor_msgs/JointState.h ****       offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_velocity));
 2021              		.loc 2 131 0
 2022 01fc 0130     		adds	r0, r0, #1
 2023              	.LVL296:
 2024              	.L95:
 2025 01fe 224B     		ldr	r3, .L112+4
 2026 0200 1B6B     		ldr	r3, [r3, #48]
 2027 0202 8342     		cmp	r3, r0
 2028 0204 21D9     		bls	.L93
 132:ROSSerial/sensor_msgs/JointState.h ****         memcpy( &(this->velocity[i]), &(this->st_velocity), sizeof(float));
 2029              		.loc 2 132 0
 2030 0206 2919     		adds	r1, r5, r4
 2031              	.LVL297:
 2032              	.LBB208:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 52


 2033              	.LBB207:
 108:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 2034              		.loc 5 108 0
 2035 0208 CB78     		ldrb	r3, [r1, #3]	@ zero_extendqisi2
 2036 020a 5B09     		lsrs	r3, r3, #5
 2037 020c 1E4E     		ldr	r6, .L112+4
 2038 020e 7363     		str	r3, [r6, #52]
 2039              	.LVL298:
 109:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 2040              		.loc 5 109 0
 2041 0210 0A79     		ldrb	r2, [r1, #4]	@ zero_extendqisi2
 2042 0212 43EAC203 		orr	r3, r3, r2, lsl #3
 2043 0216 7363     		str	r3, [r6, #52]
 2044              	.LVL299:
 110:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 2045              		.loc 5 110 0
 2046 0218 4A79     		ldrb	r2, [r1, #5]	@ zero_extendqisi2
 2047 021a 43EAC223 		orr	r3, r3, r2, lsl #11
 2048 021e 7363     		str	r3, [r6, #52]
 111:ROSSerial/ros/msg.h **** 
 2049              		.loc 5 111 0
 2050 0220 8A79     		ldrb	r2, [r1, #6]	@ zero_extendqisi2
 2051 0222 D204     		lsls	r2, r2, #19
 2052 0224 02F4F002 		and	r2, r2, #7864320
 2053 0228 1343     		orrs	r3, r3, r2
 2054 022a 7363     		str	r3, [r6, #52]
 2055              	.LVL300:
 114:ROSSerial/ros/msg.h ****     exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 2056              		.loc 5 114 0
 2057 022c 8E79     		ldrb	r6, [r1, #6]	@ zero_extendqisi2
 2058              	.LVL301:
 115:ROSSerial/ros/msg.h ****     if (exp != 0)
 2059              		.loc 5 115 0
 2060 022e CA79     		ldrb	r2, [r1, #7]	@ zero_extendqisi2
 2061 0230 1201     		lsls	r2, r2, #4
 2062 0232 02F4FE62 		and	r2, r2, #2032
 2063              	.LVL302:
 116:ROSSerial/ros/msg.h ****     {
 2064              		.loc 5 116 0
 2065 0236 52EA1612 		orrs	r2, r2, r6, lsr #4
 2066              	.LVL303:
 2067 023a D3D0     		beq	.L94
 118:ROSSerial/ros/msg.h ****     }
 2068              		.loc 5 118 0
 2069 023c A2F56072 		sub	r2, r2, #896
 2070              	.LVL304:
 2071 0240 43EAC253 		orr	r3, r3, r2, lsl #23
 2072 0244 104A     		ldr	r2, .L112+4
 2073              	.LVL305:
 2074 0246 5363     		str	r3, [r2, #52]
 2075              	.LVL306:
 2076 0248 CCE7     		b	.L94
 2077              	.LVL307:
 2078              	.L93:
 2079              	.LBE207:
 2080              	.LBE208:
 2081              	.LBE209:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 53


 135:ROSSerial/sensor_msgs/JointState.h ****       effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 2082              		.loc 2 135 0
 2083 024a 2E5D     		ldrb	r6, [r5, r4]	@ zero_extendqisi2
 2084              	.LVL308:
 136:ROSSerial/sensor_msgs/JointState.h ****       effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 2085              		.loc 2 136 0
 2086 024c 631C     		adds	r3, r4, #1
 2087 024e EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 2088 0250 46EA0326 		orr	r6, r6, r3, lsl #8
 2089              	.LVL309:
 137:ROSSerial/sensor_msgs/JointState.h ****       effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 2090              		.loc 2 137 0
 2091 0254 A31C     		adds	r3, r4, #2
 2092 0256 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 2093 0258 46EA0346 		orr	r6, r6, r3, lsl #16
 2094              	.LVL310:
 138:ROSSerial/sensor_msgs/JointState.h ****       offset += sizeof(this->effort_length);
 2095              		.loc 2 138 0
 2096 025c E31C     		adds	r3, r4, #3
 2097 025e EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 2098 0260 46EA0366 		orr	r6, r6, r3, lsl #24
 2099              	.LVL311:
 139:ROSSerial/sensor_msgs/JointState.h ****       if(effort_lengthT > effort_length)
 2100              		.loc 2 139 0
 2101 0264 0434     		adds	r4, r4, #4
 2102              	.LVL312:
 140:ROSSerial/sensor_msgs/JointState.h ****         this->effort = (float*)realloc(this->effort, effort_lengthT * sizeof(float));
 2103              		.loc 2 140 0
 2104 0266 084B     		ldr	r3, .L112+4
 2105 0268 DB6B     		ldr	r3, [r3, #60]
 2106 026a 9E42     		cmp	r6, r3
 2107 026c 03D8     		bhi	.L110
 2108              	.LVL313:
 2109              	.L96:
 142:ROSSerial/sensor_msgs/JointState.h ****       for( uint32_t i = 0; i < effort_length; i++){
 2110              		.loc 2 142 0
 2111 026e 064B     		ldr	r3, .L112+4
 2112 0270 DE63     		str	r6, [r3, #60]
 2113              	.LVL314:
 2114              	.LBB210:
 143:ROSSerial/sensor_msgs/JointState.h ****       offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_effort));
 2115              		.loc 2 143 0
 2116 0272 0020     		movs	r0, #0
 2117 0274 17E0     		b	.L99
 2118              	.LVL315:
 2119              	.L110:
 2120              	.LBE210:
 141:ROSSerial/sensor_msgs/JointState.h ****       effort_length = effort_lengthT;
 2121              		.loc 2 141 0
 2122 0276 044F     		ldr	r7, .L112+4
 2123 0278 B100     		lsls	r1, r6, #2
 2124 027a 786C     		ldr	r0, [r7, #68]
 2125              	.LVL316:
 2126 027c FFF7FEFF 		bl	realloc
 2127              	.LVL317:
 2128 0280 7864     		str	r0, [r7, #68]
 2129 0282 F4E7     		b	.L96
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 54


 2130              	.L113:
 2131              		.align	2
 2132              	.L112:
 2133 0284 00000000 		.word	.LANCHOR1
 2134 0288 00000000 		.word	.LANCHOR0
 2135              	.LVL318:
 2136              	.L98:
 2137              	.LBB215:
 2138              	.LBB211:
 2139              	.LBB212:
 122:ROSSerial/ros/msg.h **** 
 2140              		.loc 5 122 0
 2141 028c CB79     		ldrb	r3, [r1, #7]	@ zero_extendqisi2
 2142 028e 1B06     		lsls	r3, r3, #24
 2143 0290 03F00043 		and	r3, r3, #-2147483648
 2144 0294 5149     		ldr	r1, .L114
 2145              	.LVL319:
 2146 0296 0A6C     		ldr	r2, [r1, #64]
 2147 0298 1343     		orrs	r3, r3, r2
 2148 029a 0B64     		str	r3, [r1, #64]
 2149              	.LVL320:
 2150              	.LBE212:
 2151              	.LBE211:
 144:ROSSerial/sensor_msgs/JointState.h ****         memcpy( &(this->effort[i]), &(this->st_effort), sizeof(float));
 2152              		.loc 2 144 0
 2153 029c 0834     		adds	r4, r4, #8
 2154              	.LVL321:
 145:ROSSerial/sensor_msgs/JointState.h ****       }
 2155              		.loc 2 145 0
 2156 029e 4A6C     		ldr	r2, [r1, #68]
 2157 02a0 42F82030 		str	r3, [r2, r0, lsl #2]	@ unaligned
 143:ROSSerial/sensor_msgs/JointState.h ****       offset += deserializeAvrFloat64(inbuffer + offset, &(this->st_effort));
 2158              		.loc 2 143 0
 2159 02a4 0130     		adds	r0, r0, #1
 2160              	.LVL322:
 2161              	.L99:
 2162 02a6 4D4B     		ldr	r3, .L114
 2163 02a8 DB6B     		ldr	r3, [r3, #60]
 2164 02aa 8342     		cmp	r3, r0
 2165 02ac 21D9     		bls	.L105
 144:ROSSerial/sensor_msgs/JointState.h ****         memcpy( &(this->effort[i]), &(this->st_effort), sizeof(float));
 2166              		.loc 2 144 0
 2167 02ae 2919     		adds	r1, r5, r4
 2168              	.LVL323:
 2169              	.LBB214:
 2170              	.LBB213:
 108:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 2171              		.loc 5 108 0
 2172 02b0 CB78     		ldrb	r3, [r1, #3]	@ zero_extendqisi2
 2173 02b2 5B09     		lsrs	r3, r3, #5
 2174 02b4 494E     		ldr	r6, .L114
 2175 02b6 3364     		str	r3, [r6, #64]
 2176              	.LVL324:
 109:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 2177              		.loc 5 109 0
 2178 02b8 0A79     		ldrb	r2, [r1, #4]	@ zero_extendqisi2
 2179 02ba 43EAC203 		orr	r3, r3, r2, lsl #3
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 55


 2180 02be 3364     		str	r3, [r6, #64]
 2181              	.LVL325:
 110:ROSSerial/ros/msg.h ****     *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 2182              		.loc 5 110 0
 2183 02c0 4A79     		ldrb	r2, [r1, #5]	@ zero_extendqisi2
 2184 02c2 43EAC223 		orr	r3, r3, r2, lsl #11
 2185 02c6 3364     		str	r3, [r6, #64]
 111:ROSSerial/ros/msg.h **** 
 2186              		.loc 5 111 0
 2187 02c8 8A79     		ldrb	r2, [r1, #6]	@ zero_extendqisi2
 2188 02ca D204     		lsls	r2, r2, #19
 2189 02cc 02F4F002 		and	r2, r2, #7864320
 2190 02d0 1343     		orrs	r3, r3, r2
 2191 02d2 3364     		str	r3, [r6, #64]
 2192              	.LVL326:
 114:ROSSerial/ros/msg.h ****     exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 2193              		.loc 5 114 0
 2194 02d4 8E79     		ldrb	r6, [r1, #6]	@ zero_extendqisi2
 2195              	.LVL327:
 115:ROSSerial/ros/msg.h ****     if (exp != 0)
 2196              		.loc 5 115 0
 2197 02d6 CA79     		ldrb	r2, [r1, #7]	@ zero_extendqisi2
 2198 02d8 1201     		lsls	r2, r2, #4
 2199 02da 02F4FE62 		and	r2, r2, #2032
 2200              	.LVL328:
 116:ROSSerial/ros/msg.h ****     {
 2201              		.loc 5 116 0
 2202 02de 52EA1612 		orrs	r2, r2, r6, lsr #4
 2203              	.LVL329:
 2204 02e2 D3D0     		beq	.L98
 118:ROSSerial/ros/msg.h ****     }
 2205              		.loc 5 118 0
 2206 02e4 A2F56072 		sub	r2, r2, #896
 2207              	.LVL330:
 2208 02e8 43EAC253 		orr	r3, r3, r2, lsl #23
 2209 02ec 3B4A     		ldr	r2, .L114
 2210              	.LVL331:
 2211 02ee 1364     		str	r3, [r2, #64]
 2212              	.LVL332:
 2213 02f0 CCE7     		b	.L98
 2214              	.LVL333:
 2215              	.L105:
 2216              	.LBE213:
 2217              	.LBE214:
 2218              	.LBE215:
 2219              	.LBE186:
 2220              	.LBE185:
 2221              	.LBB216:
  41:./Src/ROS_subscribe.cpp ****   {
 2222              		.loc 3 41 0
 2223 02f2 0024     		movs	r4, #0
 2224              	.LVL334:
 2225 02f4 1AE0     		b	.L97
 2226              	.LVL335:
 2227              	.L101:
  51:./Src/ROS_subscribe.cpp ****     }
 2228              		.loc 3 51 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 56


 2229 02f6 04EB8403 		add	r3, r4, r4, lsl #2
 2230 02fa DA00     		lsls	r2, r3, #3
 2231 02fc 384B     		ldr	r3, .L114+4
 2232 02fe 1344     		add	r3, r3, r2
 2233 0300 5B68     		ldr	r3, [r3, #4]
 2234 0302 5B42     		negs	r3, r3
 2235 0304 374A     		ldr	r2, .L114+8
 2236 0306 42F82430 		str	r3, [r2, r4, lsl #2]
 2237 030a 3CE0     		b	.L102
 2238              	.L111:
  55:./Src/ROS_subscribe.cpp ****     }
 2239              		.loc 3 55 0
 2240 030c 3420     		movs	r0, #52
 2241 030e 364B     		ldr	r3, .L114+12
 2242 0310 00FB0430 		mla	r0, r0, r4, r3
 2243 0314 FFF7FEFF 		bl	pid_reset
 2244              	.LVL336:
 2245 0318 3CE0     		b	.L103
 2246              	.L104:
  62:./Src/ROS_subscribe.cpp ****     //printf("%lu: wheels_cmd_cb tickTarget=%ld, dir=%d\n",wheelInputAt,ticksTarget[i],motionDirect
 2247              		.loc 3 62 0 discriminator 3
 2248 031a 304B     		ldr	r3, .L114
 2249 031c 9B6B     		ldr	r3, [r3, #56]
 2250 031e 1D44     		add	r5, r5, r3
 2251 0320 2A68     		ldr	r2, [r5]	@ float
 2252 0322 324B     		ldr	r3, .L114+16
 2253 0324 03EB8403 		add	r3, r3, r4, lsl #2
 2254 0328 1A60     		str	r2, [r3]	@ float
  41:./Src/ROS_subscribe.cpp ****   {
 2255              		.loc 3 41 0 discriminator 3
 2256 032a 0134     		adds	r4, r4, #1
 2257              	.LVL337:
 2258              	.L97:
  41:./Src/ROS_subscribe.cpp ****   {
 2259              		.loc 3 41 0 is_stmt 0 discriminator 1
 2260 032c 2B4B     		ldr	r3, .L114
 2261 032e 9B69     		ldr	r3, [r3, #24]
 2262 0330 A342     		cmp	r3, r4
 2263 0332 51D9     		bls	.L78
  41:./Src/ROS_subscribe.cpp ****   {
 2264              		.loc 3 41 0 discriminator 2
 2265 0334 012C     		cmp	r4, #1
 2266 0336 4FDC     		bgt	.L78
  43:./Src/ROS_subscribe.cpp ****     //
 2267              		.loc 3 43 0 is_stmt 1
 2268 0338 284B     		ldr	r3, .L114
 2269 033a D96A     		ldr	r1, [r3, #44]
 2270 033c A500     		lsls	r5, r4, #2
 2271 033e 2944     		add	r1, r1, r5
 2272 0340 D1ED007A 		vldr.32	s15, [r1]
 2273 0344 FDEEE77A 		vcvt.s32.f32	s15, s15
 2274 0348 2A46     		mov	r2, r5
 2275 034a 2244     		add	r2, r2, r4
 2276 034c D000     		lsls	r0, r2, #3
 2277 034e 244B     		ldr	r3, .L114+4
 2278 0350 0344     		add	r3, r3, r0
 2279 0352 5A69     		ldr	r2, [r3, #20]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 57


 2280 0354 17EE900A 		vmov	r0, s15	@ int
 2281 0358 1044     		add	r0, r0, r2
 2282 035a 0246     		mov	r2, r0
 2283 035c 2448     		ldr	r0, .L114+20
 2284 035e 40F82420 		str	r2, [r0, r4, lsl #2]
  45:./Src/ROS_subscribe.cpp ****     {
 2285              		.loc 3 45 0
 2286 0362 5868     		ldr	r0, [r3, #4]
 2287 0364 00FB02F2 		mul	r2, r0, r2
 2288 0368 5869     		ldr	r0, [r3, #20]
 2289 036a 5B68     		ldr	r3, [r3, #4]
 2290 036c 03FB00F3 		mul	r3, r3, r0
 2291 0370 9A42     		cmp	r2, r3
 2292 0372 C0DB     		blt	.L101
  47:./Src/ROS_subscribe.cpp ****     }
 2293              		.loc 3 47 0
 2294 0374 04EB8403 		add	r3, r4, r4, lsl #2
 2295 0378 DA00     		lsls	r2, r3, #3
 2296 037a 194B     		ldr	r3, .L114+4
 2297 037c 1344     		add	r3, r3, r2
 2298 037e 5A68     		ldr	r2, [r3, #4]
 2299 0380 184B     		ldr	r3, .L114+8
 2300 0382 43F82420 		str	r2, [r3, r4, lsl #2]
 2301              	.L102:
  53:./Src/ROS_subscribe.cpp ****     {
 2302              		.loc 3 53 0
 2303 0386 D1ED007A 		vldr.32	s15, [r1]
 2304 038a F5EE407A 		vcmp.f32	s15, #0
 2305 038e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 2306 0392 BBD1     		bne	.L111
 2307              	.L103:
  58:./Src/ROS_subscribe.cpp ****     {
 2308              		.loc 3 58 0
 2309 0394 04EB8403 		add	r3, r4, r4, lsl #2
 2310 0398 DA00     		lsls	r2, r3, #3
 2311 039a 114B     		ldr	r3, .L114+4
 2312 039c 1344     		add	r3, r3, r2
 2313 039e D3ED047A 		vldr.32	s15, [r3, #16]
 2314 03a2 F5EE407A 		vcmp.f32	s15, #0
 2315 03a6 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 2316 03aa B6D0     		beq	.L104
  58:./Src/ROS_subscribe.cpp ****     {
 2317              		.loc 3 58 0 is_stmt 0 discriminator 1
 2318 03ac 0B4B     		ldr	r3, .L114
 2319 03ae 9B6B     		ldr	r3, [r3, #56]
 2320 03b0 2B44     		add	r3, r3, r5
 2321 03b2 93ED007A 		vldr.32	s14, [r3]
 2322 03b6 0D4B     		ldr	r3, .L114+16
 2323 03b8 03EB8403 		add	r3, r3, r4, lsl #2
 2324 03bc D3ED007A 		vldr.32	s15, [r3]
 2325 03c0 B4EE677A 		vcmp.f32	s14, s15
 2326 03c4 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 2327 03c8 A7D0     		beq	.L104
  60:./Src/ROS_subscribe.cpp ****     }
 2328              		.loc 3 60 0 is_stmt 1
 2329 03ca 3420     		movs	r0, #52
 2330 03cc 094B     		ldr	r3, .L114+24
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 58


 2331 03ce 00FB0430 		mla	r0, r0, r4, r3
 2332 03d2 FFF7FEFF 		bl	pid_reset
 2333              	.LVL338:
 2334 03d6 A0E7     		b	.L104
 2335              	.L78:
 2336              	.LBE216:
  65:./Src/ROS_subscribe.cpp **** 
 2337              		.loc 3 65 0
 2338 03d8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2339              	.LVL339:
 2340              	.L115:
 2341 03da 00BF     		.align	2
 2342              	.L114:
 2343 03dc 00000000 		.word	.LANCHOR0
 2344 03e0 00000000 		.word	wheel_posn
 2345 03e4 00000000 		.word	.LANCHOR3
 2346 03e8 00000000 		.word	PositionPid
 2347 03ec 00000000 		.word	.LANCHOR4
 2348 03f0 00000000 		.word	.LANCHOR2
 2349 03f4 00000000 		.word	SpeedPid
 2350              		.cfi_endproc
 2351              	.LFE491:
 2352              		.fnend
 2354              		.section	.text.wheels_pwm_set,"ax",%progbits
 2355              		.align	1
 2356              		.global	wheels_pwm_set
 2357              		.syntax unified
 2358              		.thumb
 2359              		.thumb_func
 2360              		.fpu fpv4-sp-d16
 2362              	wheels_pwm_set:
 2363              		.fnstart
 2364              	.LFB492:
  68:./Src/ROS_subscribe.cpp ****   uint32_t now = HAL_GetTick();
 2365              		.loc 3 68 0
 2366              		.cfi_startproc
 2367              		@ args = 0, pretend = 0, frame = 0
 2368              		@ frame_needed = 0, uses_anonymous_args = 0
 2369 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2370              		.save {r4, r5, r6, r7, lr}
 2371              	.LCFI6:
 2372              		.cfi_def_cfa_offset 20
 2373              		.cfi_offset 4, -20
 2374              		.cfi_offset 5, -16
 2375              		.cfi_offset 6, -12
 2376              		.cfi_offset 7, -8
 2377              		.cfi_offset 14, -4
 2378              		.pad #20
 2379 0002 85B0     		sub	sp, sp, #20
 2380              	.LCFI7:
 2381              		.cfi_def_cfa_offset 40
  69:./Src/ROS_subscribe.cpp **** 
 2382              		.loc 3 69 0
 2383 0004 FFF7FEFF 		bl	HAL_GetTick
 2384              	.LVL340:
 2385 0008 0546     		mov	r5, r0
 2386              	.LVL341:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 59


 2387              	.LBB217:
  72:./Src/ROS_subscribe.cpp ****   {
 2388              		.loc 3 72 0
 2389 000a 8C4B     		ldr	r3, .L140
 2390 000c 1B68     		ldr	r3, [r3]
 2391 000e C21A     		subs	r2, r0, r3
 2392 0010 B2F5FA6F 		cmp	r2, #2000
 2393 0014 21D9     		bls	.L117
 2394              	.LBB218:
  74:./Src/ROS_subscribe.cpp ****     {
 2395              		.loc 3 74 0
 2396 0016 0024     		movs	r4, #0
 2397 0018 06E0     		b	.L120
 2398              	.LVL342:
 2399              	.L119:
  80:./Src/ROS_subscribe.cpp **** 	    wheelInputAt = 0; //reset clock;
 2400              		.loc 3 80 0 discriminator 2
 2401 001a 0023     		movs	r3, #0
 2402 001c 884A     		ldr	r2, .L140+4
 2403 001e 42F82430 		str	r3, [r2, r4, lsl #2]
  81:./Src/ROS_subscribe.cpp ****     }
 2404              		.loc 3 81 0 discriminator 2
 2405 0022 864A     		ldr	r2, .L140
 2406 0024 1360     		str	r3, [r2]
  74:./Src/ROS_subscribe.cpp ****     {
 2407              		.loc 3 74 0 discriminator 2
 2408 0026 0134     		adds	r4, r4, #1
 2409              	.LVL343:
 2410              	.L120:
  74:./Src/ROS_subscribe.cpp ****     {
 2411              		.loc 3 74 0 is_stmt 0 discriminator 1
 2412 0028 012C     		cmp	r4, #1
 2413 002a 00F30581 		bgt	.L116
  76:./Src/ROS_subscribe.cpp ****         printf("%lu:LIMIT reached. set speed to 0 , %lu, %lu for pwms[%d]=%d ticks=%ld\n",
 2414              		.loc 3 76 0 is_stmt 1
 2415 002e 844B     		ldr	r3, .L140+4
 2416 0030 53F82430 		ldr	r3, [r3, r4, lsl #2]
 2417 0034 002B     		cmp	r3, #0
 2418 0036 F0D0     		beq	.L119
  77:./Src/ROS_subscribe.cpp ****             now, wheelInputAt, (now - wheelInputAt), i, pwms[i], wheel_posn[i].ticks);
 2419              		.loc 3 77 0
 2420 0038 804A     		ldr	r2, .L140
 2421 003a 1268     		ldr	r2, [r2]
  78:./Src/ROS_subscribe.cpp ****       }
 2422              		.loc 3 78 0
 2423 003c 04EB8401 		add	r1, r4, r4, lsl #2
 2424 0040 C800     		lsls	r0, r1, #3
 2425 0042 8049     		ldr	r1, .L140+8
 2426 0044 0144     		add	r1, r1, r0
 2427 0046 4969     		ldr	r1, [r1, #20]
  77:./Src/ROS_subscribe.cpp ****             now, wheelInputAt, (now - wheelInputAt), i, pwms[i], wheel_posn[i].ticks);
 2428              		.loc 3 77 0
 2429 0048 0291     		str	r1, [sp, #8]
 2430 004a 0193     		str	r3, [sp, #4]
 2431 004c 0094     		str	r4, [sp]
 2432 004e AB1A     		subs	r3, r5, r2
 2433 0050 2946     		mov	r1, r5
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 60


 2434 0052 7D48     		ldr	r0, .L140+12
 2435 0054 FFF7FEFF 		bl	printf
 2436              	.LVL344:
 2437 0058 DFE7     		b	.L119
 2438              	.LVL345:
 2439              	.L117:
 2440              	.LBE218:
 2441              	.LBB219:
  85:./Src/ROS_subscribe.cpp ****   {
 2442              		.loc 3 85 0
 2443 005a 002B     		cmp	r3, #0
 2444 005c 00F0EC80 		beq	.L116
 2445              	.LBB220:
  88:./Src/ROS_subscribe.cpp ****     {
 2446              		.loc 3 88 0
 2447 0060 0024     		movs	r4, #0
 2448 0062 26E0     		b	.L132
 2449              	.LVL346:
 2450              	.L121:
 2451              	.LBB221:
 2452              	.LBB222:
 100:./Src/ROS_subscribe.cpp ****       {
 2453              		.loc 3 100 0
 2454 0064 F5EE407A 		vcmp.f32	s15, #0
 2455 0068 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 2456 006c 4BD1     		bne	.L138
 2457              	.LBB223:
 118:./Src/ROS_subscribe.cpp ****       {
 2458              		.loc 3 118 0
 2459 006e 774B     		ldr	r3, .L140+16
 2460 0070 9B6B     		ldr	r3, [r3, #56]
 2461 0072 3344     		add	r3, r3, r6
 2462 0074 D3ED007A 		vldr.32	s15, [r3]
 2463 0078 F5EE407A 		vcmp.f32	s15, #0
 2464 007c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 2465 0080 0BD0     		beq	.L125
 118:./Src/ROS_subscribe.cpp ****       {
 2466              		.loc 3 118 0 is_stmt 0 discriminator 1
 2467 0082 04EB8403 		add	r3, r4, r4, lsl #2
 2468 0086 DA00     		lsls	r2, r3, #3
 2469 0088 6E4B     		ldr	r3, .L140+8
 2470 008a 1344     		add	r3, r3, r2
 2471 008c 93ED047A 		vldr.32	s14, [r3, #16]
 2472 0090 F4EE477A 		vcmp.f32	s15, s14
 2473 0094 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 2474 0098 73D1     		bne	.L126
 2475              	.L125:
 133:./Src/ROS_subscribe.cpp ****       {
 2476              		.loc 3 133 0 is_stmt 1
 2477 009a 6C4B     		ldr	r3, .L140+16
 2478 009c 5B6C     		ldr	r3, [r3, #68]
 2479 009e 1E44     		add	r6, r6, r3
 2480 00a0 D6ED007A 		vldr.32	s15, [r6]
 2481 00a4 F5EE407A 		vcmp.f32	s15, #0
 2482 00a8 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 2483 00ac 40F09F80 		bne	.L127
 2484              	.L122:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 61


 2485              	.LBE223:
 2486              	.LBE222:
 2487              	.LBE221:
  88:./Src/ROS_subscribe.cpp ****     {
 2488              		.loc 3 88 0 discriminator 3
 2489 00b0 0134     		adds	r4, r4, #1
 2490              	.LVL347:
 2491              	.L132:
  88:./Src/ROS_subscribe.cpp ****     {
 2492              		.loc 3 88 0 is_stmt 0 discriminator 1
 2493 00b2 664B     		ldr	r3, .L140+16
 2494 00b4 9B69     		ldr	r3, [r3, #24]
 2495 00b6 A342     		cmp	r3, r4
 2496 00b8 40F2BE80 		bls	.L116
  88:./Src/ROS_subscribe.cpp ****     {
 2497              		.loc 3 88 0 discriminator 2
 2498 00bc 012C     		cmp	r4, #1
 2499 00be 00F3BB80 		bgt	.L116
 2500              	.LBB231:
  91:./Src/ROS_subscribe.cpp ****         ticksTarget[i]*motionDirection[i] <= wheel_posn[i].ticks*motionDirection[i])
 2501              		.loc 3 91 0 is_stmt 1
 2502 00c2 624B     		ldr	r3, .L140+16
 2503 00c4 DB6A     		ldr	r3, [r3, #44]
 2504 00c6 A600     		lsls	r6, r4, #2
 2505 00c8 3344     		add	r3, r3, r6
 2506 00ca D3ED007A 		vldr.32	s15, [r3]
 2507 00ce F5EE407A 		vcmp.f32	s15, #0
 2508 00d2 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 2509 00d6 C5D0     		beq	.L121
  92:./Src/ROS_subscribe.cpp ****       {
 2510              		.loc 3 92 0 discriminator 1
 2511 00d8 5D4B     		ldr	r3, .L140+20
 2512 00da 53F82420 		ldr	r2, [r3, r4, lsl #2]
 2513 00de 5D4B     		ldr	r3, .L140+24
 2514 00e0 53F82400 		ldr	r0, [r3, r4, lsl #2]
 2515 00e4 00FB02F2 		mul	r2, r0, r2
 2516 00e8 04EB8401 		add	r1, r4, r4, lsl #2
 2517 00ec CB00     		lsls	r3, r1, #3
 2518 00ee 5549     		ldr	r1, .L140+8
 2519 00f0 1944     		add	r1, r1, r3
 2520 00f2 4B69     		ldr	r3, [r1, #20]
 2521 00f4 03FB00F3 		mul	r3, r3, r0
  91:./Src/ROS_subscribe.cpp ****         ticksTarget[i]*motionDirection[i] <= wheel_posn[i].ticks*motionDirection[i])
 2522              		.loc 3 91 0 discriminator 1
 2523 00f8 9A42     		cmp	r2, r3
 2524 00fa B3DC     		bgt	.L121
  98:./Src/ROS_subscribe.cpp ****       }
 2525              		.loc 3 98 0
 2526 00fc 504B     		ldr	r3, .L140+4
 2527 00fe 0022     		movs	r2, #0
 2528 0100 43F82420 		str	r2, [r3, r4, lsl #2]
 2529 0104 D4E7     		b	.L122
 2530              	.L138:
 2531              	.LBB230:
 2532              	.LBB227:
 102:./Src/ROS_subscribe.cpp ****           // Read process feedback
 2533              		.loc 3 102 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 62


 2534 0106 3426     		movs	r6, #52
 2535 0108 534B     		ldr	r3, .L140+28
 2536 010a 06FB0436 		mla	r6, r6, r4, r3
 2537 010e 3046     		mov	r0, r6
 2538 0110 FFF7FEFF 		bl	pid_need_compute
 2539              	.LVL348:
 2540 0114 0028     		cmp	r0, #0
 2541 0116 CBD0     		beq	.L122
 2542              	.LBB228:
 104:./Src/ROS_subscribe.cpp ****           PositionPidFloats[i].in = wheel_posn[i].ticks;
 2543              		.loc 3 104 0
 2544 0118 4D4B     		ldr	r3, .L140+20
 2545 011a 53F82430 		ldr	r3, [r3, r4, lsl #2]
 2546 011e 07EE903A 		vmov	s15, r3	@ int
 2547 0122 4E4F     		ldr	r7, .L140+32
 2548 0124 07EB0417 		add	r7, r7, r4, lsl #4
 2549 0128 F8EEE77A 		vcvt.f32.s32	s15, s15
 2550 012c C7ED017A 		vstr.32	s15, [r7, #4]
 105:./Src/ROS_subscribe.cpp ****           // Compute new PID output value
 2551              		.loc 3 105 0
 2552 0130 04EB8403 		add	r3, r4, r4, lsl #2
 2553 0134 DA00     		lsls	r2, r3, #3
 2554 0136 434B     		ldr	r3, .L140+8
 2555 0138 1344     		add	r3, r3, r2
 2556 013a D3ED057A 		vldr.32	s15, [r3, #20]	@ int
 2557 013e F8EEE77A 		vcvt.f32.s32	s15, s15
 2558 0142 C7ED007A 		vstr.32	s15, [r7]
 107:./Src/ROS_subscribe.cpp ****           //Change actuator value
 2559              		.loc 3 107 0
 2560 0146 3046     		mov	r0, r6
 2561 0148 FFF7FEFF 		bl	pid_compute
 2562              	.LVL349:
 109:./Src/ROS_subscribe.cpp ****           pwm = CLAMP(pwm, -PWM_LIMIT, PWM_LIMIT);
 2563              		.loc 3 109 0
 2564 014c D7ED027A 		vldr.32	s15, [r7, #8]
 2565 0150 FDEEE77A 		vcvt.s32.f32	s15, s15
 2566 0154 17EE903A 		vmov	r3, s15	@ int
 2567              	.LVL350:
 110:./Src/ROS_subscribe.cpp ****           pwms[i] = pwm*wheel_posn[i].direction; 
 2568              		.loc 3 110 0
 2569 0158 642B     		cmp	r3, #100
 2570 015a 05DC     		bgt	.L133
 110:./Src/ROS_subscribe.cpp ****           pwms[i] = pwm*wheel_posn[i].direction; 
 2571              		.loc 3 110 0 is_stmt 0 discriminator 1
 2572 015c 6FF06302 		mvn	r2, #99
 2573 0160 9342     		cmp	r3, r2
 2574 0162 B8BF     		it	lt
 2575 0164 1346     		movlt	r3, r2
 2576              	.LVL351:
 2577 0166 00E0     		b	.L124
 2578              	.LVL352:
 2579              	.L133:
 110:./Src/ROS_subscribe.cpp ****           pwms[i] = pwm*wheel_posn[i].direction; 
 2580              		.loc 3 110 0
 2581 0168 6423     		movs	r3, #100
 2582              	.LVL353:
 2583              	.L124:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 63


 111:./Src/ROS_subscribe.cpp **** 
 2584              		.loc 3 111 0 is_stmt 1 discriminator 4
 2585 016a 04EB8402 		add	r2, r4, r4, lsl #2
 2586 016e D100     		lsls	r1, r2, #3
 2587 0170 344A     		ldr	r2, .L140+8
 2588 0172 0A44     		add	r2, r2, r1
 2589 0174 5268     		ldr	r2, [r2, #4]
 2590 0176 03FB02F3 		mul	r3, r3, r2
 2591              	.LVL354:
 2592 017a 314A     		ldr	r2, .L140+4
 2593 017c 42F82430 		str	r3, [r2, r4, lsl #2]
 2594              	.LBE228:
 2595 0180 96E7     		b	.L122
 2596              	.L126:
 2597              	.LBE227:
 2598              	.LBB229:
 2599              	.LBB224:
 120:./Src/ROS_subscribe.cpp ****           // Read process feedback
 2600              		.loc 3 120 0
 2601 0182 3427     		movs	r7, #52
 2602 0184 364B     		ldr	r3, .L140+36
 2603 0186 07FB0437 		mla	r7, r7, r4, r3
 2604 018a 3846     		mov	r0, r7
 2605 018c FFF7FEFF 		bl	pid_need_compute
 2606              	.LVL355:
 2607 0190 0028     		cmp	r0, #0
 2608 0192 8DD0     		beq	.L122
 2609              	.LBB225:
 122:./Src/ROS_subscribe.cpp ****           SpeedPidFloats[i].in = wheel_posn[i].rpm;
 2610              		.loc 3 122 0
 2611 0194 2D4B     		ldr	r3, .L140+16
 2612 0196 9B6B     		ldr	r3, [r3, #56]
 2613 0198 1E44     		add	r6, r6, r3
 2614 019a 3368     		ldr	r3, [r6]	@ float
 2615 019c 314E     		ldr	r6, .L140+40
 2616 019e 06EB0416 		add	r6, r6, r4, lsl #4
 2617 01a2 7360     		str	r3, [r6, #4]	@ float
 123:./Src/ROS_subscribe.cpp ****           // Compute new PID output value
 2618              		.loc 3 123 0
 2619 01a4 04EB8403 		add	r3, r4, r4, lsl #2
 2620 01a8 DA00     		lsls	r2, r3, #3
 2621 01aa 264B     		ldr	r3, .L140+8
 2622 01ac 1344     		add	r3, r3, r2
 2623 01ae 1B69     		ldr	r3, [r3, #16]	@ float
 2624 01b0 3360     		str	r3, [r6]	@ float
 125:./Src/ROS_subscribe.cpp ****           //Change actuator value
 2625              		.loc 3 125 0
 2626 01b2 3846     		mov	r0, r7
 2627 01b4 FFF7FEFF 		bl	pid_compute
 2628              	.LVL356:
 127:./Src/ROS_subscribe.cpp ****           pwm = CLAMP(pwm, -PWM_LIMIT, PWM_LIMIT);
 2629              		.loc 3 127 0
 2630 01b8 D6ED027A 		vldr.32	s15, [r6, #8]
 2631 01bc FDEEE77A 		vcvt.s32.f32	s15, s15
 2632 01c0 17EE903A 		vmov	r3, s15	@ int
 2633              	.LVL357:
 128:./Src/ROS_subscribe.cpp ****           pwms[i] = pwm*wheel_posn[i].direction; 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 64


 2634              		.loc 3 128 0
 2635 01c4 642B     		cmp	r3, #100
 2636 01c6 10DC     		bgt	.L134
 128:./Src/ROS_subscribe.cpp ****           pwms[i] = pwm*wheel_posn[i].direction; 
 2637              		.loc 3 128 0 is_stmt 0 discriminator 1
 2638 01c8 6FF06302 		mvn	r2, #99
 2639 01cc 9342     		cmp	r3, r2
 2640 01ce B8BF     		it	lt
 2641 01d0 1346     		movlt	r3, r2
 2642              	.LVL358:
 2643              	.L128:
 129:./Src/ROS_subscribe.cpp ****         }
 2644              		.loc 3 129 0 is_stmt 1 discriminator 4
 2645 01d2 04EB8402 		add	r2, r4, r4, lsl #2
 2646 01d6 D100     		lsls	r1, r2, #3
 2647 01d8 1A4A     		ldr	r2, .L140+8
 2648 01da 0A44     		add	r2, r2, r1
 2649 01dc 5268     		ldr	r2, [r2, #4]
 2650 01de 03FB02F3 		mul	r3, r3, r2
 2651              	.LVL359:
 2652 01e2 174A     		ldr	r2, .L140+4
 2653 01e4 42F82430 		str	r3, [r2, r4, lsl #2]
 2654              	.LBE225:
 2655 01e8 62E7     		b	.L122
 2656              	.LVL360:
 2657              	.L134:
 2658              	.LBB226:
 128:./Src/ROS_subscribe.cpp ****           pwms[i] = pwm*wheel_posn[i].direction; 
 2659              		.loc 3 128 0
 2660 01ea 6423     		movs	r3, #100
 2661              	.LVL361:
 2662 01ec F1E7     		b	.L128
 2663              	.LVL362:
 2664              	.L127:
 2665              	.LBE226:
 2666              	.LBE224:
 136:./Src/ROS_subscribe.cpp ****         {
 2667              		.loc 3 136 0
 2668 01ee F5EEC07A 		vcmpe.f32	s15, #0
 2669 01f2 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 2670 01f6 12D4     		bmi	.L139
 142:./Src/ROS_subscribe.cpp ****         }
 2671              		.loc 3 142 0
 2672 01f8 FDEEE77A 		vcvt.s32.f32	s15, s15
 2673 01fc 17EE903A 		vmov	r3, s15	@ int
 2674 0200 642B     		cmp	r3, #100
 2675 0202 A8BF     		it	ge
 2676 0204 6423     		movge	r3, #100
 2677 0206 0E4A     		ldr	r2, .L140+4
 2678 0208 42F82430 		str	r3, [r2, r4, lsl #2]
 2679              	.L131:
 144:./Src/ROS_subscribe.cpp ****       }     
 2680              		.loc 3 144 0
 2681 020c 0C4B     		ldr	r3, .L140+4
 2682 020e 53F82430 		ldr	r3, [r3, r4, lsl #2]
 2683 0212 2246     		mov	r2, r4
 2684 0214 2946     		mov	r1, r5
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 65


 2685 0216 1448     		ldr	r0, .L140+44
 2686 0218 FFF7FEFF 		bl	printf
 2687              	.LVL363:
 2688 021c 48E7     		b	.L122
 2689              	.L139:
 138:./Src/ROS_subscribe.cpp ****         }
 2690              		.loc 3 138 0
 2691 021e FDEEE77A 		vcvt.s32.f32	s15, s15
 2692 0222 17EE903A 		vmov	r3, s15	@ int
 2693 0226 6FF06302 		mvn	r2, #99
 2694 022a 9342     		cmp	r3, r2
 2695 022c B8BF     		it	lt
 2696 022e 1346     		movlt	r3, r2
 2697 0230 034A     		ldr	r2, .L140+4
 2698 0232 42F82430 		str	r3, [r2, r4, lsl #2]
 2699 0236 E9E7     		b	.L131
 2700              	.LVL364:
 2701              	.L116:
 2702              	.LBE229:
 2703              	.LBE230:
 2704              	.LBE231:
 2705              	.LBE220:
 2706              	.LBE219:
 2707              	.LBE217:
 148:./Src/ROS_subscribe.cpp **** 
 2708              		.loc 3 148 0
 2709 0238 05B0     		add	sp, sp, #20
 2710              	.LCFI8:
 2711              		.cfi_def_cfa_offset 20
 2712              		@ sp needed
 2713 023a F0BD     		pop	{r4, r5, r6, r7, pc}
 2714              	.LVL365:
 2715              	.L141:
 2716              		.align	2
 2717              	.L140:
 2718 023c 00000000 		.word	.LANCHOR1
 2719 0240 00000000 		.word	pwms
 2720 0244 00000000 		.word	wheel_posn
 2721 0248 00000000 		.word	.LC4
 2722 024c 00000000 		.word	.LANCHOR0
 2723 0250 00000000 		.word	.LANCHOR2
 2724 0254 00000000 		.word	.LANCHOR3
 2725 0258 00000000 		.word	PositionPid
 2726 025c 00000000 		.word	PositionPidFloats
 2727 0260 00000000 		.word	SpeedPid
 2728 0264 00000000 		.word	SpeedPidFloats
 2729 0268 48000000 		.word	.LC5
 2730              		.cfi_endproc
 2731              	.LFE492:
 2732              		.fnend
 2734              		.section	.text._Z21rosSubscribeWheelsCmdPN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi512EEE,
 2735              		.align	1
 2736              		.global	_Z21rosSubscribeWheelsCmdPN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi512EEE
 2737              		.syntax unified
 2738              		.thumb
 2739              		.thumb_func
 2740              		.fpu fpv4-sp-d16
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 66


 2742              	_Z21rosSubscribeWheelsCmdPN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi512EEE:
 2743              		.fnstart
 2744              	.LFB493:
 151:./Src/ROS_subscribe.cpp ****     ros::SubscriberType sub ;
 2745              		.loc 3 151 0
 2746              		.cfi_startproc
 2747              		@ args = 0, pretend = 0, frame = 40
 2748              		@ frame_needed = 0, uses_anonymous_args = 0
 2749              	.LVL366:
 2750 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2751              		.save {r4, r5, r6, r7, lr}
 2752              	.LCFI9:
 2753              		.cfi_def_cfa_offset 20
 2754              		.cfi_offset 4, -20
 2755              		.cfi_offset 5, -16
 2756              		.cfi_offset 6, -12
 2757              		.cfi_offset 7, -8
 2758              		.cfi_offset 14, -4
 2759              		.pad #44
 2760 0002 8BB0     		sub	sp, sp, #44
 2761              	.LCFI10:
 2762              		.cfi_def_cfa_offset 64
 2763 0004 0646     		mov	r6, r0
 154:./Src/ROS_subscribe.cpp **** 	sub.message_type = msg.getType();
 2764              		.loc 3 154 0
 2765 0006 1D4B     		ldr	r3, .L148
 2766 0008 0693     		str	r3, [sp, #24]
 2767              	.LVL367:
 155:./Src/ROS_subscribe.cpp **** 	sub.md5sum = msg.getMD5();
 2768              		.loc 3 155 0
 2769 000a 1D4B     		ldr	r3, .L148+4
 2770 000c 0793     		str	r3, [sp, #28]
 2771              	.LVL368:
 156:./Src/ROS_subscribe.cpp **** 	sub.callback = wheels_cmd_cb;
 2772              		.loc 3 156 0
 2773 000e 1D4B     		ldr	r3, .L148+8
 2774 0010 0893     		str	r3, [sp, #32]
 157:./Src/ROS_subscribe.cpp **** 	
 2775              		.loc 3 157 0
 2776 0012 1D4F     		ldr	r7, .L148+12
 2777 0014 0997     		str	r7, [sp, #36]
 2778              	.LVL369:
 2779 0016 6C46     		mov	r4, sp
 2780 0018 05AD     		add	r5, sp, #20
 2781 001a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2782              	.LVL370:
 2783 001c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2784 001e 2760     		str	r7, [r4]
 2785              	.LVL371:
 2786              	.LBB244:
 2787              	.LBB245:
 2788              		.file 6 "ROSSerial/ros/node_handle.h"
   1:ROSSerial/ros/node_handle.h **** /*
   2:ROSSerial/ros/node_handle.h ****  * Software License Agreement (BSD License)
   3:ROSSerial/ros/node_handle.h ****  *
   4:ROSSerial/ros/node_handle.h ****  * Copyright (c) 2011, Willow Garage, Inc.
   5:ROSSerial/ros/node_handle.h ****  * All rights reserved.
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 67


   6:ROSSerial/ros/node_handle.h ****  *
   7:ROSSerial/ros/node_handle.h ****  * Redistribution and use in source and binary forms, with or without
   8:ROSSerial/ros/node_handle.h ****  * modification, are permitted provided that the following conditions
   9:ROSSerial/ros/node_handle.h ****  * are met:
  10:ROSSerial/ros/node_handle.h ****  *
  11:ROSSerial/ros/node_handle.h ****  *  * Redistributions of source code must retain the above copyright
  12:ROSSerial/ros/node_handle.h ****  *    notice, this list of conditions and the following disclaimer.
  13:ROSSerial/ros/node_handle.h ****  *  * Redistributions in binary form must reproduce the above
  14:ROSSerial/ros/node_handle.h ****  *    copyright notice, this list of conditions and the following
  15:ROSSerial/ros/node_handle.h ****  *    disclaimer in the documentation and/or other materials provided
  16:ROSSerial/ros/node_handle.h ****  *    with the distribution.
  17:ROSSerial/ros/node_handle.h ****  *  * Neither the name of Willow Garage, Inc. nor the names of its
  18:ROSSerial/ros/node_handle.h ****  *    contributors may be used to endorse or promote prducts derived
  19:ROSSerial/ros/node_handle.h ****  *    from this software without specific prior written permission.
  20:ROSSerial/ros/node_handle.h ****  *
  21:ROSSerial/ros/node_handle.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  22:ROSSerial/ros/node_handle.h ****  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  23:ROSSerial/ros/node_handle.h ****  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  24:ROSSerial/ros/node_handle.h ****  * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
  25:ROSSerial/ros/node_handle.h ****  * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  26:ROSSerial/ros/node_handle.h ****  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  27:ROSSerial/ros/node_handle.h ****  * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  28:ROSSerial/ros/node_handle.h ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:ROSSerial/ros/node_handle.h ****  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  30:ROSSerial/ros/node_handle.h ****  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  31:ROSSerial/ros/node_handle.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  32:ROSSerial/ros/node_handle.h ****  * POSSIBILITY OF SUCH DAMAGE.
  33:ROSSerial/ros/node_handle.h ****  */
  34:ROSSerial/ros/node_handle.h **** 
  35:ROSSerial/ros/node_handle.h **** #ifndef ROS_NODE_HANDLE_H_
  36:ROSSerial/ros/node_handle.h **** #define ROS_NODE_HANDLE_H_
  37:ROSSerial/ros/node_handle.h **** 
  38:ROSSerial/ros/node_handle.h **** #include <stdint.h>
  39:ROSSerial/ros/node_handle.h **** 
  40:ROSSerial/ros/node_handle.h **** #include "std_msgs/Time.h"
  41:ROSSerial/ros/node_handle.h **** #include "rosserial_msgs/TopicInfo.h"
  42:ROSSerial/ros/node_handle.h **** #include "rosserial_msgs/Log.h"
  43:ROSSerial/ros/node_handle.h **** #include "rosserial_msgs/RequestParam.h"
  44:ROSSerial/ros/node_handle.h **** #include "std_msgs/ROSString.h"
  45:ROSSerial/ros/node_handle.h **** #include "ros/msg.h"
  46:ROSSerial/ros/node_handle.h **** 
  47:ROSSerial/ros/node_handle.h **** namespace ros
  48:ROSSerial/ros/node_handle.h **** {
  49:ROSSerial/ros/node_handle.h **** 
  50:ROSSerial/ros/node_handle.h **** class NodeHandleBase_
  51:ROSSerial/ros/node_handle.h **** {
  52:ROSSerial/ros/node_handle.h **** public:
  53:ROSSerial/ros/node_handle.h ****   virtual int publish(int id, const Msg* msg) = 0;
  54:ROSSerial/ros/node_handle.h ****   virtual int spinOnce() = 0;
  55:ROSSerial/ros/node_handle.h ****   virtual bool connected() = 0;
  56:ROSSerial/ros/node_handle.h **** };
  57:ROSSerial/ros/node_handle.h **** }
  58:ROSSerial/ros/node_handle.h **** 
  59:ROSSerial/ros/node_handle.h **** #include "ros/publisher.h"
  60:ROSSerial/ros/node_handle.h **** #include "ros/subscriber.h"
  61:ROSSerial/ros/node_handle.h **** #include "ros/service_server.h"
  62:ROSSerial/ros/node_handle.h **** #include "ros/service_client.h"
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 68


  63:ROSSerial/ros/node_handle.h **** #include "std_msgs/UInt16.h"
  64:ROSSerial/ros/node_handle.h **** 
  65:ROSSerial/ros/node_handle.h **** namespace ros
  66:ROSSerial/ros/node_handle.h **** {
  67:ROSSerial/ros/node_handle.h **** 
  68:ROSSerial/ros/node_handle.h **** const int SPIN_OK = 0;
  69:ROSSerial/ros/node_handle.h **** const int SPIN_ERR = -1;
  70:ROSSerial/ros/node_handle.h **** const int SPIN_TIMEOUT = -2;
  71:ROSSerial/ros/node_handle.h **** 
  72:ROSSerial/ros/node_handle.h **** const uint8_t SYNC_SECONDS  = 5;
  73:ROSSerial/ros/node_handle.h **** const uint8_t MODE_FIRST_FF = 0;
  74:ROSSerial/ros/node_handle.h **** 
  75:ROSSerial/ros/node_handle.h **** /*
  76:ROSSerial/ros/node_handle.h ****  * The second sync byte is a protocol version. It's value is 0xff for the first
  77:ROSSerial/ros/node_handle.h ****  * version of the rosserial protocol (used up to hydro), 0xfe for the second version
  78:ROSSerial/ros/node_handle.h ****  * (introduced in hydro), 0xfd for the next, and so on. Its purpose is to enable
  79:ROSSerial/ros/node_handle.h ****  * detection of mismatched protocol versions (e.g. hydro rosserial_python with groovy
  80:ROSSerial/ros/node_handle.h ****  * rosserial_arduino. It must be changed in both this file and in
  81:ROSSerial/ros/node_handle.h ****  * rosserial_python/src/rosserial_python/SerialClient.py
  82:ROSSerial/ros/node_handle.h ****  */
  83:ROSSerial/ros/node_handle.h **** const uint8_t MODE_PROTOCOL_VER   = 1;
  84:ROSSerial/ros/node_handle.h **** const uint8_t PROTOCOL_VER1       = 0xff; // through groovy
  85:ROSSerial/ros/node_handle.h **** const uint8_t PROTOCOL_VER2       = 0xfe; // in hydro
  86:ROSSerial/ros/node_handle.h **** const uint8_t PROTOCOL_VER        = PROTOCOL_VER2;
  87:ROSSerial/ros/node_handle.h **** const uint8_t MODE_SIZE_L         = 2;
  88:ROSSerial/ros/node_handle.h **** const uint8_t MODE_SIZE_H         = 3;
  89:ROSSerial/ros/node_handle.h **** const uint8_t MODE_SIZE_CHECKSUM  = 4;    // checksum for msg size received from size L and H
  90:ROSSerial/ros/node_handle.h **** const uint8_t MODE_TOPIC_L        = 5;    // waiting for topic id
  91:ROSSerial/ros/node_handle.h **** const uint8_t MODE_TOPIC_H        = 6;
  92:ROSSerial/ros/node_handle.h **** const uint8_t MODE_MESSAGE        = 7;
  93:ROSSerial/ros/node_handle.h **** const uint8_t MODE_MSG_CHECKSUM   = 8;    // checksum for msg and topic id
  94:ROSSerial/ros/node_handle.h **** 
  95:ROSSerial/ros/node_handle.h **** 
  96:ROSSerial/ros/node_handle.h **** const uint8_t SERIAL_MSG_TIMEOUT  = 20;   // 20 milliseconds to recieve all of message data
  97:ROSSerial/ros/node_handle.h **** 
  98:ROSSerial/ros/node_handle.h **** using rosserial_msgs::TopicInfo;
  99:ROSSerial/ros/node_handle.h **** 
 100:ROSSerial/ros/node_handle.h **** typedef struct
 101:ROSSerial/ros/node_handle.h **** {
 102:ROSSerial/ros/node_handle.h ****     uint16_t topic_id;
 103:ROSSerial/ros/node_handle.h ****     const char* topic_name;
 104:ROSSerial/ros/node_handle.h ****     const char* message_type;
 105:ROSSerial/ros/node_handle.h ****     const char* md5sum;
 106:ROSSerial/ros/node_handle.h ****     void (*callback)(const Msg& );
 107:ROSSerial/ros/node_handle.h **** } SubscriberType;
 108:ROSSerial/ros/node_handle.h **** 
 109:ROSSerial/ros/node_handle.h **** typedef struct
 110:ROSSerial/ros/node_handle.h **** {
 111:ROSSerial/ros/node_handle.h ****     uint16_t topic_id;
 112:ROSSerial/ros/node_handle.h ****     const char* topic_name;
 113:ROSSerial/ros/node_handle.h ****     const Msg* msg; 
 114:ROSSerial/ros/node_handle.h ****     const char* message_type;
 115:ROSSerial/ros/node_handle.h ****     const char* md5sum;
 116:ROSSerial/ros/node_handle.h **** } PublisherType;
 117:ROSSerial/ros/node_handle.h **** 
 118:ROSSerial/ros/node_handle.h **** /* Node Handle */
 119:ROSSerial/ros/node_handle.h **** template<class Hardware,
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 69


 120:ROSSerial/ros/node_handle.h ****          int MAX_SUBSCRIBERS = 25,
 121:ROSSerial/ros/node_handle.h ****          int MAX_PUBLISHERS = 25,
 122:ROSSerial/ros/node_handle.h ****          int INPUT_SIZE = 512,
 123:ROSSerial/ros/node_handle.h ****          int OUTPUT_SIZE = 512>
 124:ROSSerial/ros/node_handle.h **** class NodeHandle_ : public NodeHandleBase_
 125:ROSSerial/ros/node_handle.h **** {
 126:ROSSerial/ros/node_handle.h **** protected:
 127:ROSSerial/ros/node_handle.h ****   Hardware hardware_;
 128:ROSSerial/ros/node_handle.h **** 
 129:ROSSerial/ros/node_handle.h ****   /* time used for syncing */
 130:ROSSerial/ros/node_handle.h ****   uint32_t rt_time;
 131:ROSSerial/ros/node_handle.h **** 
 132:ROSSerial/ros/node_handle.h ****   /* used for computing current time */
 133:ROSSerial/ros/node_handle.h ****   uint32_t sec_offset, nsec_offset;
 134:ROSSerial/ros/node_handle.h **** 
 135:ROSSerial/ros/node_handle.h ****   /* Spinonce maximum work timeout */
 136:ROSSerial/ros/node_handle.h ****   uint32_t spin_timeout_;
 137:ROSSerial/ros/node_handle.h **** 
 138:ROSSerial/ros/node_handle.h ****   uint8_t message_in[INPUT_SIZE];
 139:ROSSerial/ros/node_handle.h ****   uint8_t message_out[OUTPUT_SIZE];
 140:ROSSerial/ros/node_handle.h **** 
 141:ROSSerial/ros/node_handle.h ****   Publisher * publishers[MAX_PUBLISHERS];
 142:ROSSerial/ros/node_handle.h ****   PublisherType publishers2[MAX_PUBLISHERS];
 143:ROSSerial/ros/node_handle.h ****   Subscriber_ * subscribers[MAX_SUBSCRIBERS];
 144:ROSSerial/ros/node_handle.h ****   SubscriberType subscribers2[MAX_SUBSCRIBERS];
 145:ROSSerial/ros/node_handle.h **** 
 146:ROSSerial/ros/node_handle.h ****   /*
 147:ROSSerial/ros/node_handle.h ****    * Setup Functions
 148:ROSSerial/ros/node_handle.h ****    */
 149:ROSSerial/ros/node_handle.h **** public:
 150:ROSSerial/ros/node_handle.h ****   NodeHandle_() : configured_(false)
 151:ROSSerial/ros/node_handle.h ****   {
 152:ROSSerial/ros/node_handle.h **** 
 153:ROSSerial/ros/node_handle.h ****     for (unsigned int i = 0; i < MAX_PUBLISHERS; i++) {
 154:ROSSerial/ros/node_handle.h ****       publishers[i] = 0;
 155:ROSSerial/ros/node_handle.h ****       publishers2[i].topic_id = 0;
 156:ROSSerial/ros/node_handle.h ****     }
 157:ROSSerial/ros/node_handle.h **** 
 158:ROSSerial/ros/node_handle.h ****     for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++) {
 159:ROSSerial/ros/node_handle.h ****       subscribers[i] = 0;
 160:ROSSerial/ros/node_handle.h ****       subscribers2[i].topic_id = 0;
 161:ROSSerial/ros/node_handle.h ****     }
 162:ROSSerial/ros/node_handle.h **** 
 163:ROSSerial/ros/node_handle.h ****     for (unsigned int i = 0; i < INPUT_SIZE; i++)
 164:ROSSerial/ros/node_handle.h ****       message_in[i] = 0;
 165:ROSSerial/ros/node_handle.h **** 
 166:ROSSerial/ros/node_handle.h ****     for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 167:ROSSerial/ros/node_handle.h ****       message_out[i] = 0;
 168:ROSSerial/ros/node_handle.h **** 
 169:ROSSerial/ros/node_handle.h ****     req_param_resp.ints_length = 0;
 170:ROSSerial/ros/node_handle.h ****     req_param_resp.ints = NULL;
 171:ROSSerial/ros/node_handle.h ****     req_param_resp.floats_length = 0;
 172:ROSSerial/ros/node_handle.h ****     req_param_resp.floats = NULL;
 173:ROSSerial/ros/node_handle.h ****     req_param_resp.ints_length = 0;
 174:ROSSerial/ros/node_handle.h ****     req_param_resp.ints = NULL;
 175:ROSSerial/ros/node_handle.h **** 
 176:ROSSerial/ros/node_handle.h ****     spin_timeout_ = 0;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 70


 177:ROSSerial/ros/node_handle.h ****   }
 178:ROSSerial/ros/node_handle.h **** 
 179:ROSSerial/ros/node_handle.h ****   Hardware* getHardware()
 180:ROSSerial/ros/node_handle.h ****   {
 181:ROSSerial/ros/node_handle.h ****     return &hardware_;
 182:ROSSerial/ros/node_handle.h ****   }
 183:ROSSerial/ros/node_handle.h **** 
 184:ROSSerial/ros/node_handle.h ****   /* Start serial, initialize buffers */
 185:ROSSerial/ros/node_handle.h ****   void initNode()
 186:ROSSerial/ros/node_handle.h ****   {
 187:ROSSerial/ros/node_handle.h ****     hardware_.init();
 188:ROSSerial/ros/node_handle.h ****     mode_ = 0;
 189:ROSSerial/ros/node_handle.h ****     bytes_ = 0;
 190:ROSSerial/ros/node_handle.h ****     index_ = 0;
 191:ROSSerial/ros/node_handle.h ****     topic_ = 0;
 192:ROSSerial/ros/node_handle.h ****     printf("Node init\n");
 193:ROSSerial/ros/node_handle.h ****   };
 194:ROSSerial/ros/node_handle.h **** 
 195:ROSSerial/ros/node_handle.h ****   /* Start a named port, which may be network server IP, initialize buffers */
 196:ROSSerial/ros/node_handle.h ****   void initNode(char *portName)
 197:ROSSerial/ros/node_handle.h ****   {
 198:ROSSerial/ros/node_handle.h ****     hardware_.init(portName);
 199:ROSSerial/ros/node_handle.h ****     mode_ = 0;
 200:ROSSerial/ros/node_handle.h ****     bytes_ = 0;
 201:ROSSerial/ros/node_handle.h ****     index_ = 0;
 202:ROSSerial/ros/node_handle.h ****     topic_ = 0;
 203:ROSSerial/ros/node_handle.h ****   };
 204:ROSSerial/ros/node_handle.h **** 
 205:ROSSerial/ros/node_handle.h ****   /**
 206:ROSSerial/ros/node_handle.h ****    * @brief Sets the maximum time in millisconds that spinOnce() can work.
 207:ROSSerial/ros/node_handle.h ****    * This will not effect the processing of the buffer, as spinOnce processes
 208:ROSSerial/ros/node_handle.h ****    * one byte at a time. It simply sets the maximum time that one call can
 209:ROSSerial/ros/node_handle.h ****    * process for. You can choose to clear the buffer if that is beneficial if
 210:ROSSerial/ros/node_handle.h ****    * SPIN_TIMEOUT is returned from spinOnce().
 211:ROSSerial/ros/node_handle.h ****    * @param timeout The timeout in milliseconds that spinOnce will function.
 212:ROSSerial/ros/node_handle.h ****    */
 213:ROSSerial/ros/node_handle.h ****   void setSpinTimeout(const uint32_t& timeout)
 214:ROSSerial/ros/node_handle.h ****   {
 215:ROSSerial/ros/node_handle.h ****      spin_timeout_ = timeout;
 216:ROSSerial/ros/node_handle.h ****   }
 217:ROSSerial/ros/node_handle.h **** 
 218:ROSSerial/ros/node_handle.h **** protected:
 219:ROSSerial/ros/node_handle.h ****   //State machine variables for spinOnce
 220:ROSSerial/ros/node_handle.h ****   int mode_;
 221:ROSSerial/ros/node_handle.h ****   int bytes_;
 222:ROSSerial/ros/node_handle.h ****   int topic_;
 223:ROSSerial/ros/node_handle.h ****   int index_;
 224:ROSSerial/ros/node_handle.h ****   int checksum_;
 225:ROSSerial/ros/node_handle.h **** 
 226:ROSSerial/ros/node_handle.h ****   bool configured_;
 227:ROSSerial/ros/node_handle.h **** 
 228:ROSSerial/ros/node_handle.h ****   /* used for syncing the time */
 229:ROSSerial/ros/node_handle.h ****   uint32_t last_sync_time;
 230:ROSSerial/ros/node_handle.h ****   uint32_t last_sync_receive_time;
 231:ROSSerial/ros/node_handle.h ****   uint32_t last_msg_timeout_time;
 232:ROSSerial/ros/node_handle.h **** 
 233:ROSSerial/ros/node_handle.h **** public:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 71


 234:ROSSerial/ros/node_handle.h ****   /* This function goes in your loop() function, it handles
 235:ROSSerial/ros/node_handle.h ****    *  serial input and callbacks for subscribers.
 236:ROSSerial/ros/node_handle.h ****    */
 237:ROSSerial/ros/node_handle.h **** 
 238:ROSSerial/ros/node_handle.h ****   virtual int spinOnce() {
 239:ROSSerial/ros/node_handle.h ****     return spinOnce1();
 240:ROSSerial/ros/node_handle.h ****   }
 241:ROSSerial/ros/node_handle.h **** 
 242:ROSSerial/ros/node_handle.h **** //calling spinOnce() directly from spin_task gives stackoverflow
 243:ROSSerial/ros/node_handle.h ****   int spinOnce1()
 244:ROSSerial/ros/node_handle.h ****   {
 245:ROSSerial/ros/node_handle.h ****     static void (*s_CallBack)(char *);
 246:ROSSerial/ros/node_handle.h ****     
 247:ROSSerial/ros/node_handle.h ****     //printf("spinOnce\n");
 248:ROSSerial/ros/node_handle.h ****     /* restart if timed out */
 249:ROSSerial/ros/node_handle.h ****     uint32_t c_time = hardware_.time();
 250:ROSSerial/ros/node_handle.h ****     if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 251:ROSSerial/ros/node_handle.h ****     {
 252:ROSSerial/ros/node_handle.h ****       //printf("spinOnce  setting configured_ false %lu, %lu, %ld\n",c_time, 
 253:ROSSerial/ros/node_handle.h ****       //        last_sync_receive_time, (c_time-last_sync_receive_time));
 254:ROSSerial/ros/node_handle.h ****       configured_ = false;
 255:ROSSerial/ros/node_handle.h ****     }
 256:ROSSerial/ros/node_handle.h **** 
 257:ROSSerial/ros/node_handle.h ****     /* reset if message has timed out */
 258:ROSSerial/ros/node_handle.h ****     if (mode_ != MODE_FIRST_FF)
 259:ROSSerial/ros/node_handle.h ****     {
 260:ROSSerial/ros/node_handle.h ****       if (c_time > last_msg_timeout_time)
 261:ROSSerial/ros/node_handle.h ****       {
 262:ROSSerial/ros/node_handle.h ****         mode_ = MODE_FIRST_FF;
 263:ROSSerial/ros/node_handle.h ****       }
 264:ROSSerial/ros/node_handle.h ****     }
 265:ROSSerial/ros/node_handle.h **** 
 266:ROSSerial/ros/node_handle.h ****     /* while available buffer, read data */
 267:ROSSerial/ros/node_handle.h ****     while (true)
 268:ROSSerial/ros/node_handle.h ****     {
 269:ROSSerial/ros/node_handle.h ****       // If a timeout has been specified, check how long spinOnce has been running.
 270:ROSSerial/ros/node_handle.h ****       if (spin_timeout_ > 0)
 271:ROSSerial/ros/node_handle.h ****       {
 272:ROSSerial/ros/node_handle.h ****         // If the maximum processing timeout has been exceeded, exit with error.
 273:ROSSerial/ros/node_handle.h ****         // The next spinOnce can continue where it left off, or optionally
 274:ROSSerial/ros/node_handle.h ****         // based on the application in use, the hardware buffer could be flushed
 275:ROSSerial/ros/node_handle.h ****         // and start fresh.
 276:ROSSerial/ros/node_handle.h ****         if ((hardware_.time() - c_time) > spin_timeout_)
 277:ROSSerial/ros/node_handle.h ****         {
 278:ROSSerial/ros/node_handle.h ****           // Exit the spin, processing timeout exceeded.
 279:ROSSerial/ros/node_handle.h ****           return SPIN_TIMEOUT;
 280:ROSSerial/ros/node_handle.h ****         }
 281:ROSSerial/ros/node_handle.h ****       }
 282:ROSSerial/ros/node_handle.h ****       int data = hardware_.read();
 283:ROSSerial/ros/node_handle.h ****       if (data < 0)
 284:ROSSerial/ros/node_handle.h ****         break;
 285:ROSSerial/ros/node_handle.h ****       checksum_ += data;
 286:ROSSerial/ros/node_handle.h ****       if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 287:ROSSerial/ros/node_handle.h ****       {
 288:ROSSerial/ros/node_handle.h ****         message_in[index_++] = data;
 289:ROSSerial/ros/node_handle.h ****         bytes_--;
 290:ROSSerial/ros/node_handle.h ****         if (bytes_ == 0)                 /* is message complete? if so, checksum */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 72


 291:ROSSerial/ros/node_handle.h ****           mode_ = MODE_MSG_CHECKSUM;
 292:ROSSerial/ros/node_handle.h ****       }
 293:ROSSerial/ros/node_handle.h ****       else if (mode_ == MODE_FIRST_FF)
 294:ROSSerial/ros/node_handle.h ****       {
 295:ROSSerial/ros/node_handle.h ****         if (data == 0xff)
 296:ROSSerial/ros/node_handle.h ****         {
 297:ROSSerial/ros/node_handle.h ****           mode_++;
 298:ROSSerial/ros/node_handle.h ****           last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 299:ROSSerial/ros/node_handle.h ****         }
 300:ROSSerial/ros/node_handle.h ****         else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 301:ROSSerial/ros/node_handle.h ****         {
 302:ROSSerial/ros/node_handle.h ****           /* We have been stuck in spinOnce too long, return error */
 303:ROSSerial/ros/node_handle.h ****           configured_ = false;
 304:ROSSerial/ros/node_handle.h ****           return SPIN_TIMEOUT;
 305:ROSSerial/ros/node_handle.h ****         }
 306:ROSSerial/ros/node_handle.h ****       }
 307:ROSSerial/ros/node_handle.h ****       else if (mode_ == MODE_PROTOCOL_VER)
 308:ROSSerial/ros/node_handle.h ****       {
 309:ROSSerial/ros/node_handle.h ****         if (data == PROTOCOL_VER)
 310:ROSSerial/ros/node_handle.h ****         {
 311:ROSSerial/ros/node_handle.h ****           mode_++;
 312:ROSSerial/ros/node_handle.h ****         }
 313:ROSSerial/ros/node_handle.h ****         else
 314:ROSSerial/ros/node_handle.h ****         {
 315:ROSSerial/ros/node_handle.h ****           mode_ = MODE_FIRST_FF;
 316:ROSSerial/ros/node_handle.h ****           if (configured_ == false)
 317:ROSSerial/ros/node_handle.h ****             requestSyncTime();  /* send a msg back showing our protocol version */
 318:ROSSerial/ros/node_handle.h ****         }
 319:ROSSerial/ros/node_handle.h ****       }
 320:ROSSerial/ros/node_handle.h ****       else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 321:ROSSerial/ros/node_handle.h ****       {
 322:ROSSerial/ros/node_handle.h ****         bytes_ = data;
 323:ROSSerial/ros/node_handle.h ****         index_ = 0;
 324:ROSSerial/ros/node_handle.h ****         mode_++;
 325:ROSSerial/ros/node_handle.h ****         checksum_ = data;               /* first byte for calculating size checksum */
 326:ROSSerial/ros/node_handle.h ****       }
 327:ROSSerial/ros/node_handle.h ****       else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 328:ROSSerial/ros/node_handle.h ****       {
 329:ROSSerial/ros/node_handle.h ****         bytes_ += data << 8;
 330:ROSSerial/ros/node_handle.h ****         mode_++;
 331:ROSSerial/ros/node_handle.h ****       }
 332:ROSSerial/ros/node_handle.h ****       else if (mode_ == MODE_SIZE_CHECKSUM)
 333:ROSSerial/ros/node_handle.h ****       {
 334:ROSSerial/ros/node_handle.h ****         if ((checksum_ % 256) == 255)
 335:ROSSerial/ros/node_handle.h ****           mode_++;
 336:ROSSerial/ros/node_handle.h ****         else
 337:ROSSerial/ros/node_handle.h ****           mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 338:ROSSerial/ros/node_handle.h ****       }
 339:ROSSerial/ros/node_handle.h ****       else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 340:ROSSerial/ros/node_handle.h ****       {
 341:ROSSerial/ros/node_handle.h ****         topic_ = data;
 342:ROSSerial/ros/node_handle.h ****         mode_++;
 343:ROSSerial/ros/node_handle.h ****         checksum_ = data;               /* first byte included in checksum */
 344:ROSSerial/ros/node_handle.h ****       }
 345:ROSSerial/ros/node_handle.h ****       else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 346:ROSSerial/ros/node_handle.h ****       {
 347:ROSSerial/ros/node_handle.h ****         topic_ += data << 8;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 73


 348:ROSSerial/ros/node_handle.h ****         mode_ = MODE_MESSAGE;
 349:ROSSerial/ros/node_handle.h ****         if (bytes_ == 0)
 350:ROSSerial/ros/node_handle.h ****           mode_ = MODE_MSG_CHECKSUM;
 351:ROSSerial/ros/node_handle.h ****       }
 352:ROSSerial/ros/node_handle.h ****       else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 353:ROSSerial/ros/node_handle.h ****       {
 354:ROSSerial/ros/node_handle.h ****         mode_ = MODE_FIRST_FF;
 355:ROSSerial/ros/node_handle.h ****         if ((checksum_ % 256) == 255)
 356:ROSSerial/ros/node_handle.h ****         {
 357:ROSSerial/ros/node_handle.h ****           if (topic_ == TopicInfo::ID_PUBLISHER)
 358:ROSSerial/ros/node_handle.h ****           {
 359:ROSSerial/ros/node_handle.h ****             requestSyncTime();
 360:ROSSerial/ros/node_handle.h ****             negotiateTopics();
 361:ROSSerial/ros/node_handle.h ****             last_sync_time = c_time;
 362:ROSSerial/ros/node_handle.h ****             last_sync_receive_time = c_time;
 363:ROSSerial/ros/node_handle.h ****             return SPIN_ERR;
 364:ROSSerial/ros/node_handle.h ****           }
 365:ROSSerial/ros/node_handle.h ****           else if (topic_ == TopicInfo::ID_TIME)
 366:ROSSerial/ros/node_handle.h ****           {
 367:ROSSerial/ros/node_handle.h ****             syncTime(message_in);
 368:ROSSerial/ros/node_handle.h ****           }
 369:ROSSerial/ros/node_handle.h ****           else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 370:ROSSerial/ros/node_handle.h ****           {
 371:ROSSerial/ros/node_handle.h ****             req_param_resp.deserialize(message_in);
 372:ROSSerial/ros/node_handle.h ****             param_recieved = true;
 373:ROSSerial/ros/node_handle.h ****           }
 374:ROSSerial/ros/node_handle.h ****           else if (topic_ == TopicInfo::ID_TX_STOP)
 375:ROSSerial/ros/node_handle.h ****           {
 376:ROSSerial/ros/node_handle.h ****             configured_ = false;
 377:ROSSerial/ros/node_handle.h ****           }
 378:ROSSerial/ros/node_handle.h ****           else
 379:ROSSerial/ros/node_handle.h ****           {
 380:ROSSerial/ros/node_handle.h ****             if (subscribers2[topic_ - 100].topic_id != 0) {
 381:ROSSerial/ros/node_handle.h ****               s_CallBack = (void (*)(char*))subscribers2[topic_ - 100].callback;
 382:ROSSerial/ros/node_handle.h ****               //printf("Calling callback with %id\n",subscribers2[topic_ - 100].topic_id);
 383:ROSSerial/ros/node_handle.h ****               s_CallBack(message_in);
 384:ROSSerial/ros/node_handle.h ****             }
 385:ROSSerial/ros/node_handle.h ****           }
 386:ROSSerial/ros/node_handle.h ****         }
 387:ROSSerial/ros/node_handle.h ****       }
 388:ROSSerial/ros/node_handle.h ****     }
 389:ROSSerial/ros/node_handle.h **** 
 390:ROSSerial/ros/node_handle.h ****     /* occasionally sync time */
 391:ROSSerial/ros/node_handle.h ****     if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 392:ROSSerial/ros/node_handle.h ****     {
 393:ROSSerial/ros/node_handle.h ****       //printf("Resetting sync time %lu, %lu, %ld\n",c_time, last_sync_time, (c_time-last_sync_time
 394:ROSSerial/ros/node_handle.h ****       requestSyncTime(); 
 395:ROSSerial/ros/node_handle.h ****       last_sync_time = c_time;
 396:ROSSerial/ros/node_handle.h ****     }
 397:ROSSerial/ros/node_handle.h **** 
 398:ROSSerial/ros/node_handle.h ****     return SPIN_OK;
 399:ROSSerial/ros/node_handle.h ****   }
 400:ROSSerial/ros/node_handle.h **** 
 401:ROSSerial/ros/node_handle.h **** 
 402:ROSSerial/ros/node_handle.h ****   /* Are we connected to the PC? */
 403:ROSSerial/ros/node_handle.h ****   virtual bool connected()
 404:ROSSerial/ros/node_handle.h ****   {
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 74


 405:ROSSerial/ros/node_handle.h ****     return configured_;
 406:ROSSerial/ros/node_handle.h ****   };
 407:ROSSerial/ros/node_handle.h **** 
 408:ROSSerial/ros/node_handle.h ****   /********************************************************************
 409:ROSSerial/ros/node_handle.h ****    * Time functions
 410:ROSSerial/ros/node_handle.h ****    */
 411:ROSSerial/ros/node_handle.h **** 
 412:ROSSerial/ros/node_handle.h ****   void requestSyncTime()
 413:ROSSerial/ros/node_handle.h ****   {
 414:ROSSerial/ros/node_handle.h ****     if(last_sync_receive_time < rt_time)
 415:ROSSerial/ros/node_handle.h ****     {
 416:ROSSerial/ros/node_handle.h ****       //printf("skip requestSyncTime as one is pending %lu\n",hardware_.time());
 417:ROSSerial/ros/node_handle.h ****       return;
 418:ROSSerial/ros/node_handle.h ****     }
 419:ROSSerial/ros/node_handle.h ****     std_msgs::Time t;
 420:ROSSerial/ros/node_handle.h ****     rt_time = hardware_.time();
 421:ROSSerial/ros/node_handle.h ****    // printf("requestSyncTime  rt_time=%lu\n",rt_time);
 422:ROSSerial/ros/node_handle.h ****     publish1(TopicInfo::ID_TIME, &t);
 423:ROSSerial/ros/node_handle.h ****     //printf("end requestSyncTime  rt_time=%lu\n",hardware_.time());
 424:ROSSerial/ros/node_handle.h ****   }
 425:ROSSerial/ros/node_handle.h **** 
 426:ROSSerial/ros/node_handle.h ****   void syncTime(uint8_t * data)
 427:ROSSerial/ros/node_handle.h ****   {
 428:ROSSerial/ros/node_handle.h ****     std_msgs::Time t;
 429:ROSSerial/ros/node_handle.h ****     uint32_t offset = hardware_.time() - rt_time;
 430:ROSSerial/ros/node_handle.h **** 
 431:ROSSerial/ros/node_handle.h ****     t.deserialize(data);
 432:ROSSerial/ros/node_handle.h ****     t.data.sec += offset / 1000;
 433:ROSSerial/ros/node_handle.h ****     t.data.nsec += (offset % 1000) * 1000000UL;
 434:ROSSerial/ros/node_handle.h **** 
 435:ROSSerial/ros/node_handle.h ****     this->setNow(t.data);
 436:ROSSerial/ros/node_handle.h ****     uint32_t c_time = hardware_.time();
 437:ROSSerial/ros/node_handle.h ****     //printf("syncTime c_time=%lu, offset=%ld\n",c_time,offset);
 438:ROSSerial/ros/node_handle.h ****     last_sync_receive_time = c_time;
 439:ROSSerial/ros/node_handle.h ****   }
 440:ROSSerial/ros/node_handle.h **** 
 441:ROSSerial/ros/node_handle.h ****   Time now()
 442:ROSSerial/ros/node_handle.h ****   {
 443:ROSSerial/ros/node_handle.h ****     uint32_t ms = hardware_.time();
 444:ROSSerial/ros/node_handle.h ****     Time current_time;
 445:ROSSerial/ros/node_handle.h ****     current_time.sec = ms / 1000 + sec_offset;
 446:ROSSerial/ros/node_handle.h ****     current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
 447:ROSSerial/ros/node_handle.h ****     normalizeSecNSec(current_time.sec, current_time.nsec);
 448:ROSSerial/ros/node_handle.h ****     return current_time;
 449:ROSSerial/ros/node_handle.h ****   }
 450:ROSSerial/ros/node_handle.h **** 
 451:ROSSerial/ros/node_handle.h ****   void setNow(Time & new_now)
 452:ROSSerial/ros/node_handle.h ****   {
 453:ROSSerial/ros/node_handle.h ****     uint32_t ms = hardware_.time();
 454:ROSSerial/ros/node_handle.h ****     sec_offset = new_now.sec - ms / 1000 - 1;
 455:ROSSerial/ros/node_handle.h ****     nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 456:ROSSerial/ros/node_handle.h ****     normalizeSecNSec(sec_offset, nsec_offset);
 457:ROSSerial/ros/node_handle.h ****   }
 458:ROSSerial/ros/node_handle.h **** 
 459:ROSSerial/ros/node_handle.h ****   /********************************************************************
 460:ROSSerial/ros/node_handle.h ****    * Topic Management
 461:ROSSerial/ros/node_handle.h ****    */
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 75


 462:ROSSerial/ros/node_handle.h **** 
 463:ROSSerial/ros/node_handle.h ****    /* Register a new publisher without C++ template */
 464:ROSSerial/ros/node_handle.h ****   PublisherType* addPublisher(char * topic_name, Msg * msg)
 465:ROSSerial/ros/node_handle.h ****   {
 466:ROSSerial/ros/node_handle.h ****     for (int i = 0; i < MAX_PUBLISHERS; i++)
 467:ROSSerial/ros/node_handle.h ****     {
 468:ROSSerial/ros/node_handle.h ****       if (publishers2[i].topic_id == 0) {// empty slot}
 469:ROSSerial/ros/node_handle.h **** 
 470:ROSSerial/ros/node_handle.h ****         publishers2[i].topic_id = i + 100 + MAX_SUBSCRIBERS;
 471:ROSSerial/ros/node_handle.h ****         publishers2[i].topic_name = topic_name;
 472:ROSSerial/ros/node_handle.h ****         publishers2[i].msg = msg;
 473:ROSSerial/ros/node_handle.h ****         publishers2[i].message_type = msg->getType();
 474:ROSSerial/ros/node_handle.h ****         publishers2[i].md5sum = msg->getMD5();
 475:ROSSerial/ros/node_handle.h **** 
 476:ROSSerial/ros/node_handle.h ****         return &publishers2[i];
 477:ROSSerial/ros/node_handle.h ****       }
 478:ROSSerial/ros/node_handle.h ****     }
 479:ROSSerial/ros/node_handle.h ****     return nullptr;
 480:ROSSerial/ros/node_handle.h ****   }
 481:ROSSerial/ros/node_handle.h **** 
 482:ROSSerial/ros/node_handle.h ****   /* Register a new publisher */
 483:ROSSerial/ros/node_handle.h ****   bool advertise(Publisher & p)
 484:ROSSerial/ros/node_handle.h ****   {
 485:ROSSerial/ros/node_handle.h ****     for (int i = 0; i < MAX_PUBLISHERS; i++)
 486:ROSSerial/ros/node_handle.h ****     {
 487:ROSSerial/ros/node_handle.h ****       if (publishers[i] == 0) // empty slot
 488:ROSSerial/ros/node_handle.h ****       {
 489:ROSSerial/ros/node_handle.h ****         publishers[i] = &p;
 490:ROSSerial/ros/node_handle.h ****         p.id_ = i + 100 + MAX_SUBSCRIBERS;
 491:ROSSerial/ros/node_handle.h ****         p.nh_ = this;
 492:ROSSerial/ros/node_handle.h ****         return true;
 493:ROSSerial/ros/node_handle.h ****       }
 494:ROSSerial/ros/node_handle.h ****     }
 495:ROSSerial/ros/node_handle.h ****     return false;
 496:ROSSerial/ros/node_handle.h ****   }
 497:ROSSerial/ros/node_handle.h **** 
 498:ROSSerial/ros/node_handle.h ****   /* Register a new subscriber */
 499:ROSSerial/ros/node_handle.h ****   template<typename SubscriberT>
 500:ROSSerial/ros/node_handle.h ****   bool subscribe(SubscriberT& s)
 501:ROSSerial/ros/node_handle.h ****   {
 502:ROSSerial/ros/node_handle.h ****     for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 503:ROSSerial/ros/node_handle.h ****     {
 504:ROSSerial/ros/node_handle.h ****       if (subscribers[i] == 0) // empty slot
 505:ROSSerial/ros/node_handle.h ****       {
 506:ROSSerial/ros/node_handle.h ****         subscribers[i] = static_cast<Subscriber_*>(&s);
 507:ROSSerial/ros/node_handle.h ****         s.id_ = i + 100;
 508:ROSSerial/ros/node_handle.h ****         return true;
 509:ROSSerial/ros/node_handle.h ****       }
 510:ROSSerial/ros/node_handle.h ****     }
 511:ROSSerial/ros/node_handle.h ****     return false;
 512:ROSSerial/ros/node_handle.h ****   }
 513:ROSSerial/ros/node_handle.h **** 
 514:ROSSerial/ros/node_handle.h ****   bool addSubscriber(SubscriberType sub)
 515:ROSSerial/ros/node_handle.h ****   {
 516:ROSSerial/ros/node_handle.h ****     for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 2789              		.loc 6 516 0
 2790 0020 0024     		movs	r4, #0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 76


 2791              	.LVL372:
 2792              	.L145:
 2793 0022 042C     		cmp	r4, #4
 2794 0024 26DC     		bgt	.L143
 2795              	.LBB246:
 517:ROSSerial/ros/node_handle.h ****     {
 518:ROSSerial/ros/node_handle.h ****       if (subscribers2[i].topic_id == 0) {// empty slot}
 2796              		.loc 6 518 0
 2797 0026 04EB8403 		add	r3, r4, r4, lsl #2
 2798 002a 06EB8303 		add	r3, r6, r3, lsl #2
 2799 002e B3F8A434 		ldrh	r3, [r3, #1188]
 2800 0032 0BB1     		cbz	r3, .L147
 2801              	.LBE246:
 516:ROSSerial/ros/node_handle.h ****     {
 2802              		.loc 6 516 0
 2803 0034 0134     		adds	r4, r4, #1
 2804              	.LVL373:
 2805 0036 F4E7     		b	.L145
 2806              	.L147:
 2807              	.LBB248:
 2808              	.LBB247:
 519:ROSSerial/ros/node_handle.h ****         void * ptr = &subscribers2[i];
 2809              		.loc 6 519 0
 2810 0038 4FEA840C 		lsl	ip, r4, #2
 2811 003c 0CEB0405 		add	r5, ip, r4
 2812 0040 AD00     		lsls	r5, r5, #2
 2813 0042 05F59465 		add	r5, r5, #1184
 2814 0046 3544     		add	r5, r5, r6
 2815              	.LVL374:
 520:ROSSerial/ros/node_handle.h ****         memcpy(ptr, &sub, sizeof(sub));
 2816              		.loc 6 520 0
 2817 0048 6F46     		mov	r7, sp
 2818 004a 0FCF     		ldmia	r7!, {r0, r1, r2, r3}
 2819 004c 6860     		str	r0, [r5, #4]	@ unaligned
 2820 004e A960     		str	r1, [r5, #8]	@ unaligned
 2821 0050 EA60     		str	r2, [r5, #12]	@ unaligned
 2822 0052 2B61     		str	r3, [r5, #16]	@ unaligned
 2823 0054 3868     		ldr	r0, [r7]
 2824 0056 6861     		str	r0, [r5, #20]	@ unaligned
 521:ROSSerial/ros/node_handle.h ****         subscribers2[i].topic_id = i + 100;
 2825              		.loc 6 521 0
 2826 0058 04F16402 		add	r2, r4, #100
 2827 005c 92B2     		uxth	r2, r2
 2828 005e 0CEB0403 		add	r3, ip, r4
 2829 0062 06EB8303 		add	r3, r6, r3, lsl #2
 2830 0066 A3F8A424 		strh	r2, [r3, #1188]	@ movhi
 522:ROSSerial/ros/node_handle.h ****         printf("Registered %s with id %d\n", \
 2831              		.loc 6 522 0
 2832 006a D3F8A814 		ldr	r1, [r3, #1192]
 2833 006e 0748     		ldr	r0, .L148+16
 2834 0070 FFF7FEFF 		bl	printf
 2835              	.LVL375:
 2836              	.L143:
 2837              	.LBE247:
 2838              	.LBE248:
 2839              	.LBE245:
 2840              	.LBE244:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 77


 2841              		.loc 3 162 0
 2842 0074 0120     		movs	r0, #1
 2843 0076 0BB0     		add	sp, sp, #44
 2844              	.LCFI11:
 2845              		.cfi_def_cfa_offset 20
 2846              		@ sp needed
 2847 0078 F0BD     		pop	{r4, r5, r6, r7, pc}
 2848              	.LVL376:
 2849              	.L149:
 2850 007a 00BF     		.align	2
 2851              	.L148:
 2852 007c 00000000 		.word	.LC6
 2853 0080 00000000 		.word	.LC2
 2854 0084 00000000 		.word	.LC3
 2855 0088 00000000 		.word	_Z13wheels_cmd_cbPh
 2856 008c 0C000000 		.word	.LC7
 2857              		.cfi_endproc
 2858              	.LFE493:
 2859              		.fnend
 2861              		.section	.text._GLOBAL__sub_I_wheelInputAt,"ax",%progbits
 2862              		.align	1
 2863              		.syntax unified
 2864              		.thumb
 2865              		.thumb_func
 2866              		.fpu fpv4-sp-d16
 2868              	_GLOBAL__sub_I_wheelInputAt:
 2869              		.fnstart
 2870              	.LFB498:
 2871              		.loc 3 162 0
 2872              		.cfi_startproc
 2873              		@ args = 0, pretend = 0, frame = 0
 2874              		@ frame_needed = 0, uses_anonymous_args = 0
 2875 0000 08B5     		push	{r3, lr}
 2876              	.LCFI12:
 2877              		.cfi_def_cfa_offset 8
 2878              		.cfi_offset 3, -8
 2879              		.cfi_offset 14, -4
 2880              		.loc 3 162 0
 2881 0002 4FF6FF71 		movw	r1, #65535
 2882 0006 0120     		movs	r0, #1
 2883 0008 FFF7FEFF 		bl	_Z41__static_initialization_and_destruction_0ii
 2884              	.LVL377:
 2885 000c 08BD     		pop	{r3, pc}
 2886              		.cfi_endproc
 2887              	.LFE498:
 2888              		.cantunwind
 2889              		.fnend
 2891              		.section	.init_array,"aw",%init_array
 2892              		.align	2
 2893 0000 00000000 		.word	_GLOBAL__sub_I_wheelInputAt(target1)
 2894              		.weak	_ZTVN8std_msgs6HeaderE
 2895              		.section	.rodata._ZTVN8std_msgs6HeaderE,"aG",%progbits,_ZTVN8std_msgs6HeaderE,comdat
 2896              		.align	2
 2899              	_ZTVN8std_msgs6HeaderE:
 2900 0000 00000000 		.word	0
 2901 0004 00000000 		.word	0
 2902 0008 00000000 		.word	_ZNK8std_msgs6Header9serializeEPh
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 78


 2903 000c 00000000 		.word	_ZN8std_msgs6Header11deserializeEPh
 2904 0010 00000000 		.word	_ZN8std_msgs6Header7getTypeEv
 2905 0014 00000000 		.word	_ZN8std_msgs6Header6getMD5Ev
 2906              		.weak	_ZTVN11sensor_msgs10JointStateE
 2907              		.section	.rodata._ZTVN11sensor_msgs10JointStateE,"aG",%progbits,_ZTVN11sensor_msgs10JointStateE,co
 2908              		.align	2
 2911              	_ZTVN11sensor_msgs10JointStateE:
 2912 0000 00000000 		.word	0
 2913 0004 00000000 		.word	0
 2914 0008 00000000 		.word	_ZNK11sensor_msgs10JointState9serializeEPh
 2915 000c 00000000 		.word	_ZN11sensor_msgs10JointState11deserializeEPh
 2916 0010 00000000 		.word	_ZN11sensor_msgs10JointState7getTypeEv
 2917 0014 00000000 		.word	_ZN11sensor_msgs10JointState6getMD5Ev
 2918              		.global	motionDirection
 2919              		.global	rpmTarget
 2920              		.global	ticksTarget
 2921              		.global	wheelInputAt
 2922              		.section	.bss._ZL14wheelPositions,"aw",%nobits
 2923              		.align	2
 2924              		.set	.LANCHOR0,. + 0
 2927              	_ZL14wheelPositions:
 2928 0000 00000000 		.space	72
 2928      00000000 
 2928      00000000 
 2928      00000000 
 2928      00000000 
 2929              		.section	.bss.motionDirection,"aw",%nobits
 2930              		.align	2
 2931              		.set	.LANCHOR3,. + 0
 2934              	motionDirection:
 2935 0000 00000000 		.space	8
 2935      00000000 
 2936              		.section	.bss.rpmTarget,"aw",%nobits
 2937              		.align	2
 2938              		.set	.LANCHOR4,. + 0
 2941              	rpmTarget:
 2942 0000 00000000 		.space	8
 2942      00000000 
 2943              		.section	.bss.ticksTarget,"aw",%nobits
 2944              		.align	2
 2945              		.set	.LANCHOR2,. + 0
 2948              	ticksTarget:
 2949 0000 00000000 		.space	8
 2949      00000000 
 2950              		.section	.bss.wheelInputAt,"aw",%nobits
 2951              		.align	2
 2952              		.set	.LANCHOR1,. + 0
 2955              	wheelInputAt:
 2956 0000 00000000 		.space	4
 2957              		.section	.rodata._Z21rosSubscribeWheelsCmdPN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi512EE
 2958              		.align	2
 2959              	.LC6:
 2960 0000 77686565 		.ascii	"wheels_cmd\000"
 2960      6C735F63 
 2960      6D6400
 2961 000b 00       		.space	1
 2962              	.LC7:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 79


 2963 000c 52656769 		.ascii	"Registered %s with id %d\012\000"
 2963      73746572 
 2963      65642025 
 2963      73207769 
 2963      74682069 
 2964              		.section	.rodata._ZN11sensor_msgs10JointState6getMD5Ev.str1.4,"aMS",%progbits,1
 2965              		.align	2
 2966              	.LC3:
 2967 0000 33303636 		.ascii	"3066dcd76a6cfaef579bd0f34173e9fd\000"
 2967      64636437 
 2967      36613663 
 2967      66616566 
 2967      35373962 
 2968              		.section	.rodata._ZN11sensor_msgs10JointState7getTypeEv.str1.4,"aMS",%progbits,1
 2969              		.align	2
 2970              	.LC2:
 2971 0000 73656E73 		.ascii	"sensor_msgs/JointState\000"
 2971      6F725F6D 
 2971      7367732F 
 2971      4A6F696E 
 2971      74537461 
 2972              		.section	.rodata._ZN8std_msgs6Header6getMD5Ev.str1.4,"aMS",%progbits,1
 2973              		.align	2
 2974              	.LC1:
 2975 0000 32313736 		.ascii	"2176decaecbce78abc3b96ef049fabed\000"
 2975      64656361 
 2975      65636263 
 2975      65373861 
 2975      62633362 
 2976              		.section	.rodata._ZN8std_msgs6Header7getTypeEv.str1.4,"aMS",%progbits,1
 2977              		.align	2
 2978              	.LC0:
 2979 0000 7374645F 		.ascii	"std_msgs/Header\000"
 2979      6D736773 
 2979      2F486561 
 2979      64657200 
 2980              		.section	.rodata.wheels_pwm_set.str1.4,"aMS",%progbits,1
 2981              		.align	2
 2982              	.LC4:
 2983 0000 256C753A 		.ascii	"%lu:LIMIT reached. set speed to 0 , %lu, %lu for pw"
 2983      4C494D49 
 2983      54207265 
 2983      61636865 
 2983      642E2073 
 2984 0033 6D735B25 		.ascii	"ms[%d]=%d ticks=%ld\012\000"
 2984      645D3D25 
 2984      64207469 
 2984      636B733D 
 2984      256C640A 
 2985              	.LC5:
 2986 0048 256C753A 		.ascii	"%lu:New PWM set for pwms[%d]=%d\012\000"
 2986      4E657720 
 2986      50574D20 
 2986      73657420 
 2986      666F7220 
 2987              		.text
 2988              	.Letext0:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 80


 2989              		.file 7 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 2990              		.file 8 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 2991              		.file 9 "Drivers/CMSIS/CM4/CoreSupport/core_cm4.h"
 2992              		.file 10 "Inc/system_at32f4xx.h"
 2993              		.file 11 "Drivers/CMSIS/CM4/DeviceSupport/at32f4xx.h"
 2994              		.file 12 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.
 2995              		.file 13 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/lock.h"
 2996              		.file 14 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_types.h"
 2997              		.file 15 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/reent.h"
 2998              		.file 16 "Drivers/Modified_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 2999              		.file 17 "Drivers/Modified_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 3000              		.file 18 "Drivers/Modified_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 3001              		.file 19 "ROSSerial/AT32hardware.h"
 3002              		.file 20 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/c++/7.3.1/cstdlib"
 3003              		.file 21 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/c++/7.3.1/cmath"
 3004              		.file 22 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/c++/7.3.1/cstring"
 3005              		.file 23 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/c++/7.3.1/arm-none-ea
 3006              		.file 24 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/stdlib.h"
 3007              		.file 25 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/c++/7.3.1/stdlib.h"
 3008              		.file 26 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/math.h"
 3009              		.file 27 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/c++/7.3.1/math.h"
 3010              		.file 28 "<built-in>"
 3011              		.file 29 "ROSSerial/ros/duration.h"
 3012              		.file 30 "ROSSerial/ros.h"
 3013              		.file 31 "ROSSerial/rosserial_msgs/TopicInfo.h"
 3014              		.file 32 "ROSSerial/rosserial_msgs/RequestParam.h"
 3015              		.file 33 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/string.h"
 3016              		.file 34 "Inc/defines.h"
 3017              		.file 35 "Inc/pid.h"
 3018              		.file 36 "Inc/flashcontent.h"
 3019              		.file 37 "ROSSerial/std_msgs/Time.h"
 3020              		.file 38 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/stdio.h"
 3021              		.file 39 "Drivers/Modified_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 81


DEFINED SYMBOLS
                            *ABS*:0000000000000000 ROS_subscribe.cpp
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:17     .text._ZN8std_msgs6Header11deserializeEPh:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:24     .text._ZN8std_msgs6Header11deserializeEPh:0000000000000000 _ZN8std_msgs6Header11deserializeEPh
.ARM.exidx.text._ZN8std_msgs6Header11deserializeEPh:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:136    .text._ZN8std_msgs6Header7getTypeEv:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:143    .text._ZN8std_msgs6Header7getTypeEv:0000000000000000 _ZN8std_msgs6Header7getTypeEv
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:159    .text._ZN8std_msgs6Header7getTypeEv:0000000000000004 $d
.ARM.exidx.text._ZN8std_msgs6Header7getTypeEv:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:166    .text._ZN8std_msgs6Header6getMD5Ev:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:173    .text._ZN8std_msgs6Header6getMD5Ev:0000000000000000 _ZN8std_msgs6Header6getMD5Ev
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:189    .text._ZN8std_msgs6Header6getMD5Ev:0000000000000004 $d
.ARM.exidx.text._ZN8std_msgs6Header6getMD5Ev:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:196    .text._ZN11sensor_msgs10JointState7getTypeEv:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:203    .text._ZN11sensor_msgs10JointState7getTypeEv:0000000000000000 _ZN11sensor_msgs10JointState7getTypeEv
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:220    .text._ZN11sensor_msgs10JointState7getTypeEv:0000000000000004 $d
.ARM.exidx.text._ZN11sensor_msgs10JointState7getTypeEv:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:227    .text._ZN11sensor_msgs10JointState6getMD5Ev:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:234    .text._ZN11sensor_msgs10JointState6getMD5Ev:0000000000000000 _ZN11sensor_msgs10JointState6getMD5Ev
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:250    .text._ZN11sensor_msgs10JointState6getMD5Ev:0000000000000004 $d
.ARM.exidx.text._ZN11sensor_msgs10JointState6getMD5Ev:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:257    .text._Z41__static_initialization_and_destruction_0ii:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:263    .text._Z41__static_initialization_and_destruction_0ii:0000000000000000 _Z41__static_initialization_and_destruction_0ii
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:335    .text._Z41__static_initialization_and_destruction_0ii:0000000000000038 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:2911   .rodata._ZTVN11sensor_msgs10JointStateE:0000000000000000 _ZTVN11sensor_msgs10JointStateE
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:2899   .rodata._ZTVN8std_msgs6HeaderE:0000000000000000 _ZTVN8std_msgs6HeaderE
.ARM.exidx.text._Z41__static_initialization_and_destruction_0ii:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:344    .text._ZNK8std_msgs6Header9serializeEPh:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:351    .text._ZNK8std_msgs6Header9serializeEPh:0000000000000000 _ZNK8std_msgs6Header9serializeEPh
.ARM.exidx.text._ZNK8std_msgs6Header9serializeEPh:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:438    .text._ZNK11sensor_msgs10JointState9serializeEPh:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:445    .text._ZNK11sensor_msgs10JointState9serializeEPh:0000000000000000 _ZNK11sensor_msgs10JointState9serializeEPh
.ARM.exidx.text._ZNK11sensor_msgs10JointState9serializeEPh:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:948    .text._ZN11sensor_msgs10JointState11deserializeEPh:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:955    .text._ZN11sensor_msgs10JointState11deserializeEPh:0000000000000000 _ZN11sensor_msgs10JointState11deserializeEPh
.ARM.exidx.text._ZN11sensor_msgs10JointState11deserializeEPh:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:1571   .text._Z13wheels_cmd_cbPh:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:1578   .text._Z13wheels_cmd_cbPh:0000000000000000 _Z13wheels_cmd_cbPh
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:2133   .text._Z13wheels_cmd_cbPh:0000000000000284 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:2141   .text._Z13wheels_cmd_cbPh:000000000000028c $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:2343   .text._Z13wheels_cmd_cbPh:00000000000003dc $d
.ARM.exidx.text._Z13wheels_cmd_cbPh:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:2355   .text.wheels_pwm_set:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:2362   .text.wheels_pwm_set:0000000000000000 wheels_pwm_set
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:2718   .text.wheels_pwm_set:000000000000023c $d
   .ARM.exidx.text.wheels_pwm_set:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:2735   .text._Z21rosSubscribeWheelsCmdPN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi512EEE:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:2742   .text._Z21rosSubscribeWheelsCmdPN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi512EEE:0000000000000000 _Z21rosSubscribeWheelsCmdPN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi512EEE
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:2852   .text._Z21rosSubscribeWheelsCmdPN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi512EEE:000000000000007c $d
.ARM.exidx.text._Z21rosSubscribeWheelsCmdPN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi512EEE:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:2862   .text._GLOBAL__sub_I_wheelInputAt:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:2868   .text._GLOBAL__sub_I_wheelInputAt:0000000000000000 _GLOBAL__sub_I_wheelInputAt
.ARM.exidx.text._GLOBAL__sub_I_wheelInputAt:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:2892   .init_array:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:2896   .rodata._ZTVN8std_msgs6HeaderE:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:2908   .rodata._ZTVN11sensor_msgs10JointStateE:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:2934   .bss.motionDirection:0000000000000000 motionDirection
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s 			page 82


/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:2941   .bss.rpmTarget:0000000000000000 rpmTarget
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:2948   .bss.ticksTarget:0000000000000000 ticksTarget
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:2955   .bss.wheelInputAt:0000000000000000 wheelInputAt
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:2923   .bss._ZL14wheelPositions:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:2927   .bss._ZL14wheelPositions:0000000000000000 _ZL14wheelPositions
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:2930   .bss.motionDirection:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:2937   .bss.rpmTarget:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:2944   .bss.ticksTarget:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:2951   .bss.wheelInputAt:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:2958   .rodata._Z21rosSubscribeWheelsCmdPN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi512EEE.str1.4:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:2965   .rodata._ZN11sensor_msgs10JointState6getMD5Ev.str1.4:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:2969   .rodata._ZN11sensor_msgs10JointState7getTypeEv.str1.4:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:2973   .rodata._ZN8std_msgs6Header6getMD5Ev.str1.4:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:2977   .rodata._ZN8std_msgs6Header7getTypeEv.str1.4:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cc0cqgpf.s:2981   .rodata.wheels_pwm_set.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
strlen
memcpy
realloc
HAL_GetTick
pid_reset
wheel_posn
PositionPid
SpeedPid
__aeabi_unwind_cpp_pr0
printf
pid_need_compute
pid_compute
pwms
PositionPidFloats
SpeedPidFloats
