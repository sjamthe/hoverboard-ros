ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"pid.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.pid_need_compute,"ax",%progbits
  17              		.align	1
  18              		.global	pid_need_compute
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	pid_need_compute:
  25              	.LFB127:
  26              		.file 1 "Src/pid.c"
   1:Src/pid.c     **** /*	Floating point PID control loop for Microcontrollers
   2:Src/pid.c     **** 	Copyright (C) 2015 Jesus Ruben Santa Anna Zamudio.
   3:Src/pid.c     **** 
   4:Src/pid.c     **** 	This program is free software: you can redistribute it and/or modify
   5:Src/pid.c     **** 	it under the terms of the GNU General Public License as published by
   6:Src/pid.c     **** 	the Free Software Foundation, either version 3 of the License, or
   7:Src/pid.c     **** 	(at your option) any later version.
   8:Src/pid.c     **** 
   9:Src/pid.c     **** 	This program is distributed in the hope that it will be useful,
  10:Src/pid.c     **** 	but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:Src/pid.c     **** 	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:Src/pid.c     **** 	GNU General Public License for more details.
  13:Src/pid.c     **** 
  14:Src/pid.c     **** 	You should have received a copy of the GNU General Public License
  15:Src/pid.c     **** 	along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:Src/pid.c     **** 
  17:Src/pid.c     **** 	Author website: http://www.geekfactory.mx
  18:Src/pid.c     **** 	Author e-mail: ruben at geekfactory dot mx
  19:Src/pid.c     ****  */
  20:Src/pid.c     **** #include "pid.h"
  21:Src/pid.c     **** 
  22:Src/pid.c     **** p_pid_controller pid_create(p_pid_controller pid, float* in, float* out, float* set, float kp, floa
  23:Src/pid.c     **** {
  24:Src/pid.c     **** 	pid->input = in;
  25:Src/pid.c     **** 	pid->output = out;
  26:Src/pid.c     **** 	pid->setpoint = set;
  27:Src/pid.c     **** 	pid->automode = false;
  28:Src/pid.c     **** 
  29:Src/pid.c     **** 	pid_limits(pid, 0, 255);
  30:Src/pid.c     **** 
  31:Src/pid.c     **** 	// Set default sample time to 100 ms
  32:Src/pid.c     **** 	pid->sampletime = 10 * (TICK_SECOND / 1000);
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s 			page 2


  33:Src/pid.c     **** 
  34:Src/pid.c     **** 	pid_direction(pid, E_PID_DIRECT);
  35:Src/pid.c     **** 	pid_tune(pid, kp, ki, kd);
  36:Src/pid.c     **** 
  37:Src/pid.c     **** 	pid->lasttime = tick_get() - pid->sampletime;
  38:Src/pid.c     **** 
  39:Src/pid.c     **** 	return pid;
  40:Src/pid.c     **** }
  41:Src/pid.c     **** 
  42:Src/pid.c     **** bool pid_need_compute(p_pid_controller pid)
  43:Src/pid.c     **** {
  27              		.loc 1 43 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 10B5     		push	{r4, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 4, -8
  36              		.cfi_offset 14, -4
  37 0002 0446     		mov	r4, r0
  44:Src/pid.c     **** 	// Check if the PID period has elapsed
  45:Src/pid.c     **** 	return(tick_get() - pid->lasttime >= pid->sampletime) ? true : false;
  38              		.loc 1 45 0
  39 0004 FFF7FEFF 		bl	HAL_GetTick
  40              	.LVL1:
  41 0008 A36A     		ldr	r3, [r4, #40]
  42 000a C01A     		subs	r0, r0, r3
  43 000c E36A     		ldr	r3, [r4, #44]
  46:Src/pid.c     **** }
  44              		.loc 1 46 0
  45 000e 9842     		cmp	r0, r3
  46 0010 34BF     		ite	cc
  47 0012 0020     		movcc	r0, #0
  48 0014 0120     		movcs	r0, #1
  49 0016 10BD     		pop	{r4, pc}
  50              		.cfi_endproc
  51              	.LFE127:
  53              		.section	.text.pid_compute,"ax",%progbits
  54              		.align	1
  55              		.global	pid_compute
  56              		.syntax unified
  57              		.thumb
  58              		.thumb_func
  59              		.fpu fpv4-sp-d16
  61              	pid_compute:
  62              	.LFB128:
  47:Src/pid.c     **** 
  48:Src/pid.c     **** void pid_compute(p_pid_controller pid)
  49:Src/pid.c     **** {
  63              		.loc 1 49 0
  64              		.cfi_startproc
  65              		@ args = 0, pretend = 0, frame = 0
  66              		@ frame_needed = 0, uses_anonymous_args = 0
  67              	.LVL2:
  50:Src/pid.c     **** 	// Check if control is enabled
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s 			page 3


  51:Src/pid.c     **** 	if (!pid->automode)
  68              		.loc 1 51 0
  69 0000 90F83030 		ldrb	r3, [r0, #48]	@ zero_extendqisi2
  70 0004 002B     		cmp	r3, #0
  71 0006 74D0     		beq	.L14
  49:Src/pid.c     **** 	// Check if control is enabled
  72              		.loc 1 49 0
  73 0008 10B5     		push	{r4, lr}
  74              	.LCFI1:
  75              		.cfi_def_cfa_offset 8
  76              		.cfi_offset 4, -8
  77              		.cfi_offset 14, -4
  78 000a 2DED028B 		vpush.64	{d8}
  79              	.LCFI2:
  80              		.cfi_def_cfa_offset 16
  81              		.cfi_offset 80, -16
  82              		.cfi_offset 81, -12
  83 000e 84B0     		sub	sp, sp, #16
  84              	.LCFI3:
  85              		.cfi_def_cfa_offset 32
  52:Src/pid.c     **** 		return;
  53:Src/pid.c     **** 	
  54:Src/pid.c     **** 	float in = *(pid->input);
  86              		.loc 1 54 0
  87 0010 0368     		ldr	r3, [r0]
  88 0012 D3ED008A 		vldr.32	s17, [r3]
  89              	.LVL3:
  55:Src/pid.c     **** 	// Compute error
  56:Src/pid.c     **** 	float error = (*(pid->setpoint)) - in;
  90              		.loc 1 56 0
  91 0016 8368     		ldr	r3, [r0, #8]
  92 0018 93ED007A 		vldr.32	s14, [r3]
  93 001c 37EE687A 		vsub.f32	s14, s14, s17
  94              	.LVL4:
  57:Src/pid.c     **** 	// Compute integral
  58:Src/pid.c     **** 	pid->iterm += (pid->Ki * error);
  95              		.loc 1 58 0
  96 0020 D0ED047A 		vldr.32	s15, [r0, #16]
  97 0024 67EE877A 		vmul.f32	s15, s15, s14
  98 0028 D0ED086A 		vldr.32	s13, [r0, #32]
  99 002c 77EEA67A 		vadd.f32	s15, s15, s13
 100 0030 C0ED087A 		vstr.32	s15, [r0, #32]
  59:Src/pid.c     **** 	if (pid->iterm > pid->omax)
 101              		.loc 1 59 0
 102 0034 D0ED076A 		vldr.32	s13, [r0, #28]
 103 0038 F4EEE67A 		vcmpe.f32	s15, s13
 104 003c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 105 0040 4DDD     		ble	.L12
  60:Src/pid.c     **** 		pid->iterm = pid->omax;
 106              		.loc 1 60 0
 107 0042 C0ED086A 		vstr.32	s13, [r0, #32]
 108              	.L7:
 109 0046 0446     		mov	r4, r0
  61:Src/pid.c     **** 	else if (pid->iterm < pid->omin)
  62:Src/pid.c     **** 		pid->iterm = pid->omin;
  63:Src/pid.c     **** 	// Compute differential on input
  64:Src/pid.c     **** 	float dinput = in - pid->lastin;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s 			page 4


 110              		.loc 1 64 0
 111 0048 D0ED097A 		vldr.32	s15, [r0, #36]
 112 004c 78EEE77A 		vsub.f32	s15, s17, s15
 113              	.LVL5:
  65:Src/pid.c     **** 	// Compute PID output
  66:Src/pid.c     **** 	float out = pid->Kp * error + pid->iterm - pid->Kd * dinput;
 114              		.loc 1 66 0
 115 0050 90ED038A 		vldr.32	s16, [r0, #12]
 116 0054 28EE078A 		vmul.f32	s16, s16, s14
 117 0058 D0ED086A 		vldr.32	s13, [r0, #32]
 118 005c 38EE268A 		vadd.f32	s16, s16, s13
 119 0060 90ED056A 		vldr.32	s12, [r0, #20]
 120 0064 26EE276A 		vmul.f32	s12, s12, s15
 121 0068 38EE468A 		vsub.f32	s16, s16, s12
 122              	.LVL6:
  67:Src/pid.c     **** 	printf("set=%d,in=%d,error=%d, iterm=%d, dinput=%d, out=%d\n",(int)(*(pid->setpoint)),(int)in,
 123              		.loc 1 67 0
 124 006c 93ED006A 		vldr.32	s12, [r3]
 125 0070 FDEEC85A 		vcvt.s32.f32	s11, s16
 126 0074 CDED025A 		vstr.32	s11, [sp, #8]	@ int
 127 0078 FDEEE77A 		vcvt.s32.f32	s15, s15
 128              	.LVL7:
 129 007c CDED017A 		vstr.32	s15, [sp, #4]	@ int
 130 0080 FDEEE66A 		vcvt.s32.f32	s13, s13
 131 0084 CDED006A 		vstr.32	s13, [sp]	@ int
 132 0088 FDEEC77A 		vcvt.s32.f32	s15, s14
 133 008c 17EE903A 		vmov	r3, s15	@ int
 134 0090 FDEEE87A 		vcvt.s32.f32	s15, s17
 135 0094 17EE902A 		vmov	r2, s15	@ int
 136 0098 FDEEC67A 		vcvt.s32.f32	s15, s12
 137 009c 17EE901A 		vmov	r1, s15	@ int
 138 00a0 1448     		ldr	r0, .L17
 139              	.LVL8:
 140 00a2 FFF7FEFF 		bl	printf
 141              	.LVL9:
  68:Src/pid.c     **** 						(int)error,(int) pid->iterm, (int)dinput,(int)out);
  69:Src/pid.c     **** 	// Apply limit to output value
  70:Src/pid.c     **** 	if (out > pid->omax)
 142              		.loc 1 70 0
 143 00a6 D4ED077A 		vldr.32	s15, [r4, #28]
 144 00aa F4EEC87A 		vcmpe.f32	s15, s16
 145 00ae F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 146 00b2 08D4     		bmi	.L9
  71:Src/pid.c     **** 		out = pid->omax;
  72:Src/pid.c     **** 	else if (out < pid->omin)
 147              		.loc 1 72 0
 148 00b4 D4ED067A 		vldr.32	s15, [r4, #24]
 149 00b8 F4EEC87A 		vcmpe.f32	s15, s16
 150 00bc F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 151 00c0 01DC     		bgt	.L9
  66:Src/pid.c     **** 	printf("set=%d,in=%d,error=%d, iterm=%d, dinput=%d, out=%d\n",(int)(*(pid->setpoint)),(int)in,
 152              		.loc 1 66 0
 153 00c2 F0EE487A 		vmov.f32	s15, s16
 154              	.L9:
 155              	.LVL10:
  73:Src/pid.c     **** 		out = pid->omin;
  74:Src/pid.c     **** 	// Output to pointed variable
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s 			page 5


  75:Src/pid.c     **** 	(*pid->output) = out;
 156              		.loc 1 75 0
 157 00c6 6368     		ldr	r3, [r4, #4]
 158 00c8 C3ED007A 		vstr.32	s15, [r3]
  76:Src/pid.c     **** 	// Keep track of some variables for next execution
  77:Src/pid.c     **** 	pid->lastin = in;
 159              		.loc 1 77 0
 160 00cc C4ED098A 		vstr.32	s17, [r4, #36]
  78:Src/pid.c     **** 	pid->lasttime = tick_get();;
 161              		.loc 1 78 0
 162 00d0 FFF7FEFF 		bl	HAL_GetTick
 163              	.LVL11:
 164 00d4 A062     		str	r0, [r4, #40]
  79:Src/pid.c     **** }
 165              		.loc 1 79 0
 166 00d6 04B0     		add	sp, sp, #16
 167              	.LCFI4:
 168              		.cfi_remember_state
 169              		.cfi_def_cfa_offset 16
 170              		@ sp needed
 171 00d8 BDEC028B 		vldm	sp!, {d8}
 172              	.LCFI5:
 173              		.cfi_restore 80
 174              		.cfi_restore 81
 175              		.cfi_def_cfa_offset 8
 176 00dc 10BD     		pop	{r4, pc}
 177              	.LVL12:
 178              	.L12:
 179              	.LCFI6:
 180              		.cfi_restore_state
  61:Src/pid.c     **** 		pid->iterm = pid->omin;
 181              		.loc 1 61 0
 182 00de D0ED066A 		vldr.32	s13, [r0, #24]
 183 00e2 F4EEE67A 		vcmpe.f32	s15, s13
 184 00e6 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 185 00ea ACD5     		bpl	.L7
  62:Src/pid.c     **** 	// Compute differential on input
 186              		.loc 1 62 0
 187 00ec C0ED086A 		vstr.32	s13, [r0, #32]
 188 00f0 A9E7     		b	.L7
 189              	.LVL13:
 190              	.L14:
 191              	.LCFI7:
 192              		.cfi_def_cfa_offset 0
 193              		.cfi_restore 4
 194              		.cfi_restore 14
 195              		.cfi_restore 80
 196              		.cfi_restore 81
 197 00f2 7047     		bx	lr
 198              	.L18:
 199              		.align	2
 200              	.L17:
 201 00f4 00000000 		.word	.LC0
 202              		.cfi_endproc
 203              	.LFE128:
 205              		.section	.text.pid_tune,"ax",%progbits
 206              		.align	1
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s 			page 6


 207              		.global	pid_tune
 208              		.syntax unified
 209              		.thumb
 210              		.thumb_func
 211              		.fpu fpv4-sp-d16
 213              	pid_tune:
 214              	.LFB129:
  80:Src/pid.c     **** 
  81:Src/pid.c     **** void pid_tune(p_pid_controller pid, float kp, float ki, float kd)
  82:Src/pid.c     **** {
 215              		.loc 1 82 0
 216              		.cfi_startproc
 217              		@ args = 0, pretend = 0, frame = 0
 218              		@ frame_needed = 0, uses_anonymous_args = 0
 219              		@ link register save eliminated.
 220              	.LVL14:
 221 0000 07EE101A 		vmov	s14, r1
 222 0004 07EE902A 		vmov	s15, r2
 223 0008 06EE903A 		vmov	s13, r3
  83:Src/pid.c     **** 	// Check for validity
  84:Src/pid.c     **** 	if (kp < 0 || ki < 0 || kd < 0)
 224              		.loc 1 84 0
 225 000c B5EEC07A 		vcmpe.f32	s14, #0
 226 0010 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 227 0014 1ED4     		bmi	.L19
 228              		.loc 1 84 0 is_stmt 0 discriminator 1
 229 0016 F5EEC07A 		vcmpe.f32	s15, #0
 230 001a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 231 001e 19D4     		bmi	.L19
 232              		.loc 1 84 0 discriminator 2
 233 0020 F5EEC06A 		vcmpe.f32	s13, #0
 234 0024 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 235 0028 14D4     		bmi	.L19
  85:Src/pid.c     **** 		return;
  86:Src/pid.c     **** 	
  87:Src/pid.c     **** 	//Compute sample time in seconds
  88:Src/pid.c     **** 	float ssec = ((float) pid->sampletime) / ((float) TICK_SECOND);
 236              		.loc 1 88 0 is_stmt 1
 237 002a 90ED0B6A 		vldr.32	s12, [r0, #44]	@ int
 238 002e B8EE466A 		vcvt.f32.u32	s12, s12
 239 0032 9FED105A 		vldr.32	s10, .L22
 240 0036 C6EE055A 		vdiv.f32	s11, s12, s10
 241              	.LVL15:
  89:Src/pid.c     **** 
  90:Src/pid.c     **** 	pid->Kp = kp;
 242              		.loc 1 90 0
 243 003a C160     		str	r1, [r0, #12]	@ float
  91:Src/pid.c     **** 	pid->Ki = ki * ssec;
 244              		.loc 1 91 0
 245 003c 67EEA57A 		vmul.f32	s15, s15, s11
 246 0040 C0ED047A 		vstr.32	s15, [r0, #16]
  92:Src/pid.c     **** 	pid->Kd = kd / ssec;
 247              		.loc 1 92 0
 248 0044 86EEA56A 		vdiv.f32	s12, s13, s11
 249 0048 80ED056A 		vstr.32	s12, [r0, #20]
  93:Src/pid.c     **** 
  94:Src/pid.c     **** 	if (pid->direction == E_PID_REVERSE) {
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s 			page 7


 250              		.loc 1 94 0
 251 004c 90F83130 		ldrb	r3, [r0, #49]	@ zero_extendqisi2
 252              	.LVL16:
 253 0050 012B     		cmp	r3, #1
 254 0052 00D0     		beq	.L21
 255              	.LVL17:
 256              	.L19:
  95:Src/pid.c     **** 		pid->Kp = 0 - pid->Kp;
  96:Src/pid.c     **** 		pid->Ki = 0 - pid->Ki;
  97:Src/pid.c     **** 		pid->Kd = 0 - pid->Kd;
  98:Src/pid.c     **** 	}
  99:Src/pid.c     **** }
 257              		.loc 1 99 0
 258 0054 7047     		bx	lr
 259              	.LVL18:
 260              	.L21:
  95:Src/pid.c     **** 		pid->Kp = 0 - pid->Kp;
 261              		.loc 1 95 0
 262 0056 DFED086A 		vldr.32	s13, .L22+4
 263              	.LVL19:
 264 005a 36EEC77A 		vsub.f32	s14, s13, s14
 265 005e 80ED037A 		vstr.32	s14, [r0, #12]
  96:Src/pid.c     **** 		pid->Kd = 0 - pid->Kd;
 266              		.loc 1 96 0
 267 0062 76EEE77A 		vsub.f32	s15, s13, s15
 268 0066 C0ED047A 		vstr.32	s15, [r0, #16]
  97:Src/pid.c     **** 	}
 269              		.loc 1 97 0
 270 006a 36EEC66A 		vsub.f32	s12, s13, s12
 271 006e 80ED056A 		vstr.32	s12, [r0, #20]
 272 0072 EFE7     		b	.L19
 273              	.L23:
 274              		.align	2
 275              	.L22:
 276 0074 00007A44 		.word	1148846080
 277 0078 00000000 		.word	0
 278              		.cfi_endproc
 279              	.LFE129:
 281              		.section	.text.pid_sample,"ax",%progbits
 282              		.align	1
 283              		.global	pid_sample
 284              		.syntax unified
 285              		.thumb
 286              		.thumb_func
 287              		.fpu fpv4-sp-d16
 289              	pid_sample:
 290              	.LFB130:
 100:Src/pid.c     **** 
 101:Src/pid.c     **** void pid_sample(p_pid_controller pid, uint32_t time)
 102:Src/pid.c     **** {
 291              		.loc 1 102 0
 292              		.cfi_startproc
 293              		@ args = 0, pretend = 0, frame = 0
 294              		@ frame_needed = 0, uses_anonymous_args = 0
 295              		@ link register save eliminated.
 296              	.LVL20:
 103:Src/pid.c     **** 	if (time > 0) {
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s 			page 8


 297              		.loc 1 103 0
 298 0000 B1B1     		cbz	r1, .L24
 299              	.LBB2:
 104:Src/pid.c     **** 		float ratio = (float) (time * (TICK_SECOND / 1000)) / (float) pid->sampletime;
 300              		.loc 1 104 0
 301 0002 07EE901A 		vmov	s15, r1	@ int
 302 0006 F8EE676A 		vcvt.f32.u32	s13, s15
 303 000a D0ED0B7A 		vldr.32	s15, [r0, #44]	@ int
 304 000e F8EE677A 		vcvt.f32.u32	s15, s15
 305 0012 86EEA77A 		vdiv.f32	s14, s13, s15
 306              	.LVL21:
 105:Src/pid.c     **** 		pid->Ki *= ratio;
 307              		.loc 1 105 0
 308 0016 D0ED047A 		vldr.32	s15, [r0, #16]
 309 001a 67EE877A 		vmul.f32	s15, s15, s14
 310 001e C0ED047A 		vstr.32	s15, [r0, #16]
 106:Src/pid.c     **** 		pid->Kd /= ratio;
 311              		.loc 1 106 0
 312 0022 D0ED056A 		vldr.32	s13, [r0, #20]
 313 0026 C6EE877A 		vdiv.f32	s15, s13, s14
 314 002a C0ED057A 		vstr.32	s15, [r0, #20]
 107:Src/pid.c     **** 		pid->sampletime = time * (TICK_SECOND / 1000);
 315              		.loc 1 107 0
 316 002e C162     		str	r1, [r0, #44]
 317              	.LVL22:
 318              	.L24:
 319              	.LBE2:
 108:Src/pid.c     **** 	}
 109:Src/pid.c     **** }
 320              		.loc 1 109 0
 321 0030 7047     		bx	lr
 322              		.cfi_endproc
 323              	.LFE130:
 325              		.section	.text.pid_limits,"ax",%progbits
 326              		.align	1
 327              		.global	pid_limits
 328              		.syntax unified
 329              		.thumb
 330              		.thumb_func
 331              		.fpu fpv4-sp-d16
 333              	pid_limits:
 334              	.LFB131:
 110:Src/pid.c     **** 
 111:Src/pid.c     **** void pid_limits(p_pid_controller pid, float min, float max)
 112:Src/pid.c     **** {
 335              		.loc 1 112 0
 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 0
 338              		@ frame_needed = 0, uses_anonymous_args = 0
 339              		@ link register save eliminated.
 340              	.LVL23:
 341 0000 07EE101A 		vmov	s14, r1
 342 0004 07EE902A 		vmov	s15, r2
 113:Src/pid.c     **** 	if (min >= max) return;
 343              		.loc 1 113 0
 344 0008 B4EEE77A 		vcmpe.f32	s14, s15
 345 000c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s 			page 9


 346 0010 1FDA     		bge	.L26
 114:Src/pid.c     **** 	pid->omin = min;
 347              		.loc 1 114 0
 348 0012 8161     		str	r1, [r0, #24]	@ float
 115:Src/pid.c     **** 	pid->omax = max;
 349              		.loc 1 115 0
 350 0014 C261     		str	r2, [r0, #28]	@ float
 116:Src/pid.c     **** 	//Adjust output to new limits
 117:Src/pid.c     **** 	if (pid->automode) {
 351              		.loc 1 117 0
 352 0016 90F83030 		ldrb	r3, [r0, #48]	@ zero_extendqisi2
 353 001a D3B1     		cbz	r3, .L26
 118:Src/pid.c     **** 		if (*(pid->output) > pid->omax)
 354              		.loc 1 118 0
 355 001c 4368     		ldr	r3, [r0, #4]
 356 001e D3ED006A 		vldr.32	s13, [r3]
 357 0022 F4EEE76A 		vcmpe.f32	s13, s15
 358 0026 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 359 002a 13DD     		ble	.L39
 119:Src/pid.c     **** 			*(pid->output) = pid->omax;
 360              		.loc 1 119 0
 361 002c 1A60     		str	r2, [r3]	@ float
 362              	.L30:
 120:Src/pid.c     **** 		else if (*(pid->output) < pid->omin)
 121:Src/pid.c     **** 			*(pid->output) = pid->omin;
 122:Src/pid.c     **** 
 123:Src/pid.c     **** 		if (pid->iterm > pid->omax)
 363              		.loc 1 123 0
 364 002e D0ED087A 		vldr.32	s15, [r0, #32]
 365 0032 90ED077A 		vldr.32	s14, [r0, #28]
 366 0036 F4EEC77A 		vcmpe.f32	s15, s14
 367 003a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 368 003e 10DC     		bgt	.L41
 124:Src/pid.c     **** 			pid->iterm = pid->omax;
 125:Src/pid.c     **** 		else if (pid->iterm < pid->omin)
 369              		.loc 1 125 0
 370 0040 90ED067A 		vldr.32	s14, [r0, #24]
 371 0044 F4EEC77A 		vcmpe.f32	s15, s14
 372 0048 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 373 004c 01D5     		bpl	.L26
 126:Src/pid.c     **** 			pid->iterm = pid->omin;
 374              		.loc 1 126 0
 375 004e 80ED087A 		vstr.32	s14, [r0, #32]
 376              	.L26:
 127:Src/pid.c     **** 	}
 128:Src/pid.c     **** }
 377              		.loc 1 128 0
 378 0052 7047     		bx	lr
 379              	.L39:
 120:Src/pid.c     **** 			*(pid->output) = pid->omin;
 380              		.loc 1 120 0
 381 0054 F4EEC76A 		vcmpe.f32	s13, s14
 382 0058 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 383 005c E7D5     		bpl	.L30
 121:Src/pid.c     **** 
 384              		.loc 1 121 0
 385 005e 1960     		str	r1, [r3]	@ float
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s 			page 10


 386 0060 E5E7     		b	.L30
 387              	.L41:
 124:Src/pid.c     **** 		else if (pid->iterm < pid->omin)
 388              		.loc 1 124 0
 389 0062 80ED087A 		vstr.32	s14, [r0, #32]
 390 0066 7047     		bx	lr
 391              		.cfi_endproc
 392              	.LFE131:
 394              		.section	.text.pid_auto,"ax",%progbits
 395              		.align	1
 396              		.global	pid_auto
 397              		.syntax unified
 398              		.thumb
 399              		.thumb_func
 400              		.fpu fpv4-sp-d16
 402              	pid_auto:
 403              	.LFB132:
 129:Src/pid.c     **** 
 130:Src/pid.c     **** void pid_auto(p_pid_controller pid)
 131:Src/pid.c     **** {
 404              		.loc 1 131 0
 405              		.cfi_startproc
 406              		@ args = 0, pretend = 0, frame = 0
 407              		@ frame_needed = 0, uses_anonymous_args = 0
 408              		@ link register save eliminated.
 409              	.LVL24:
 132:Src/pid.c     **** 	// If going from manual to auto
 133:Src/pid.c     **** 	if (!pid->automode) {
 410              		.loc 1 133 0
 411 0000 90F83030 		ldrb	r3, [r0, #48]	@ zero_extendqisi2
 412 0004 9BB9     		cbnz	r3, .L42
 134:Src/pid.c     **** 		pid->iterm = *(pid->output);
 413              		.loc 1 134 0
 414 0006 4368     		ldr	r3, [r0, #4]
 415 0008 D3ED007A 		vldr.32	s15, [r3]
 416 000c C0ED087A 		vstr.32	s15, [r0, #32]
 135:Src/pid.c     **** 		pid->lastin = *(pid->input);
 417              		.loc 1 135 0
 418 0010 0368     		ldr	r3, [r0]
 419 0012 1B68     		ldr	r3, [r3]	@ float
 420 0014 4362     		str	r3, [r0, #36]	@ float
 136:Src/pid.c     **** 		if (pid->iterm > pid->omax)
 421              		.loc 1 136 0
 422 0016 90ED077A 		vldr.32	s14, [r0, #28]
 423 001a F4EEC77A 		vcmpe.f32	s15, s14
 424 001e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 425 0022 05DD     		ble	.L50
 137:Src/pid.c     **** 			pid->iterm = pid->omax;
 426              		.loc 1 137 0
 427 0024 80ED087A 		vstr.32	s14, [r0, #32]
 428              	.L46:
 138:Src/pid.c     **** 		else if (pid->iterm < pid->omin)
 139:Src/pid.c     **** 			pid->iterm = pid->omin;
 140:Src/pid.c     **** 		pid->automode = true;
 429              		.loc 1 140 0
 430 0028 0123     		movs	r3, #1
 431 002a 80F83030 		strb	r3, [r0, #48]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s 			page 11


 432              	.L42:
 141:Src/pid.c     **** 	}
 142:Src/pid.c     **** }
 433              		.loc 1 142 0
 434 002e 7047     		bx	lr
 435              	.L50:
 138:Src/pid.c     **** 		else if (pid->iterm < pid->omin)
 436              		.loc 1 138 0
 437 0030 90ED067A 		vldr.32	s14, [r0, #24]
 438 0034 F4EEC77A 		vcmpe.f32	s15, s14
 439 0038 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 440 003c F4D5     		bpl	.L46
 139:Src/pid.c     **** 		pid->automode = true;
 441              		.loc 1 139 0
 442 003e 80ED087A 		vstr.32	s14, [r0, #32]
 443 0042 F1E7     		b	.L46
 444              		.cfi_endproc
 445              	.LFE132:
 447              		.section	.text.pid_manual,"ax",%progbits
 448              		.align	1
 449              		.global	pid_manual
 450              		.syntax unified
 451              		.thumb
 452              		.thumb_func
 453              		.fpu fpv4-sp-d16
 455              	pid_manual:
 456              	.LFB133:
 143:Src/pid.c     **** 
 144:Src/pid.c     **** void pid_manual(p_pid_controller pid)
 145:Src/pid.c     **** {
 457              		.loc 1 145 0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 0
 460              		@ frame_needed = 0, uses_anonymous_args = 0
 461              		@ link register save eliminated.
 462              	.LVL25:
 146:Src/pid.c     **** 	pid->automode = false;
 463              		.loc 1 146 0
 464 0000 0023     		movs	r3, #0
 465 0002 80F83030 		strb	r3, [r0, #48]
 147:Src/pid.c     **** }
 466              		.loc 1 147 0
 467 0006 7047     		bx	lr
 468              		.cfi_endproc
 469              	.LFE133:
 471              		.section	.text.pid_direction,"ax",%progbits
 472              		.align	1
 473              		.global	pid_direction
 474              		.syntax unified
 475              		.thumb
 476              		.thumb_func
 477              		.fpu fpv4-sp-d16
 479              	pid_direction:
 480              	.LFB134:
 148:Src/pid.c     **** 
 149:Src/pid.c     **** void pid_direction(p_pid_controller pid, enum pid_control_directions dir)
 150:Src/pid.c     **** {
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s 			page 12


 481              		.loc 1 150 0
 482              		.cfi_startproc
 483              		@ args = 0, pretend = 0, frame = 0
 484              		@ frame_needed = 0, uses_anonymous_args = 0
 485              		@ link register save eliminated.
 486              	.LVL26:
 151:Src/pid.c     **** 	if (pid->automode && pid->direction != dir) {
 487              		.loc 1 151 0
 488 0000 90F83030 		ldrb	r3, [r0, #48]	@ zero_extendqisi2
 489 0004 BBB1     		cbz	r3, .L53
 490              		.loc 1 151 0 is_stmt 0 discriminator 1
 491 0006 90F83130 		ldrb	r3, [r0, #49]	@ zero_extendqisi2
 492 000a 8B42     		cmp	r3, r1
 493 000c 13D0     		beq	.L53
 152:Src/pid.c     **** 		pid->Kp = (0 - pid->Kp);
 494              		.loc 1 152 0 is_stmt 1
 495 000e 90ED037A 		vldr.32	s14, [r0, #12]
 496 0012 DFED0A7A 		vldr.32	s15, .L54
 497 0016 37EEC77A 		vsub.f32	s14, s15, s14
 498 001a 80ED037A 		vstr.32	s14, [r0, #12]
 153:Src/pid.c     **** 		pid->Ki = (0 - pid->Ki);
 499              		.loc 1 153 0
 500 001e 90ED047A 		vldr.32	s14, [r0, #16]
 501 0022 37EEC77A 		vsub.f32	s14, s15, s14
 502 0026 80ED047A 		vstr.32	s14, [r0, #16]
 154:Src/pid.c     **** 		pid->Kd = (0 - pid->Kd);
 503              		.loc 1 154 0
 504 002a 90ED057A 		vldr.32	s14, [r0, #20]
 505 002e 77EEC77A 		vsub.f32	s15, s15, s14
 506 0032 C0ED057A 		vstr.32	s15, [r0, #20]
 507              	.L53:
 155:Src/pid.c     **** 	}
 156:Src/pid.c     **** 	pid->direction = dir;
 508              		.loc 1 156 0
 509 0036 80F83110 		strb	r1, [r0, #49]
 157:Src/pid.c     **** }
 510              		.loc 1 157 0
 511 003a 7047     		bx	lr
 512              	.L55:
 513              		.align	2
 514              	.L54:
 515 003c 00000000 		.word	0
 516              		.cfi_endproc
 517              	.LFE134:
 519              		.section	.text.pid_create,"ax",%progbits
 520              		.align	1
 521              		.global	pid_create
 522              		.syntax unified
 523              		.thumb
 524              		.thumb_func
 525              		.fpu fpv4-sp-d16
 527              	pid_create:
 528              	.LFB126:
  23:Src/pid.c     **** 	pid->input = in;
 529              		.loc 1 23 0
 530              		.cfi_startproc
 531              		@ args = 12, pretend = 0, frame = 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s 			page 13


 532              		@ frame_needed = 0, uses_anonymous_args = 0
 533              	.LVL27:
 534 0000 38B5     		push	{r3, r4, r5, lr}
 535              	.LCFI8:
 536              		.cfi_def_cfa_offset 16
 537              		.cfi_offset 3, -16
 538              		.cfi_offset 4, -12
 539              		.cfi_offset 5, -8
 540              		.cfi_offset 14, -4
 541 0002 0446     		mov	r4, r0
  24:Src/pid.c     **** 	pid->output = out;
 542              		.loc 1 24 0
 543 0004 0160     		str	r1, [r0]
  25:Src/pid.c     **** 	pid->setpoint = set;
 544              		.loc 1 25 0
 545 0006 4260     		str	r2, [r0, #4]
  26:Src/pid.c     **** 	pid->automode = false;
 546              		.loc 1 26 0
 547 0008 8360     		str	r3, [r0, #8]
  27:Src/pid.c     **** 
 548              		.loc 1 27 0
 549 000a 0025     		movs	r5, #0
 550 000c 80F83050 		strb	r5, [r0, #48]
  29:Src/pid.c     **** 
 551              		.loc 1 29 0
 552 0010 0B4A     		ldr	r2, .L58
 553              	.LVL28:
 554 0012 0021     		movs	r1, #0
 555              	.LVL29:
 556 0014 FFF7FEFF 		bl	pid_limits
 557              	.LVL30:
  32:Src/pid.c     **** 
 558              		.loc 1 32 0
 559 0018 0A23     		movs	r3, #10
 560 001a E362     		str	r3, [r4, #44]
  34:Src/pid.c     **** 	pid_tune(pid, kp, ki, kd);
 561              		.loc 1 34 0
 562 001c 2946     		mov	r1, r5
 563 001e 2046     		mov	r0, r4
 564 0020 FFF7FEFF 		bl	pid_direction
 565              	.LVL31:
  35:Src/pid.c     **** 
 566              		.loc 1 35 0
 567 0024 069B     		ldr	r3, [sp, #24]	@ float
 568 0026 059A     		ldr	r2, [sp, #20]	@ float
 569 0028 0499     		ldr	r1, [sp, #16]	@ float
 570 002a 2046     		mov	r0, r4
 571 002c FFF7FEFF 		bl	pid_tune
 572              	.LVL32:
  37:Src/pid.c     **** 
 573              		.loc 1 37 0
 574 0030 FFF7FEFF 		bl	HAL_GetTick
 575              	.LVL33:
 576 0034 E36A     		ldr	r3, [r4, #44]
 577 0036 C01A     		subs	r0, r0, r3
 578 0038 A062     		str	r0, [r4, #40]
  40:Src/pid.c     **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s 			page 14


 579              		.loc 1 40 0
 580 003a 2046     		mov	r0, r4
 581 003c 38BD     		pop	{r3, r4, r5, pc}
 582              	.LVL34:
 583              	.L59:
 584 003e 00BF     		.align	2
 585              	.L58:
 586 0040 00007F43 		.word	1132396544
 587              		.cfi_endproc
 588              	.LFE126:
 590              		.section	.text.pid_reset,"ax",%progbits
 591              		.align	1
 592              		.global	pid_reset
 593              		.syntax unified
 594              		.thumb
 595              		.thumb_func
 596              		.fpu fpv4-sp-d16
 598              	pid_reset:
 599              	.LFB135:
 158:Src/pid.c     **** 
 159:Src/pid.c     **** void pid_reset(p_pid_controller pid)
 160:Src/pid.c     **** {
 600              		.loc 1 160 0
 601              		.cfi_startproc
 602              		@ args = 0, pretend = 0, frame = 0
 603              		@ frame_needed = 0, uses_anonymous_args = 0
 604              		@ link register save eliminated.
 605              	.LVL35:
 161:Src/pid.c     **** 	pid->iterm = 0;
 606              		.loc 1 161 0
 607 0000 0023     		movs	r3, #0
 608 0002 0362     		str	r3, [r0, #32]	@ float
 162:Src/pid.c     **** }...
 609              		.loc 1 162 0
 610 0004 7047     		bx	lr
 611              		.cfi_endproc
 612              	.LFE135:
 614              		.section	.rodata.pid_compute.str1.4,"aMS",%progbits,1
 615              		.align	2
 616              	.LC0:
 617 0000 7365743D 		.ascii	"set=%d,in=%d,error=%d, iterm=%d, dinput=%d, out=%d\012"
 617      25642C69 
 617      6E3D2564 
 617      2C657272 
 617      6F723D25 
 618 0033 00       		.ascii	"\000"
 619              		.text
 620              	.Letext0:
 621              		.file 2 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 622              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 623              		.file 4 "Drivers/CMSIS/CM4/CoreSupport/core_cm4.h"
 624              		.file 5 "Inc/system_at32f4xx.h"
 625              		.file 6 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/lock.h"
 626              		.file 7 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_types.h"
 627              		.file 8 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 628              		.file 9 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/reent.h"
 629              		.file 10 "Inc/pid.h"
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s 			page 15


 630              		.file 11 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/stdio.h"
 631              		.file 12 "Drivers/Modified_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s 			page 16


DEFINED SYMBOLS
                            *ABS*:0000000000000000 pid.c
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s:17     .text.pid_need_compute:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s:24     .text.pid_need_compute:0000000000000000 pid_need_compute
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s:54     .text.pid_compute:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s:61     .text.pid_compute:0000000000000000 pid_compute
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s:201    .text.pid_compute:00000000000000f4 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s:206    .text.pid_tune:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s:213    .text.pid_tune:0000000000000000 pid_tune
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s:276    .text.pid_tune:0000000000000074 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s:282    .text.pid_sample:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s:289    .text.pid_sample:0000000000000000 pid_sample
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s:326    .text.pid_limits:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s:333    .text.pid_limits:0000000000000000 pid_limits
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s:395    .text.pid_auto:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s:402    .text.pid_auto:0000000000000000 pid_auto
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s:448    .text.pid_manual:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s:455    .text.pid_manual:0000000000000000 pid_manual
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s:472    .text.pid_direction:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s:479    .text.pid_direction:0000000000000000 pid_direction
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s:515    .text.pid_direction:000000000000003c $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s:520    .text.pid_create:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s:527    .text.pid_create:0000000000000000 pid_create
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s:586    .text.pid_create:0000000000000040 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s:591    .text.pid_reset:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s:598    .text.pid_reset:0000000000000000 pid_reset
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccs4iXaX.s:615    .rodata.pid_compute.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GetTick
printf
