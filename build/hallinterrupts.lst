ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"hallinterrupts.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.global	__aeabi_f2d
  17              		.global	__aeabi_dmul
  18              		.global	__aeabi_ddiv
  19              		.global	__aeabi_d2f
  20              		.section	.text.HallInterruptinit,"ax",%progbits
  21              		.align	1
  22              		.global	HallInterruptinit
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  26              		.fpu fpv4-sp-d16
  28              	HallInterruptinit:
  29              	.LFB126:
  30              		.file 1 "Src/hallinterrupts.c"
   1:Src/hallinterrupts.c **** /*
   2:Src/hallinterrupts.c **** * This file is part of the hoverboard-firmware-hack project.
   3:Src/hallinterrupts.c **** *
   4:Src/hallinterrupts.c **** * Copyright (C) 2018 Simon Hailes <btsimonh@googlemail.com>
   5:Src/hallinterrupts.c **** *
   6:Src/hallinterrupts.c **** * This program is free software: you can redistribute it and/or modify
   7:Src/hallinterrupts.c **** * it under the terms of the GNU General Public License as published by
   8:Src/hallinterrupts.c **** * the Free Software Foundation, either version 3 of the License, or
   9:Src/hallinterrupts.c **** * (at your option) any later version.
  10:Src/hallinterrupts.c **** *
  11:Src/hallinterrupts.c **** * This program is distributed in the hope that it will be useful,
  12:Src/hallinterrupts.c **** * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:Src/hallinterrupts.c **** * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:Src/hallinterrupts.c **** * GNU General Public License for more details.
  15:Src/hallinterrupts.c **** *
  16:Src/hallinterrupts.c **** * You should have received a copy of the GNU General Public License
  17:Src/hallinterrupts.c **** * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:Src/hallinterrupts.c **** */
  19:Src/hallinterrupts.c **** 
  20:Src/hallinterrupts.c **** #include "stm32f1xx_hal.h"
  21:Src/hallinterrupts.c **** #include "defines.h"
  22:Src/hallinterrupts.c **** #include "config.h"
  23:Src/hallinterrupts.c **** #include "hallinterrupts.h"
  24:Src/hallinterrupts.c **** #include <string.h>
  25:Src/hallinterrupts.c **** #include "control_structures.h"
  26:Src/hallinterrupts.c **** 
  27:Src/hallinterrupts.c **** #ifdef HALL_INTERRUPTS
  28:Src/hallinterrupts.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s 			page 2


  29:Src/hallinterrupts.c **** //////////////////////////////////////////////////////////////
  30:Src/hallinterrupts.c **** // file reads Hall sensors, and gets Distance and Speed.
  31:Src/hallinterrupts.c **** // Uses:
  32:Src/hallinterrupts.c **** // EXTI15_10_IRQHandler
  33:Src/hallinterrupts.c **** // EXTI9_5_IRQHandler
  34:Src/hallinterrupts.c **** // TIM4 running at 100khz, reloading 0xFFFF
  35:Src/hallinterrupts.c **** // TIM4_IRQHandler
  36:Src/hallinterrupts.c **** //////////////////////////////////////////////////////////////
  37:Src/hallinterrupts.c **** // Usage: just start with HallInterruptinit(void) and
  38:Src/hallinterrupts.c **** // read results from HALL_DATA_STRUCT HallData[2];
  39:Src/hallinterrupts.c **** //////////////////////////////////////////////////////////////
  40:Src/hallinterrupts.c **** // Notes:
  41:Src/hallinterrupts.c **** // for distance measurement and speed calculations, it defaults to 6.5" wheels.
  42:Src/hallinterrupts.c **** // this may be changed by calling:
  43:Src/hallinterrupts.c **** // void HallInterruptSetWheelDiameterInches(float inches);
  44:Src/hallinterrupts.c **** // or
  45:Src/hallinterrupts.c **** // void HallInterruptSetWheelDiameterMM(float mm);
  46:Src/hallinterrupts.c **** //
  47:Src/hallinterrupts.c **** // if you wish to reset the values in the structure completely, use:
  48:Src/hallinterrupts.c **** // void HallInterruptReset();
  49:Src/hallinterrupts.c **** // if you wish to read distance and spped, and optionally reset distance to zero,
  50:Src/hallinterrupts.c **** // then use:
  51:Src/hallinterrupts.c **** // void HallInterruptReadPosn( HALL_POSN *p, int Reset );
  52:Src/hallinterrupts.c **** //
  53:Src/hallinterrupts.c **** // NOTE: if the hall pins are reconfigured to NOT be in the set 5-9, 10-15
  54:Src/hallinterrupts.c **** // then mods will need to be made.
  55:Src/hallinterrupts.c **** //////////////////////////////////////////////////////////////
  56:Src/hallinterrupts.c **** 
  57:Src/hallinterrupts.c **** 
  58:Src/hallinterrupts.c **** 
  59:Src/hallinterrupts.c **** //////////////////////////////////////////////////////////////
  60:Src/hallinterrupts.c **** // this is the Hall data we gather, and can be read directly elsewhere
  61:Src/hallinterrupts.c **** // it CAN be read with interrupts disabled using
  62:Src/hallinterrupts.c **** // void HallInterruptReadPosn( HALL_POSN *p, int Reset )
  63:Src/hallinterrupts.c **** volatile HALL_DATA_STRUCT HallData[2];
  64:Src/hallinterrupts.c **** 
  65:Src/hallinterrupts.c **** volatile uint8_t hall_ul;
  66:Src/hallinterrupts.c **** volatile uint8_t hall_vl;
  67:Src/hallinterrupts.c **** volatile uint8_t hall_wl;
  68:Src/hallinterrupts.c **** 
  69:Src/hallinterrupts.c **** volatile uint8_t hall_ur;
  70:Src/hallinterrupts.c **** volatile uint8_t hall_vr;
  71:Src/hallinterrupts.c **** volatile uint8_t hall_wr;
  72:Src/hallinterrupts.c **** 
  73:Src/hallinterrupts.c **** volatile unsigned  bldc_count_per_hall[2] = {0, 0};
  74:Src/hallinterrupts.c **** extern volatile unsigned  bldc_count_per_hall_counter[2];
  75:Src/hallinterrupts.c **** 
  76:Src/hallinterrupts.c **** //////////////////////////////////////////////////////////////
  77:Src/hallinterrupts.c **** // local data
  78:Src/hallinterrupts.c **** TIM_HandleTypeDef h_timer_hall;
  79:Src/hallinterrupts.c **** volatile HALL_PARAMS local_hall_params[2];
  80:Src/hallinterrupts.c **** 
  81:Src/hallinterrupts.c **** volatile long long timerwraps = 0;
  82:Src/hallinterrupts.c **** 
  83:Src/hallinterrupts.c **** static float WheelSize_mm = (DEFAULT_WHEEL_SIZE_INCHES * 25.4);
  84:Src/hallinterrupts.c **** 
  85:Src/hallinterrupts.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s 			page 3


  86:Src/hallinterrupts.c **** 
  87:Src/hallinterrupts.c **** //////////////////////////////////////////////////////////////
  88:Src/hallinterrupts.c **** // intialisation for interrupts from hall sensor edges
  89:Src/hallinterrupts.c **** void HallInterruptinit(void){
  31              		.loc 1 89 0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 8
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35 0000 70B5     		push	{r4, r5, r6, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 16
  38              		.cfi_offset 4, -16
  39              		.cfi_offset 5, -12
  40              		.cfi_offset 6, -8
  41              		.cfi_offset 14, -4
  42 0002 82B0     		sub	sp, sp, #8
  43              	.LCFI1:
  44              		.cfi_def_cfa_offset 24
  90:Src/hallinterrupts.c ****     memset((void *)&HallData, 0, sizeof(HallData));
  45              		.loc 1 90 0
  46 0004 404E     		ldr	r6, .L3+8
  47 0006 4822     		movs	r2, #72
  48 0008 0021     		movs	r1, #0
  49 000a 3046     		mov	r0, r6
  50 000c FFF7FEFF 		bl	memset
  51              	.LVL0:
  91:Src/hallinterrupts.c ****     memset((void *)&local_hall_params, 0, sizeof(local_hall_params));
  52              		.loc 1 91 0
  53 0010 3E4C     		ldr	r4, .L3+12
  54 0012 6222     		movs	r2, #98
  55 0014 0021     		movs	r1, #0
  56 0016 2046     		mov	r0, r4
  57 0018 FFF7FEFF 		bl	memset
  58              	.LVL1:
  92:Src/hallinterrupts.c ****     #ifdef INVERT_L_DIRECTION
  93:Src/hallinterrupts.c ****         local_hall_params[LEFT].direction = -1;
  94:Src/hallinterrupts.c ****     #else
  95:Src/hallinterrupts.c ****         local_hall_params[LEFT].direction = 1;
  59              		.loc 1 95 0
  60 001c 94F82530 		ldrb	r3, [r4, #37]	@ zero_extendqisi2
  61 0020 0025     		movs	r5, #0
  62 0022 0123     		movs	r3, #1
  63 0024 84F82530 		strb	r3, [r4, #37]
  64 0028 94F82630 		ldrb	r3, [r4, #38]	@ zero_extendqisi2
  65 002c 84F82650 		strb	r5, [r4, #38]
  66 0030 94F82730 		ldrb	r3, [r4, #39]	@ zero_extendqisi2
  67 0034 84F82750 		strb	r5, [r4, #39]
  68 0038 94F82830 		ldrb	r3, [r4, #40]	@ zero_extendqisi2
  69 003c 84F82850 		strb	r5, [r4, #40]
  96:Src/hallinterrupts.c ****     #endif
  97:Src/hallinterrupts.c ****     #ifdef INVERT_R_DIRECTION
  98:Src/hallinterrupts.c ****         local_hall_params[RIGHT].direction = 1;
  99:Src/hallinterrupts.c ****     #else
 100:Src/hallinterrupts.c ****         local_hall_params[RIGHT].direction = -1;
  70              		.loc 1 100 0
  71 0040 94F85630 		ldrb	r3, [r4, #86]	@ zero_extendqisi2
  72 0044 4FF0FF33 		mov	r3, #-1
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s 			page 4


  73 0048 84F85630 		strb	r3, [r4, #86]
  74 004c 94F85720 		ldrb	r2, [r4, #87]	@ zero_extendqisi2
  75 0050 84F85730 		strb	r3, [r4, #87]
  76 0054 94F85820 		ldrb	r2, [r4, #88]	@ zero_extendqisi2
  77 0058 84F85830 		strb	r3, [r4, #88]
  78 005c 94F85920 		ldrb	r2, [r4, #89]	@ zero_extendqisi2
  79 0060 84F85930 		strb	r3, [r4, #89]
 101:Src/hallinterrupts.c ****     #endif
 102:Src/hallinterrupts.c **** 
 103:Src/hallinterrupts.c ****     // overrides local fle default
 104:Src/hallinterrupts.c ****     #ifdef WHEEL_SIZE_INCHES
 105:Src/hallinterrupts.c ****     WheelSize_mm = (WHEEL_SIZE_INCHES * 25.4);
 106:Src/hallinterrupts.c ****     #endif
 107:Src/hallinterrupts.c **** 
 108:Src/hallinterrupts.c ****     HallData[0].HallPosnMultiplier = (float)((WheelSize_mm*3.14159265359)/(float)HALL_POSN_PER_REV)
  80              		.loc 1 108 0
  81 0064 2A4B     		ldr	r3, .L3+16
  82 0066 1868     		ldr	r0, [r3]	@ float
  83 0068 FFF7FEFF 		bl	__aeabi_f2d
  84              	.LVL2:
  85 006c 24A3     		adr	r3, .L3
  86 006e D3E90023 		ldrd	r2, [r3]
  87 0072 FFF7FEFF 		bl	__aeabi_dmul
  88              	.LVL3:
  89 0076 0022     		movs	r2, #0
  90 0078 264B     		ldr	r3, .L3+20
  91 007a FFF7FEFF 		bl	__aeabi_ddiv
  92              	.LVL4:
  93 007e FFF7FEFF 		bl	__aeabi_d2f
  94              	.LVL5:
  95 0082 B060     		str	r0, [r6, #8]	@ float
 109:Src/hallinterrupts.c ****     HallData[1].HallPosnMultiplier = (float)((WheelSize_mm*3.14159265359)/(float)HALL_POSN_PER_REV)
  96              		.loc 1 109 0
  97 0084 F062     		str	r0, [r6, #44]	@ float
  98              	.LBB17:
 110:Src/hallinterrupts.c **** 
 111:Src/hallinterrupts.c ****     // setup TIM4:
 112:Src/hallinterrupts.c ****     __HAL_RCC_TIM4_CLK_ENABLE();
  99              		.loc 1 112 0
 100 0086 244B     		ldr	r3, .L3+24
 101 0088 DA69     		ldr	r2, [r3, #28]
 102 008a 42F00402 		orr	r2, r2, #4
 103 008e DA61     		str	r2, [r3, #28]
 104 0090 DB69     		ldr	r3, [r3, #28]
 105 0092 03F00403 		and	r3, r3, #4
 106 0096 0193     		str	r3, [sp, #4]
 107 0098 019B     		ldr	r3, [sp, #4]
 108              	.LBE17:
 113:Src/hallinterrupts.c ****     h_timer_hall.Instance = TIM4;
 109              		.loc 1 113 0
 110 009a 204C     		ldr	r4, .L3+28
 111 009c 204B     		ldr	r3, .L3+32
 112 009e 2360     		str	r3, [r4]
 114:Src/hallinterrupts.c ****     h_timer_hall.Init.Prescaler         = 64000000 / 2 / HALL_INTERRUPT_TIMER_FREQ;
 113              		.loc 1 114 0
 114 00a0 4FF4A073 		mov	r3, #320
 115 00a4 6360     		str	r3, [r4, #4]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s 			page 5


 115:Src/hallinterrupts.c ****     h_timer_hall.Init.CounterMode       = TIM_COUNTERMODE_UP;
 116              		.loc 1 115 0
 117 00a6 A560     		str	r5, [r4, #8]
 116:Src/hallinterrupts.c ****     h_timer_hall.Init.Period            = 0xFFFF; // we just want the timer to wrap
 118              		.loc 1 116 0
 119 00a8 4FF6FF73 		movw	r3, #65535
 120 00ac E360     		str	r3, [r4, #12]
 117:Src/hallinterrupts.c ****     h_timer_hall.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 121              		.loc 1 117 0
 122 00ae 2561     		str	r5, [r4, #16]
 118:Src/hallinterrupts.c ****     h_timer_hall.Init.RepetitionCounter = 0;
 123              		.loc 1 118 0
 124 00b0 6561     		str	r5, [r4, #20]
 119:Src/hallinterrupts.c ****     h_timer_hall.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 125              		.loc 1 119 0
 126 00b2 A561     		str	r5, [r4, #24]
 120:Src/hallinterrupts.c ****     HAL_TIM_Base_Init(&h_timer_hall);
 127              		.loc 1 120 0
 128 00b4 2046     		mov	r0, r4
 129 00b6 FFF7FEFF 		bl	HAL_TIM_Base_Init
 130              	.LVL6:
 121:Src/hallinterrupts.c ****     HAL_TIM_Base_Start(&h_timer_hall);
 131              		.loc 1 121 0
 132 00ba 2046     		mov	r0, r4
 133 00bc FFF7FEFF 		bl	HAL_TIM_Base_Start
 134              	.LVL7:
 122:Src/hallinterrupts.c **** 
 123:Src/hallinterrupts.c ****     // generate an interrupt every time the timer wraps it's 16 bit limit.
 124:Src/hallinterrupts.c ****     __HAL_TIM_ENABLE_IT(&h_timer_hall, TIM_IT_UPDATE);
 135              		.loc 1 124 0
 136 00c0 2268     		ldr	r2, [r4]
 137 00c2 D368     		ldr	r3, [r2, #12]
 138 00c4 43F00103 		orr	r3, r3, #1
 139 00c8 D360     		str	r3, [r2, #12]
 125:Src/hallinterrupts.c ****     HAL_NVIC_SetPriority(TMR4_GLOBAL_IRQn, 1, 0);
 140              		.loc 1 125 0
 141 00ca 2A46     		mov	r2, r5
 142 00cc 0121     		movs	r1, #1
 143 00ce 1E20     		movs	r0, #30
 144 00d0 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 145              	.LVL8:
 126:Src/hallinterrupts.c ****     HAL_NVIC_EnableIRQ(TMR4_GLOBAL_IRQn);
 146              		.loc 1 126 0
 147 00d4 1E20     		movs	r0, #30
 148 00d6 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 149              	.LVL9:
 127:Src/hallinterrupts.c **** 
 128:Src/hallinterrupts.c ****     // enable IRQs for type hall effect sensor GPIOs.
 129:Src/hallinterrupts.c ****     HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 150              		.loc 1 129 0
 151 00da 2A46     		mov	r2, r5
 152 00dc 0321     		movs	r1, #3
 153 00de 1720     		movs	r0, #23
 154 00e0 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 155              	.LVL10:
 130:Src/hallinterrupts.c ****     HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 156              		.loc 1 130 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s 			page 6


 157 00e4 1720     		movs	r0, #23
 158 00e6 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 159              	.LVL11:
 131:Src/hallinterrupts.c ****     HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 160              		.loc 1 131 0
 161 00ea 2A46     		mov	r2, r5
 162 00ec 0321     		movs	r1, #3
 163 00ee 2820     		movs	r0, #40
 164 00f0 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 165              	.LVL12:
 132:Src/hallinterrupts.c ****     HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 166              		.loc 1 132 0
 167 00f4 2820     		movs	r0, #40
 168 00f6 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 169              	.LVL13:
 133:Src/hallinterrupts.c **** }
 170              		.loc 1 133 0
 171 00fa 02B0     		add	sp, sp, #8
 172              	.LCFI2:
 173              		.cfi_def_cfa_offset 16
 174              		@ sp needed
 175 00fc 70BD     		pop	{r4, r5, r6, pc}
 176              	.L4:
 177 00fe 00BF     		.align	3
 178              	.L3:
 179 0100 EA2E4454 		.word	1413754602
 180 0104 FB210940 		.word	1074340347
 181 0108 00000000 		.word	HallData
 182 010c 00000000 		.word	local_hall_params
 183 0110 00000000 		.word	.LANCHOR0
 184 0114 00805640 		.word	1079410688
 185 0118 00100240 		.word	1073876992
 186 011c 00000000 		.word	h_timer_hall
 187 0120 00080040 		.word	1073743872
 188              		.cfi_endproc
 189              	.LFE126:
 191              		.section	.text.HallInterruptSetWheelDiameterInches,"ax",%progbits
 192              		.align	1
 193              		.global	HallInterruptSetWheelDiameterInches
 194              		.syntax unified
 195              		.thumb
 196              		.thumb_func
 197              		.fpu fpv4-sp-d16
 199              	HallInterruptSetWheelDiameterInches:
 200              	.LFB127:
 134:Src/hallinterrupts.c **** 
 135:Src/hallinterrupts.c **** 
 136:Src/hallinterrupts.c **** //////////////////////////////////////////////////////////////
 137:Src/hallinterrupts.c **** // optionaly change the wheel diameter fromt he default of 6.5" using inches
 138:Src/hallinterrupts.c **** void HallInterruptSetWheelDiameterInches(float inches){
 201              		.loc 1 138 0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 0
 204              		@ frame_needed = 0, uses_anonymous_args = 0
 205              	.LVL14:
 206 0000 08B5     		push	{r3, lr}
 207              	.LCFI3:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s 			page 7


 208              		.cfi_def_cfa_offset 8
 209              		.cfi_offset 3, -8
 210              		.cfi_offset 14, -4
 139:Src/hallinterrupts.c ****     WheelSize_mm = inches * 25.4;
 211              		.loc 1 139 0
 212 0002 FFF7FEFF 		bl	__aeabi_f2d
 213              	.LVL15:
 214 0006 13A3     		adr	r3, .L7+20
 215 0008 D3E90023 		ldrd	r2, [r3]
 216 000c FFF7FEFF 		bl	__aeabi_dmul
 217              	.LVL16:
 218 0010 FFF7FEFF 		bl	__aeabi_d2f
 219              	.LVL17:
 220 0014 0C4B     		ldr	r3, .L7+8
 221 0016 1860     		str	r0, [r3]	@ float
 140:Src/hallinterrupts.c ****     HallData[0].HallPosnMultiplier = (float)((WheelSize_mm*3.14159265359)/(float)HALL_POSN_PER_REV)
 222              		.loc 1 140 0
 223 0018 FFF7FEFF 		bl	__aeabi_f2d
 224              	.LVL18:
 225 001c 08A3     		adr	r3, .L7
 226 001e D3E90023 		ldrd	r2, [r3]
 227 0022 FFF7FEFF 		bl	__aeabi_dmul
 228              	.LVL19:
 229 0026 0022     		movs	r2, #0
 230 0028 084B     		ldr	r3, .L7+12
 231 002a FFF7FEFF 		bl	__aeabi_ddiv
 232              	.LVL20:
 233 002e FFF7FEFF 		bl	__aeabi_d2f
 234              	.LVL21:
 235 0032 074B     		ldr	r3, .L7+16
 236 0034 9860     		str	r0, [r3, #8]	@ float
 141:Src/hallinterrupts.c ****     HallData[1].HallPosnMultiplier = (float)((WheelSize_mm*3.14159265359)/(float)HALL_POSN_PER_REV)
 237              		.loc 1 141 0
 238 0036 D862     		str	r0, [r3, #44]	@ float
 142:Src/hallinterrupts.c **** }
 239              		.loc 1 142 0
 240 0038 08BD     		pop	{r3, pc}
 241              	.L8:
 242 003a 00BFAFF3 		.align	3
 242      0080
 243              	.L7:
 244 0040 EA2E4454 		.word	1413754602
 245 0044 FB210940 		.word	1074340347
 246 0048 00000000 		.word	.LANCHOR0
 247 004c 00805640 		.word	1079410688
 248 0050 00000000 		.word	HallData
 249 0054 66666666 		.word	1717986918
 250 0058 66663940 		.word	1077503590
 251              		.cfi_endproc
 252              	.LFE127:
 254              		.section	.text.HallInterruptSetWheelDiameterMM,"ax",%progbits
 255              		.align	1
 256              		.global	HallInterruptSetWheelDiameterMM
 257              		.syntax unified
 258              		.thumb
 259              		.thumb_func
 260              		.fpu fpv4-sp-d16
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s 			page 8


 262              	HallInterruptSetWheelDiameterMM:
 263              	.LFB128:
 143:Src/hallinterrupts.c **** //////////////////////////////////////////////////////////////
 144:Src/hallinterrupts.c **** // optionaly change the wheel diameter fromt he default of 6.5" using mm
 145:Src/hallinterrupts.c **** void HallInterruptSetWheelDiameterMM(float mm){
 264              		.loc 1 145 0
 265              		.cfi_startproc
 266              		@ args = 0, pretend = 0, frame = 0
 267              		@ frame_needed = 0, uses_anonymous_args = 0
 268              	.LVL22:
 269 0000 08B5     		push	{r3, lr}
 270              	.LCFI4:
 271              		.cfi_def_cfa_offset 8
 272              		.cfi_offset 3, -8
 273              		.cfi_offset 14, -4
 146:Src/hallinterrupts.c ****     WheelSize_mm = mm;
 274              		.loc 1 146 0
 275 0002 0B4B     		ldr	r3, .L11+8
 276 0004 1860     		str	r0, [r3]	@ float
 147:Src/hallinterrupts.c ****     HallData[0].HallPosnMultiplier = (float)((WheelSize_mm*3.14159265359)/(float)HALL_POSN_PER_REV)
 277              		.loc 1 147 0
 278 0006 FFF7FEFF 		bl	__aeabi_f2d
 279              	.LVL23:
 280 000a 07A3     		adr	r3, .L11
 281 000c D3E90023 		ldrd	r2, [r3]
 282 0010 FFF7FEFF 		bl	__aeabi_dmul
 283              	.LVL24:
 284 0014 0022     		movs	r2, #0
 285 0016 074B     		ldr	r3, .L11+12
 286 0018 FFF7FEFF 		bl	__aeabi_ddiv
 287              	.LVL25:
 288 001c FFF7FEFF 		bl	__aeabi_d2f
 289              	.LVL26:
 290 0020 054B     		ldr	r3, .L11+16
 291 0022 9860     		str	r0, [r3, #8]	@ float
 148:Src/hallinterrupts.c ****     HallData[1].HallPosnMultiplier = (float)((WheelSize_mm*3.14159265359)/(float)HALL_POSN_PER_REV)
 292              		.loc 1 148 0
 293 0024 D862     		str	r0, [r3, #44]	@ float
 149:Src/hallinterrupts.c **** }
 294              		.loc 1 149 0
 295 0026 08BD     		pop	{r3, pc}
 296              	.L12:
 297              		.align	3
 298              	.L11:
 299 0028 EA2E4454 		.word	1413754602
 300 002c FB210940 		.word	1074340347
 301 0030 00000000 		.word	.LANCHOR0
 302 0034 00805640 		.word	1079410688
 303 0038 00000000 		.word	HallData
 304              		.cfi_endproc
 305              	.LFE128:
 307              		.section	.text.HallInterruptReset,"ax",%progbits
 308              		.align	1
 309              		.global	HallInterruptReset
 310              		.syntax unified
 311              		.thumb
 312              		.thumb_func
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s 			page 9


 313              		.fpu fpv4-sp-d16
 315              	HallInterruptReset:
 316              	.LFB129:
 150:Src/hallinterrupts.c **** 
 151:Src/hallinterrupts.c **** //////////////////////////////////////////////////////////////
 152:Src/hallinterrupts.c **** // reset the whole structure.
 153:Src/hallinterrupts.c **** // note that this will then miss the first transition, as it will have no
 154:Src/hallinterrupts.c **** // 'last' information.
 155:Src/hallinterrupts.c **** void HallInterruptReset(){
 317              		.loc 1 155 0
 318              		.cfi_startproc
 319              		@ args = 0, pretend = 0, frame = 0
 320              		@ frame_needed = 0, uses_anonymous_args = 0
 321 0000 38B5     		push	{r3, r4, r5, lr}
 322              	.LCFI5:
 323              		.cfi_def_cfa_offset 16
 324              		.cfi_offset 3, -16
 325              		.cfi_offset 4, -12
 326              		.cfi_offset 5, -8
 327              		.cfi_offset 14, -4
 328              	.LBB18:
 329              	.LBB19:
 330              		.file 2 "Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h"
   1:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** 
   9:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** 
  34:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s 			page 10


  35:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** 
  38:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** 
  46:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** 
  47:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** 
  53:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** {
  60:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** }
  62:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** 
  63:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** 
  64:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** {
  71:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 331              		.loc 2 71 0
 332              		.syntax unified
 333              	@ 71 "Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h" 1
 334 0002 72B6     		cpsid i
 335              	@ 0 "" 2
 336              		.thumb
 337              		.syntax unified
 338              	.LBE19:
 339              	.LBE18:
 156:Src/hallinterrupts.c ****     __disable_irq(); // but we want both values at the same time, without interferance
 157:Src/hallinterrupts.c ****     HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 340              		.loc 1 157 0
 341 0004 1720     		movs	r0, #23
 342 0006 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 343              	.LVL27:
 344              	.LBB20:
 345              	.LBB21:
  60:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** }
 346              		.loc 2 60 0
 347              		.syntax unified
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s 			page 11


 348              	@ 60 "Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h" 1
 349 000a 62B6     		cpsie i
 350              	@ 0 "" 2
 351              		.thumb
 352              		.syntax unified
 353              	.LBE21:
 354              	.LBE20:
 158:Src/hallinterrupts.c ****     //HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 159:Src/hallinterrupts.c ****     __enable_irq();
 160:Src/hallinterrupts.c ****     memset((void *)&HallData, 0, sizeof(HallData));
 355              		.loc 1 160 0
 356 000c 264D     		ldr	r5, .L15+8
 357 000e 4822     		movs	r2, #72
 358 0010 0021     		movs	r1, #0
 359 0012 2846     		mov	r0, r5
 360 0014 FFF7FEFF 		bl	memset
 361              	.LVL28:
 161:Src/hallinterrupts.c ****     memset((void *)&local_hall_params, 0, sizeof(local_hall_params));
 362              		.loc 1 161 0
 363 0018 244C     		ldr	r4, .L15+12
 364 001a 6222     		movs	r2, #98
 365 001c 0021     		movs	r1, #0
 366 001e 2046     		mov	r0, r4
 367 0020 FFF7FEFF 		bl	memset
 368              	.LVL29:
 162:Src/hallinterrupts.c ****     #ifdef INVERT_L_DIRECTION
 163:Src/hallinterrupts.c ****         local_hall_params[LEFT].direction = -1;
 164:Src/hallinterrupts.c ****     #else
 165:Src/hallinterrupts.c ****         local_hall_params[LEFT].direction = 1;
 369              		.loc 1 165 0
 370 0024 94F82530 		ldrb	r3, [r4, #37]	@ zero_extendqisi2
 371 0028 0023     		movs	r3, #0
 372 002a 0122     		movs	r2, #1
 373 002c 84F82520 		strb	r2, [r4, #37]
 374 0030 94F82620 		ldrb	r2, [r4, #38]	@ zero_extendqisi2
 375 0034 84F82630 		strb	r3, [r4, #38]
 376 0038 94F82720 		ldrb	r2, [r4, #39]	@ zero_extendqisi2
 377 003c 84F82730 		strb	r3, [r4, #39]
 378 0040 94F82820 		ldrb	r2, [r4, #40]	@ zero_extendqisi2
 379 0044 84F82830 		strb	r3, [r4, #40]
 166:Src/hallinterrupts.c ****     #endif
 167:Src/hallinterrupts.c ****     #ifdef INVERT_R_DIRECTION
 168:Src/hallinterrupts.c ****         local_hall_params[RIGHT].direction = 1;
 169:Src/hallinterrupts.c ****     #else
 170:Src/hallinterrupts.c ****         local_hall_params[RIGHT].direction = -1;
 380              		.loc 1 170 0
 381 0048 94F85630 		ldrb	r3, [r4, #86]	@ zero_extendqisi2
 382 004c 4FF0FF33 		mov	r3, #-1
 383 0050 84F85630 		strb	r3, [r4, #86]
 384 0054 94F85720 		ldrb	r2, [r4, #87]	@ zero_extendqisi2
 385 0058 84F85730 		strb	r3, [r4, #87]
 386 005c 94F85820 		ldrb	r2, [r4, #88]	@ zero_extendqisi2
 387 0060 84F85830 		strb	r3, [r4, #88]
 388 0064 94F85920 		ldrb	r2, [r4, #89]	@ zero_extendqisi2
 389 0068 84F85930 		strb	r3, [r4, #89]
 171:Src/hallinterrupts.c ****     #endif
 172:Src/hallinterrupts.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s 			page 12


 173:Src/hallinterrupts.c ****     HallData[0].HallPosnMultiplier = (float)((WheelSize_mm*3.14159265359)/(float)HALL_POSN_PER_REV)
 390              		.loc 1 173 0
 391 006c 104B     		ldr	r3, .L15+16
 392 006e 1868     		ldr	r0, [r3]	@ float
 393 0070 FFF7FEFF 		bl	__aeabi_f2d
 394              	.LVL30:
 395 0074 0AA3     		adr	r3, .L15
 396 0076 D3E90023 		ldrd	r2, [r3]
 397 007a FFF7FEFF 		bl	__aeabi_dmul
 398              	.LVL31:
 399 007e 0022     		movs	r2, #0
 400 0080 0C4B     		ldr	r3, .L15+20
 401 0082 FFF7FEFF 		bl	__aeabi_ddiv
 402              	.LVL32:
 403 0086 FFF7FEFF 		bl	__aeabi_d2f
 404              	.LVL33:
 405 008a A860     		str	r0, [r5, #8]	@ float
 174:Src/hallinterrupts.c ****     HallData[1].HallPosnMultiplier = (float)((WheelSize_mm*3.14159265359)/(float)HALL_POSN_PER_REV)
 406              		.loc 1 174 0
 407 008c E862     		str	r0, [r5, #44]	@ float
 175:Src/hallinterrupts.c ****     HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 408              		.loc 1 175 0
 409 008e 1720     		movs	r0, #23
 410 0090 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 411              	.LVL34:
 176:Src/hallinterrupts.c ****     HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 412              		.loc 1 176 0
 413 0094 2820     		movs	r0, #40
 414 0096 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 415              	.LVL35:
 177:Src/hallinterrupts.c **** }
 416              		.loc 1 177 0
 417 009a 38BD     		pop	{r3, r4, r5, pc}
 418              	.L16:
 419 009c AFF30080 		.align	3
 420              	.L15:
 421 00a0 EA2E4454 		.word	1413754602
 422 00a4 FB210940 		.word	1074340347
 423 00a8 00000000 		.word	HallData
 424 00ac 00000000 		.word	local_hall_params
 425 00b0 00000000 		.word	.LANCHOR0
 426 00b4 00805640 		.word	1079410688
 427              		.cfi_endproc
 428              	.LFE129:
 430              		.section	.text.HallInterruptReadPosn,"ax",%progbits
 431              		.align	1
 432              		.global	HallInterruptReadPosn
 433              		.syntax unified
 434              		.thumb
 435              		.thumb_func
 436              		.fpu fpv4-sp-d16
 438              	HallInterruptReadPosn:
 439              	.LFB130:
 178:Src/hallinterrupts.c **** 
 179:Src/hallinterrupts.c **** 
 180:Src/hallinterrupts.c **** //////////////////////////////////////////////////////////////
 181:Src/hallinterrupts.c **** // read values with interupts disabled
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s 			page 13


 182:Src/hallinterrupts.c **** // optionally reset posn to zero.
 183:Src/hallinterrupts.c **** //
 184:Src/hallinterrupts.c **** void HallInterruptReadPosn( HALL_POSN *p, int Reset ){
 440              		.loc 1 184 0
 441              		.cfi_startproc
 442              		@ args = 0, pretend = 0, frame = 0
 443              		@ frame_needed = 0, uses_anonymous_args = 0
 444              	.LVL36:
 445 0000 70B5     		push	{r4, r5, r6, lr}
 446              	.LCFI6:
 447              		.cfi_def_cfa_offset 16
 448              		.cfi_offset 4, -16
 449              		.cfi_offset 5, -12
 450              		.cfi_offset 6, -8
 451              		.cfi_offset 14, -4
 452 0002 0446     		mov	r4, r0
 453 0004 0D46     		mov	r5, r1
 454              	.LBB22:
 455              	.LBB23:
 456              		.loc 2 71 0
 457              		.syntax unified
 458              	@ 71 "Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h" 1
 459 0006 72B6     		cpsid i
 460              	@ 0 "" 2
 461              		.thumb
 462              		.syntax unified
 463              	.LBE23:
 464              	.LBE22:
 185:Src/hallinterrupts.c ****     __disable_irq(); // but we want both values at the same time, without interferance
 186:Src/hallinterrupts.c ****     HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 465              		.loc 1 186 0
 466 0008 1720     		movs	r0, #23
 467              	.LVL37:
 468 000a FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 469              	.LVL38:
 470              	.LBB24:
 471              	.LBB25:
  60:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** }
 472              		.loc 2 60 0
 473              		.syntax unified
 474              	@ 60 "Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h" 1
 475 000e 62B6     		cpsie i
 476              	@ 0 "" 2
 477              	.LVL39:
 478              		.thumb
 479              		.syntax unified
 480              	.LBE25:
 481              	.LBE24:
 482              	.LBB26:
 187:Src/hallinterrupts.c ****     //HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 188:Src/hallinterrupts.c ****     __enable_irq();
 189:Src/hallinterrupts.c ****     for (int i = 0; i < 2; i++){
 483              		.loc 1 189 0
 484 0010 0023     		movs	r3, #0
 485 0012 00E0     		b	.L18
 486              	.LVL40:
 487              	.L19:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s 			page 14


 488              		.loc 1 189 0 is_stmt 0 discriminator 2
 489 0014 0133     		adds	r3, r3, #1
 490              	.LVL41:
 491              	.L18:
 492              		.loc 1 189 0 discriminator 1
 493 0016 012B     		cmp	r3, #1
 494 0018 1DDC     		bgt	.L22
 190:Src/hallinterrupts.c ****         p->wheel[i].HallPosn = HallData[i].HallPosn;
 495              		.loc 1 190 0 is_stmt 1
 496 001a 124E     		ldr	r6, .L23
 497 001c DA00     		lsls	r2, r3, #3
 498 001e 1A44     		add	r2, r2, r3
 499 0020 9000     		lsls	r0, r2, #2
 500 0022 3118     		adds	r1, r6, r0
 501 0024 3658     		ldr	r6, [r6, r0]
 502 0026 9A00     		lsls	r2, r3, #2
 503 0028 1A44     		add	r2, r2, r3
 504 002a 9000     		lsls	r0, r2, #2
 505 002c 2218     		adds	r2, r4, r0
 506 002e 2650     		str	r6, [r4, r0]
 191:Src/hallinterrupts.c ****         p->wheel[i].HallPosn_mm = HallData[i].HallPosn_mm;
 507              		.loc 1 191 0
 508 0030 0869     		ldr	r0, [r1, #16]
 509 0032 9060     		str	r0, [r2, #8]
 192:Src/hallinterrupts.c ****         p->wheel[i].HallSpeed = HallData[i].HallSpeed;
 510              		.loc 1 192 0
 511 0034 4868     		ldr	r0, [r1, #4]
 512 0036 5060     		str	r0, [r2, #4]
 193:Src/hallinterrupts.c ****         p->wheel[i].HallSpeed_mm_per_s = HallData[i].HallSpeed_mm_per_s;
 513              		.loc 1 193 0
 514 0038 8869     		ldr	r0, [r1, #24]
 515 003a D060     		str	r0, [r2, #12]
 194:Src/hallinterrupts.c ****         p->wheel[i].HallSkipped = HallData[i].HallSkipped;
 516              		.loc 1 194 0
 517 003c 096A     		ldr	r1, [r1, #32]
 518 003e 1161     		str	r1, [r2, #16]
 195:Src/hallinterrupts.c **** 
 196:Src/hallinterrupts.c ****         if (Reset){
 519              		.loc 1 196 0
 520 0040 002D     		cmp	r5, #0
 521 0042 E7D0     		beq	.L19
 197:Src/hallinterrupts.c ****             HallData[i].HallPosn = 0;
 522              		.loc 1 197 0
 523 0044 0748     		ldr	r0, .L23
 524 0046 DA00     		lsls	r2, r3, #3
 525 0048 1A44     		add	r2, r2, r3
 526 004a 9100     		lsls	r1, r2, #2
 527 004c 4618     		adds	r6, r0, r1
 528 004e 0022     		movs	r2, #0
 529 0050 4250     		str	r2, [r0, r1]
 198:Src/hallinterrupts.c ****             HallData[i].HallPosn_mm = 0;
 530              		.loc 1 198 0
 531 0052 3261     		str	r2, [r6, #16]
 532 0054 DEE7     		b	.L19
 533              	.L22:
 534              	.LBE26:
 199:Src/hallinterrupts.c ****         }
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s 			page 15


 200:Src/hallinterrupts.c ****     }
 201:Src/hallinterrupts.c ****     HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 535              		.loc 1 201 0
 536 0056 1720     		movs	r0, #23
 537 0058 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 538              	.LVL42:
 202:Src/hallinterrupts.c ****     HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 539              		.loc 1 202 0
 540 005c 2820     		movs	r0, #40
 541 005e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 542              	.LVL43:
 203:Src/hallinterrupts.c **** }
 543              		.loc 1 203 0
 544 0062 70BD     		pop	{r4, r5, r6, pc}
 545              	.LVL44:
 546              	.L24:
 547              		.align	2
 548              	.L23:
 549 0064 00000000 		.word	HallData
 550              		.cfi_endproc
 551              	.LFE130:
 553              		.section	.text.HallGetuS,"ax",%progbits
 554              		.align	1
 555              		.global	HallGetuS
 556              		.syntax unified
 557              		.thumb
 558              		.thumb_func
 559              		.fpu fpv4-sp-d16
 561              	HallGetuS:
 562              	.LFB131:
 204:Src/hallinterrupts.c **** 
 205:Src/hallinterrupts.c **** 
 206:Src/hallinterrupts.c **** 
 207:Src/hallinterrupts.c **** //////////////////////////////////////////////////////////////
 208:Src/hallinterrupts.c **** // the hall sensors change 1 bit at a time.
 209:Src/hallinterrupts.c **** // the transtion tells us the direction of movement.
 210:Src/hallinterrupts.c **** // this table is [last hall value][new hall value], and gives the
 211:Src/hallinterrupts.c **** // direction of movement.
 212:Src/hallinterrupts.c **** // table values of 0 represent 'illegal' transitions -
 213:Src/hallinterrupts.c **** // i.e. if we see a 0 out, then we missed an interrupt
 214:Src/hallinterrupts.c **** // (never seen in practice yet)
 215:Src/hallinterrupts.c **** static const int increments[7][7] =
 216:Src/hallinterrupts.c **** {
 217:Src/hallinterrupts.c ****     {  0,  0,  0,  0,  0,  0,  0 },
 218:Src/hallinterrupts.c ****     {  0,  0,  0, -1,  0,  1,  0 },
 219:Src/hallinterrupts.c ****     {  0,  0,  0,  1,  0,  0, -1 },
 220:Src/hallinterrupts.c ****     {  0,  1, -1,  0,  0,  0,  0 },
 221:Src/hallinterrupts.c ****     {  0,  0,  0,  0,  0, -1,  1 },
 222:Src/hallinterrupts.c ****     {  0, -1,  0,  0,  1,  0,  0 },
 223:Src/hallinterrupts.c ****     {  0,  0,  1,  0, -1,  0,  0 },
 224:Src/hallinterrupts.c **** };
 225:Src/hallinterrupts.c **** 
 226:Src/hallinterrupts.c **** 
 227:Src/hallinterrupts.c **** TIME_STATS timeStats;
 228:Src/hallinterrupts.c **** 
 229:Src/hallinterrupts.c **** static volatile long long now_us = 0;
 230:Src/hallinterrupts.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s 			page 16


 231:Src/hallinterrupts.c **** long long HallGetuS(){
 563              		.loc 1 231 0
 564              		.cfi_startproc
 565              		@ args = 0, pretend = 0, frame = 0
 566              		@ frame_needed = 0, uses_anonymous_args = 0
 567              		@ link register save eliminated.
 568 0000 2DE93008 		push	{r4, r5, fp}
 569              	.LCFI7:
 570              		.cfi_def_cfa_offset 12
 571              		.cfi_offset 4, -12
 572              		.cfi_offset 5, -8
 573              		.cfi_offset 11, -4
 232:Src/hallinterrupts.c ****     unsigned short time = h_timer_hall.Instance->CNT;
 574              		.loc 1 232 0
 575 0004 114B     		ldr	r3, .L27
 576 0006 1B68     		ldr	r3, [r3]
 577 0008 5A6A     		ldr	r2, [r3, #36]
 578              	.LVL45:
 233:Src/hallinterrupts.c ****     long long timerwraps_copy = timerwraps;
 579              		.loc 1 233 0
 580 000a 114B     		ldr	r3, .L27+4
 581 000c D3E90045 		ldrd	r4, [r3]
 582              	.LVL46:
 234:Src/hallinterrupts.c ****     now_us = ((timerwraps_copy<<16) + time) * 10;
 583              		.loc 1 234 0
 584 0010 4FEA054C 		lsl	ip, r5, #16
 585 0014 4CEA144C 		orr	ip, ip, r4, lsr #16
 586 0018 4FEA044B 		lsl	fp, r4, #16
 587 001c 92B2     		uxth	r2, r2
 588 001e 0023     		movs	r3, #0
 589 0020 1BEB0200 		adds	r0, fp, r2
 590 0024 4CEB0301 		adc	r1, ip, r3
 591 0028 8C00     		lsls	r4, r1, #2
 592              	.LVL47:
 593 002a 8200     		lsls	r2, r0, #2
 594              	.LVL48:
 595 002c 44EA9073 		orr	r3, r4, r0, lsr #30
 596 0030 1418     		adds	r4, r2, r0
 597 0032 43EB0105 		adc	r5, r3, r1
 598 0036 2219     		adds	r2, r4, r4
 599 0038 45EB0503 		adc	r3, r5, r5
 600 003c 0549     		ldr	r1, .L27+8
 601 003e C1E90023 		strd	r2, [r1]
 235:Src/hallinterrupts.c ****     return now_us;
 236:Src/hallinterrupts.c **** }
 602              		.loc 1 236 0
 603 0042 D1E90001 		ldrd	r0, [r1]
 604 0046 BDE83008 		pop	{r4, r5, fp}
 605              	.LCFI8:
 606              		.cfi_restore 11
 607              		.cfi_restore 5
 608              		.cfi_restore 4
 609              		.cfi_def_cfa_offset 0
 610 004a 7047     		bx	lr
 611              	.L28:
 612              		.align	2
 613              	.L27:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s 			page 17


 614 004c 00000000 		.word	h_timer_hall
 615 0050 00000000 		.word	.LANCHOR1
 616 0054 00000000 		.word	.LANCHOR2
 617              		.cfi_endproc
 618              	.LFE131:
 620              		.global	__aeabi_d2iz
 621              		.section	.text.HallInterruptsInterrupt,"ax",%progbits
 622              		.align	1
 623              		.global	HallInterruptsInterrupt
 624              		.syntax unified
 625              		.thumb
 626              		.thumb_func
 627              		.fpu fpv4-sp-d16
 629              	HallInterruptsInterrupt:
 630              	.LFB132:
 237:Src/hallinterrupts.c **** 
 238:Src/hallinterrupts.c **** /////////////////////////////////////////////////////////////////////
 239:Src/hallinterrupts.c **** // called from rising and falling edge interrupts off hall GPIO pins.
 240:Src/hallinterrupts.c **** // reads all hall sensors, and calculates posn & speed.
 241:Src/hallinterrupts.c **** void HallInterruptsInterrupt(void){
 631              		.loc 1 241 0
 632              		.cfi_startproc
 633              		@ args = 0, pretend = 0, frame = 0
 634              		@ frame_needed = 0, uses_anonymous_args = 0
 635 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 636              	.LCFI9:
 637              		.cfi_def_cfa_offset 32
 638              		.cfi_offset 4, -32
 639              		.cfi_offset 5, -28
 640              		.cfi_offset 6, -24
 641              		.cfi_offset 7, -20
 642              		.cfi_offset 8, -16
 643              		.cfi_offset 9, -12
 644              		.cfi_offset 10, -8
 645              		.cfi_offset 14, -4
 646              	.LBB27:
 647              	.LBB28:
 648              		.loc 2 71 0
 649              		.syntax unified
 650              	@ 71 "Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h" 1
 651 0004 72B6     		cpsid i
 652              	@ 0 "" 2
 653              		.thumb
 654              		.syntax unified
 655              	.LBE28:
 656              	.LBE27:
 242:Src/hallinterrupts.c ****     // we only want the count from this 100khz clock
 243:Src/hallinterrupts.c ****     __disable_irq(); // but we want both values at the same time, without interferance
 244:Src/hallinterrupts.c ****     unsigned long time = h_timer_hall.Instance->CNT;
 657              		.loc 1 244 0
 658 0006 924B     		ldr	r3, .L37
 659 0008 1B68     		ldr	r3, [r3]
 660 000a D3F824A0 		ldr	r10, [r3, #36]
 661              	.LVL49:
 245:Src/hallinterrupts.c ****     long long timerwraps_copy = timerwraps;
 662              		.loc 1 245 0
 663 000e 914B     		ldr	r3, .L37+4
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s 			page 18


 664 0010 D3E90067 		ldrd	r6, [r3]
 665              	.LVL50:
 246:Src/hallinterrupts.c ****     local_hall_params[0].hall = (~(LEFT_HALL_U_PORT->IDR & (LEFT_HALL_U_PIN | LEFT_HALL_V_PIN | LEF
 666              		.loc 1 246 0
 667 0014 904A     		ldr	r2, .L37+8
 668 0016 9368     		ldr	r3, [r2, #8]
 669 0018 03F0E003 		and	r3, r3, #224
 670 001c DB43     		mvns	r3, r3
 671 001e C3F34213 		ubfx	r3, r3, #5, #3
 672 0022 8E48     		ldr	r0, .L37+12
 673 0024 C370     		strb	r3, [r0, #3]
 247:Src/hallinterrupts.c ****     local_hall_params[1].hall = (~(RIGHT_HALL_U_PORT->IDR & (RIGHT_HALL_U_PIN | RIGHT_HALL_V_PIN | 
 674              		.loc 1 247 0
 675 0026 8E49     		ldr	r1, .L37+16
 676 0028 8B68     		ldr	r3, [r1, #8]
 677 002a 03F4E053 		and	r3, r3, #7168
 678 002e DB43     		mvns	r3, r3
 679 0030 C3F38223 		ubfx	r3, r3, #10, #3
 680 0034 80F83430 		strb	r3, [r0, #52]
 248:Src/hallinterrupts.c **** 
 249:Src/hallinterrupts.c ****     unsigned short Left = LEFT_HALL_U_PORT->IDR;
 681              		.loc 1 249 0
 682 0038 9268     		ldr	r2, [r2, #8]
 683              	.LVL51:
 250:Src/hallinterrupts.c ****     unsigned short Right = RIGHT_HALL_U_PORT->IDR;
 684              		.loc 1 250 0
 685 003a 8B68     		ldr	r3, [r1, #8]
 686              	.LVL52:
 251:Src/hallinterrupts.c **** 
 252:Src/hallinterrupts.c ****     // Get hall sensors values
 253:Src/hallinterrupts.c ****     hall_ul = !(Left & LEFT_HALL_U_PIN);
 687              		.loc 1 253 0
 688 003c 92B2     		uxth	r2, r2
 689 003e 12F0200F 		tst	r2, #32
 690 0042 0CBF     		ite	eq
 691 0044 0120     		moveq	r0, #1
 692 0046 0020     		movne	r0, #0
 693 0048 8649     		ldr	r1, .L37+20
 694 004a 0870     		strb	r0, [r1]
 254:Src/hallinterrupts.c ****     hall_vl = !(Left & LEFT_HALL_V_PIN);
 695              		.loc 1 254 0
 696 004c 12F0400F 		tst	r2, #64
 697 0050 0CBF     		ite	eq
 698 0052 0120     		moveq	r0, #1
 699 0054 0020     		movne	r0, #0
 700 0056 8449     		ldr	r1, .L37+24
 701 0058 0870     		strb	r0, [r1]
 255:Src/hallinterrupts.c ****     hall_wl = !(Left & LEFT_HALL_W_PIN);
 702              		.loc 1 255 0
 703 005a 12F0800F 		tst	r2, #128
 704 005e 0CBF     		ite	eq
 705 0060 0121     		moveq	r1, #1
 706 0062 0021     		movne	r1, #0
 707 0064 814A     		ldr	r2, .L37+28
 708              	.LVL53:
 709 0066 1170     		strb	r1, [r2]
 256:Src/hallinterrupts.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s 			page 19


 257:Src/hallinterrupts.c ****     hall_ur = !(Right & RIGHT_HALL_U_PIN);
 710              		.loc 1 257 0
 711 0068 9BB2     		uxth	r3, r3
 712 006a 13F4806F 		tst	r3, #1024
 713 006e 0CBF     		ite	eq
 714 0070 0121     		moveq	r1, #1
 715 0072 0021     		movne	r1, #0
 716 0074 7E4A     		ldr	r2, .L37+32
 717 0076 1170     		strb	r1, [r2]
 258:Src/hallinterrupts.c ****     hall_vr = !(Right & RIGHT_HALL_V_PIN);
 718              		.loc 1 258 0
 719 0078 13F4006F 		tst	r3, #2048
 720 007c 0CBF     		ite	eq
 721 007e 0121     		moveq	r1, #1
 722 0080 0021     		movne	r1, #0
 723 0082 7C4A     		ldr	r2, .L37+36
 724 0084 1170     		strb	r1, [r2]
 259:Src/hallinterrupts.c ****     hall_wr = !(Right & RIGHT_HALL_W_PIN);
 725              		.loc 1 259 0
 726 0086 13F4805F 		tst	r3, #4096
 727 008a 0CBF     		ite	eq
 728 008c 0122     		moveq	r2, #1
 729 008e 0022     		movne	r2, #0
 730 0090 794B     		ldr	r3, .L37+40
 731              	.LVL54:
 732 0092 1A70     		strb	r2, [r3]
 733              	.LBB29:
 734              	.LBB30:
  60:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** }
 735              		.loc 2 60 0
 736              		.syntax unified
 737              	@ 60 "Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h" 1
 738 0094 62B6     		cpsie i
 739              	@ 0 "" 2
 740              	.LVL55:
 741              		.thumb
 742              		.syntax unified
 743              	.LBE30:
 744              	.LBE29:
 745              	.LBB31:
 260:Src/hallinterrupts.c ****     __enable_irq();
 261:Src/hallinterrupts.c **** 
 262:Src/hallinterrupts.c ****     for (int i = 0; i < 2; i++){
 746              		.loc 1 262 0
 747 0096 0024     		movs	r4, #0
 748 0098 19E0     		b	.L30
 749              	.LVL56:
 750              	.L33:
 751              	.LBB32:
 263:Src/hallinterrupts.c ****         // if this wheel change hall input
 264:Src/hallinterrupts.c ****         if (local_hall_params[i].last_hall != local_hall_params[i].hall){
 265:Src/hallinterrupts.c ****             if (local_hall_params[i].last_hall == 0){
 266:Src/hallinterrupts.c ****                 // valid startup condition
 267:Src/hallinterrupts.c ****             } else {
 268:Src/hallinterrupts.c ****                 bldc_count_per_hall[i] = bldc_count_per_hall_counter[i];
 269:Src/hallinterrupts.c ****                 bldc_count_per_hall_counter[i] = 0;
 270:Src/hallinterrupts.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s 			page 20


 271:Src/hallinterrupts.c ****                 local_hall_params[i].zerospeedtimeout = 5; // number of timer wraps to after which 
 272:Src/hallinterrupts.c ****                 local_hall_params[i].hall_time = (timerwraps_copy << 16) | time;
 273:Src/hallinterrupts.c ****                 long long dt = local_hall_params[i].hall_time - local_hall_params[i].last_hall_time
 274:Src/hallinterrupts.c **** 
 275:Src/hallinterrupts.c ****                 // note correction of direction for left wheel
 276:Src/hallinterrupts.c ****                 local_hall_params[i].incr =
 277:Src/hallinterrupts.c ****                     increments[local_hall_params[i].last_hall][local_hall_params[i].hall] *
 278:Src/hallinterrupts.c ****                     local_hall_params[i].direction;
 279:Src/hallinterrupts.c **** 
 280:Src/hallinterrupts.c ****                 HallData[i].HallPosn = HallData[i].HallPosn + local_hall_params[i].incr;
 281:Src/hallinterrupts.c ****                 HallData[i].HallPosn_mm = (int)((float)HallData[i].HallPosn)*HallData[i].HallPosnMu
 282:Src/hallinterrupts.c ****                 HallData[i].HallTimeDiff = (unsigned long)dt;
 283:Src/hallinterrupts.c **** 
 284:Src/hallinterrupts.c ****                 if (local_hall_params[i].incr != 0){
 285:Src/hallinterrupts.c ****                     // speed = distance/time
 286:Src/hallinterrupts.c ****                     // in this case, distance is always 1.
 287:Src/hallinterrupts.c ****                     // and time is between 10 and 65535
 288:Src/hallinterrupts.c ****                     HallData[i].HallSpeed = (int)
 289:Src/hallinterrupts.c ****                         (HALL_SPEED_CALIBRATION/(float)HallData[i].HallTimeDiff) *
 290:Src/hallinterrupts.c ****                         local_hall_params[i].incr;
 291:Src/hallinterrupts.c **** 
 292:Src/hallinterrupts.c ****                     HallData[i].HallSpeed_mm_per_s = (int)
 293:Src/hallinterrupts.c ****                         ((float)(HallData[i].HallPosnMultiplier/(float)HallData[i].HallTimeDiff) *
 294:Src/hallinterrupts.c ****                         (float)local_hall_params[i].incr *
 295:Src/hallinterrupts.c ****                         (float)HALL_INTERRUPT_TIMER_FREQ);
 296:Src/hallinterrupts.c ****                 } else {
 297:Src/hallinterrupts.c ****                     // we missed a transition?
 298:Src/hallinterrupts.c ****                     HallData[i].HallSkipped ++;
 752              		.loc 1 298 0
 753 009a E200     		lsls	r2, r4, #3
 754 009c 2244     		add	r2, r2, r4
 755 009e 9100     		lsls	r1, r2, #2
 756 00a0 764B     		ldr	r3, .L37+44
 757 00a2 0B44     		add	r3, r3, r1
 758 00a4 1A6A     		ldr	r2, [r3, #32]
 759 00a6 0132     		adds	r2, r2, #1
 760 00a8 1A62     		str	r2, [r3, #32]
 761              	.L32:
 762              	.LBE32:
 299:Src/hallinterrupts.c ****                 }
 300:Src/hallinterrupts.c ****             }
 301:Src/hallinterrupts.c **** 
 302:Src/hallinterrupts.c ****             // remember for next round
 303:Src/hallinterrupts.c ****             local_hall_params[i].last_hall = local_hall_params[i].hall;
 763              		.loc 1 303 0
 764 00aa C4EBC403 		rsb	r3, r4, r4, lsl #3
 765 00ae C3EBC302 		rsb	r2, r3, r3, lsl #3
 766 00b2 6A4B     		ldr	r3, .L37+12
 767 00b4 1344     		add	r3, r3, r2
 768 00b6 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 769 00b8 D2B2     		uxtb	r2, r2
 770 00ba 1A71     		strb	r2, [r3, #4]
 304:Src/hallinterrupts.c ****             local_hall_params[i].last_hall_time = local_hall_params[i].hall_time;
 771              		.loc 1 304 0
 772 00bc D3F80500 		ldr	r0, [r3, #5]	@ unaligned
 773 00c0 D3F80910 		ldr	r1, [r3, #9]	@ unaligned
 774 00c4 C3F80D00 		str	r0, [r3, #13]	@ unaligned
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s 			page 21


 775 00c8 C3F81110 		str	r1, [r3, #17]	@ unaligned
 776              	.L31:
 262:Src/hallinterrupts.c ****         // if this wheel change hall input
 777              		.loc 1 262 0 discriminator 2
 778 00cc 0134     		adds	r4, r4, #1
 779              	.LVL57:
 780              	.L30:
 262:Src/hallinterrupts.c ****         // if this wheel change hall input
 781              		.loc 1 262 0 is_stmt 0 discriminator 1
 782 00ce 012C     		cmp	r4, #1
 783 00d0 00F3BB80 		bgt	.L36
 264:Src/hallinterrupts.c ****             if (local_hall_params[i].last_hall == 0){
 784              		.loc 1 264 0 is_stmt 1
 785 00d4 C4EBC403 		rsb	r3, r4, r4, lsl #3
 786 00d8 C3EBC302 		rsb	r2, r3, r3, lsl #3
 787 00dc 5F4B     		ldr	r3, .L37+12
 788 00de 1344     		add	r3, r3, r2
 789 00e0 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 790 00e2 D2B2     		uxtb	r2, r2
 791 00e4 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 792 00e6 DBB2     		uxtb	r3, r3
 793 00e8 9A42     		cmp	r2, r3
 794 00ea EFD0     		beq	.L31
 265:Src/hallinterrupts.c ****                 // valid startup condition
 795              		.loc 1 265 0
 796 00ec C4EBC403 		rsb	r3, r4, r4, lsl #3
 797 00f0 C3EBC303 		rsb	r3, r3, r3, lsl #3
 798 00f4 594A     		ldr	r2, .L37+12
 799 00f6 1344     		add	r3, r3, r2
 800 00f8 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 801 00fa 002B     		cmp	r3, #0
 802 00fc D5D0     		beq	.L32
 803              	.LBB33:
 268:Src/hallinterrupts.c ****                 bldc_count_per_hall_counter[i] = 0;
 804              		.loc 1 268 0
 805 00fe 604B     		ldr	r3, .L37+48
 806 0100 53F82410 		ldr	r1, [r3, r4, lsl #2]
 807 0104 5F4A     		ldr	r2, .L37+52
 808 0106 42F82410 		str	r1, [r2, r4, lsl #2]
 269:Src/hallinterrupts.c **** 
 809              		.loc 1 269 0
 810 010a 0021     		movs	r1, #0
 811 010c 43F82410 		str	r1, [r3, r4, lsl #2]
 271:Src/hallinterrupts.c ****                 local_hall_params[i].hall_time = (timerwraps_copy << 16) | time;
 812              		.loc 1 271 0
 813 0110 E500     		lsls	r5, r4, #3
 814 0112 2B1B     		subs	r3, r5, r4
 815 0114 C3EBC303 		rsb	r3, r3, r3, lsl #3
 816 0118 504A     		ldr	r2, .L37+12
 817 011a 1344     		add	r3, r3, r2
 818 011c 93F82100 		ldrb	r0, [r3, #33]	@ zero_extendqisi2
 819 0120 0520     		movs	r0, #5
 820 0122 83F82100 		strb	r0, [r3, #33]
 821 0126 93F82200 		ldrb	r0, [r3, #34]	@ zero_extendqisi2
 822 012a 83F82210 		strb	r1, [r3, #34]
 823 012e 93F82300 		ldrb	r0, [r3, #35]	@ zero_extendqisi2
 824 0132 83F82310 		strb	r1, [r3, #35]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s 			page 22


 825 0136 93F82400 		ldrb	r0, [r3, #36]	@ zero_extendqisi2
 826 013a 83F82410 		strb	r1, [r3, #36]
 272:Src/hallinterrupts.c ****                 long long dt = local_hall_params[i].hall_time - local_hall_params[i].last_hall_time
 827              		.loc 1 272 0
 828 013e 4FEA0749 		lsl	r9, r7, #16
 829 0142 49EA1649 		orr	r9, r9, r6, lsr #16
 830 0146 4FEA0648 		lsl	r8, r6, #16
 831 014a 48EA0A00 		orr	r0, r8, r10
 832 014e C3F80500 		str	r0, [r3, #5]	@ unaligned
 833 0152 C3F80990 		str	r9, [r3, #9]	@ unaligned
 273:Src/hallinterrupts.c **** 
 834              		.loc 1 273 0
 835 0156 D3F80580 		ldr	r8, [r3, #5]	@ unaligned
 836 015a D3F80990 		ldr	r9, [r3, #9]	@ unaligned
 837 015e D3F80D00 		ldr	r0, [r3, #13]	@ unaligned
 838 0162 D3F81110 		ldr	r1, [r3, #17]	@ unaligned
 839 0166 B8EB0008 		subs	r8, r8, r0
 277:Src/hallinterrupts.c ****                     local_hall_params[i].direction;
 840              		.loc 1 277 0
 841 016a 1979     		ldrb	r1, [r3, #4]	@ zero_extendqisi2
 842 016c 93F803C0 		ldrb	ip, [r3, #3]	@ zero_extendqisi2
 843 0170 C1EBC101 		rsb	r1, r1, r1, lsl #3
 844 0174 6144     		add	r1, r1, ip
 845 0176 DFF818C1 		ldr	ip, .L37+64
 846 017a 5CF82110 		ldr	r1, [ip, r1, lsl #2]
 278:Src/hallinterrupts.c **** 
 847              		.loc 1 278 0
 848 017e D3F82520 		ldr	r2, [r3, #37]	@ unaligned
 277:Src/hallinterrupts.c ****                     local_hall_params[i].direction;
 849              		.loc 1 277 0
 850 0182 02FB01F2 		mul	r2, r2, r1
 276:Src/hallinterrupts.c ****                     increments[local_hall_params[i].last_hall][local_hall_params[i].hall] *
 851              		.loc 1 276 0
 852 0186 C3F81D20 		str	r2, [r3, #29]	@ unaligned
 280:Src/hallinterrupts.c ****                 HallData[i].HallPosn_mm = (int)((float)HallData[i].HallPosn)*HallData[i].HallPosnMu
 853              		.loc 1 280 0
 854 018a 3C49     		ldr	r1, .L37+44
 855 018c 2544     		add	r5, r5, r4
 856 018e AA00     		lsls	r2, r5, #2
 857 0190 8D18     		adds	r5, r1, r2
 858 0192 51F802C0 		ldr	ip, [r1, r2]
 859 0196 D3F81DE0 		ldr	lr, [r3, #29]	@ unaligned
 276:Src/hallinterrupts.c ****                     increments[local_hall_params[i].last_hall][local_hall_params[i].hall] *
 860              		.loc 1 276 0
 861 019a 1833     		adds	r3, r3, #24
 280:Src/hallinterrupts.c ****                 HallData[i].HallPosn_mm = (int)((float)HallData[i].HallPosn)*HallData[i].HallPosnMu
 862              		.loc 1 280 0
 863 019c F444     		add	ip, ip, lr
 864 019e 41F802C0 		str	ip, [r1, r2]
 281:Src/hallinterrupts.c ****                 HallData[i].HallTimeDiff = (unsigned long)dt;
 865              		.loc 1 281 0
 866 01a2 8A58     		ldr	r2, [r1, r2]
 867 01a4 07EE902A 		vmov	s15, r2	@ int
 868 01a8 F8EEE77A 		vcvt.f32.s32	s15, s15
 869 01ac FDEEE77A 		vcvt.s32.f32	s15, s15
 870 01b0 95ED027A 		vldr.32	s14, [r5, #8]
 871 01b4 F8EEE77A 		vcvt.f32.s32	s15, s15
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s 			page 23


 872 01b8 67EE877A 		vmul.f32	s15, s15, s14
 873 01bc FDEEE77A 		vcvt.s32.f32	s15, s15
 874 01c0 C5ED047A 		vstr.32	s15, [r5, #16]	@ int
 282:Src/hallinterrupts.c **** 
 875              		.loc 1 282 0
 876 01c4 C5F81C80 		str	r8, [r5, #28]
 284:Src/hallinterrupts.c ****                     // speed = distance/time
 877              		.loc 1 284 0
 878 01c8 D3F80530 		ldr	r3, [r3, #5]	@ unaligned
 879 01cc 002B     		cmp	r3, #0
 880 01ce 3FF464AF 		beq	.L33
 289:Src/hallinterrupts.c ****                         local_hall_params[i].incr;
 881              		.loc 1 289 0
 882 01d2 4FEAC408 		lsl	r8, r4, #3
 883 01d6 08EB0402 		add	r2, r8, r4
 884 01da 9300     		lsls	r3, r2, #2
 885 01dc 0D46     		mov	r5, r1
 886 01de 1D44     		add	r5, r5, r3
 887 01e0 E869     		ldr	r0, [r5, #28]
 888 01e2 07EE900A 		vmov	s15, r0	@ int
 889 01e6 F8EE677A 		vcvt.f32.u32	s15, s15
 890 01ea 17EE900A 		vmov	r0, s15
 891 01ee FFF7FEFF 		bl	__aeabi_f2d
 892              	.LVL58:
 893 01f2 0246     		mov	r2, r0
 894 01f4 0B46     		mov	r3, r1
 895 01f6 0020     		movs	r0, #0
 896 01f8 2349     		ldr	r1, .L37+56
 897 01fa FFF7FEFF 		bl	__aeabi_ddiv
 898              	.LVL59:
 288:Src/hallinterrupts.c ****                         (HALL_SPEED_CALIBRATION/(float)HallData[i].HallTimeDiff) *
 899              		.loc 1 288 0
 900 01fe FFF7FEFF 		bl	__aeabi_d2iz
 901              	.LVL60:
 290:Src/hallinterrupts.c **** 
 902              		.loc 1 290 0
 903 0202 A8EB0408 		sub	r8, r8, r4
 904 0206 C8EBC808 		rsb	r8, r8, r8, lsl #3
 905 020a 144B     		ldr	r3, .L37+12
 906 020c 9844     		add	r8, r8, r3
 907 020e D8F81D30 		ldr	r3, [r8, #29]	@ unaligned
 289:Src/hallinterrupts.c ****                         local_hall_params[i].incr;
 908              		.loc 1 289 0
 909 0212 03FB00F0 		mul	r0, r3, r0
 288:Src/hallinterrupts.c ****                         (HALL_SPEED_CALIBRATION/(float)HallData[i].HallTimeDiff) *
 910              		.loc 1 288 0
 911 0216 6860     		str	r0, [r5, #4]
 293:Src/hallinterrupts.c ****                         (float)local_hall_params[i].incr *
 912              		.loc 1 293 0
 913 0218 D5ED026A 		vldr.32	s13, [r5, #8]
 914 021c D5ED077A 		vldr.32	s15, [r5, #28]	@ int
 915 0220 F8EE677A 		vcvt.f32.u32	s15, s15
 916 0224 86EEA77A 		vdiv.f32	s14, s13, s15
 294:Src/hallinterrupts.c ****                         (float)HALL_INTERRUPT_TIMER_FREQ);
 917              		.loc 1 294 0
 918 0228 D8F81D30 		ldr	r3, [r8, #29]	@ unaligned
 919 022c 07EE903A 		vmov	s15, r3	@ int
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s 			page 24


 920 0230 F8EEE77A 		vcvt.f32.s32	s15, s15
 293:Src/hallinterrupts.c ****                         (float)local_hall_params[i].incr *
 921              		.loc 1 293 0
 922 0234 67EE277A 		vmul.f32	s15, s14, s15
 294:Src/hallinterrupts.c ****                         (float)HALL_INTERRUPT_TIMER_FREQ);
 923              		.loc 1 294 0
 924 0238 9FED147A 		vldr.32	s14, .L37+60
 925 023c 67EE877A 		vmul.f32	s15, s15, s14
 292:Src/hallinterrupts.c ****                         ((float)(HallData[i].HallPosnMultiplier/(float)HallData[i].HallTimeDiff) *
 926              		.loc 1 292 0
 927 0240 FDEEE77A 		vcvt.s32.f32	s15, s15
 928 0244 C5ED067A 		vstr.32	s15, [r5, #24]	@ int
 929 0248 2FE7     		b	.L32
 930              	.L36:
 931              	.LBE33:
 932              	.LBE31:
 305:Src/hallinterrupts.c ****         }
 306:Src/hallinterrupts.c ****     }
 307:Src/hallinterrupts.c **** }
 933              		.loc 1 307 0
 934 024a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 935              	.LVL61:
 936              	.L38:
 937 024e 00BF     		.align	2
 938              	.L37:
 939 0250 00000000 		.word	h_timer_hall
 940 0254 00000000 		.word	.LANCHOR1
 941 0258 000C0140 		.word	1073810432
 942 025c 00000000 		.word	local_hall_params
 943 0260 00100140 		.word	1073811456
 944 0264 00000000 		.word	hall_ul
 945 0268 00000000 		.word	hall_vl
 946 026c 00000000 		.word	hall_wl
 947 0270 00000000 		.word	hall_ur
 948 0274 00000000 		.word	hall_vr
 949 0278 00000000 		.word	hall_wr
 950 027c 00000000 		.word	HallData
 951 0280 00000000 		.word	bldc_count_per_hall_counter
 952 0284 00000000 		.word	.LANCHOR3
 953 0288 00400F41 		.word	1091518464
 954 028c 0050C347 		.word	1203982336
 955 0290 00000000 		.word	.LANCHOR4
 956              		.cfi_endproc
 957              	.LFE132:
 959              		.section	.text.TMR4_GLOBAL_IRQHandler,"ax",%progbits
 960              		.align	1
 961              		.global	TMR4_GLOBAL_IRQHandler
 962              		.syntax unified
 963              		.thumb
 964              		.thumb_func
 965              		.fpu fpv4-sp-d16
 967              	TMR4_GLOBAL_IRQHandler:
 968              	.LFB133:
 308:Src/hallinterrupts.c **** 
 309:Src/hallinterrupts.c **** 
 310:Src/hallinterrupts.c **** /////////////////////////////////////////////////////////////////////
 311:Src/hallinterrupts.c **** // we keep track of timer wraps for accurate speed measurement.
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s 			page 25


 312:Src/hallinterrupts.c **** // and also look for 'stopped'
 313:Src/hallinterrupts.c **** void TMR4_GLOBAL_IRQHandler(void){
 969              		.loc 1 313 0
 970              		.cfi_startproc
 971              		@ args = 0, pretend = 0, frame = 0
 972              		@ frame_needed = 0, uses_anonymous_args = 0
 973              		@ link register save eliminated.
 314:Src/hallinterrupts.c ****     if (__HAL_TIM_GET_FLAG(&h_timer_hall, TIM_IT_UPDATE) != RESET){
 974              		.loc 1 314 0
 975 0000 1E4B     		ldr	r3, .L51
 976 0002 1B68     		ldr	r3, [r3]
 977 0004 1A69     		ldr	r2, [r3, #16]
 978 0006 12F0010F 		tst	r2, #1
 979 000a 35D0     		beq	.L46
 313:Src/hallinterrupts.c ****     if (__HAL_TIM_GET_FLAG(&h_timer_hall, TIM_IT_UPDATE) != RESET){
 980              		.loc 1 313 0
 981 000c 4DF804BD 		push	{fp}
 982              	.LCFI10:
 983              		.cfi_def_cfa_offset 4
 984              		.cfi_offset 11, -4
 315:Src/hallinterrupts.c ****         __HAL_TIM_CLEAR_FLAG(&h_timer_hall, TIM_IT_UPDATE);
 985              		.loc 1 315 0
 986 0010 6FF00102 		mvn	r2, #1
 987 0014 1A61     		str	r2, [r3, #16]
 316:Src/hallinterrupts.c ****         timerwraps++;
 988              		.loc 1 316 0
 989 0016 1A49     		ldr	r1, .L51+4
 990 0018 D1E900BC 		ldrd	fp, [r1]
 991 001c 1BF10102 		adds	r2, fp, #1
 992 0020 4CF10003 		adc	r3, ip, #0
 993 0024 C1E90023 		strd	r2, [r1]
 994              	.LVL62:
 995              	.LBB34:
 317:Src/hallinterrupts.c **** 
 318:Src/hallinterrupts.c ****      //Test HallInterruptReadPosn
 319:Src/hallinterrupts.c ****     // HALL_POSN p;
 320:Src/hallinterrupts.c ****     // HallInterruptReadPosn(&p, 0);
 321:Src/hallinterrupts.c ****     // printf("left wheel rev %d, rpm %d, pos mm %d, speed mm/s %d timediff %ld\n",
 322:Src/hallinterrupts.c ****     //     p.wheel[0].HallPosn,p.wheel[0].HallSpeed, p.wheel[0].HallPosn_mm, p.wheel[0].HallSpeed_m
 323:Src/hallinterrupts.c ****     //      HallData[0].HallTimeDiff);
 324:Src/hallinterrupts.c ****     // printf("right wheel rev %d, rpm %d, pos mm %d, speed mm/s %d timediff %ld\n",
 325:Src/hallinterrupts.c ****     //     p.wheel[1].HallPosn,p.wheel[1].HallSpeed, p.wheel[1].HallPosn_mm, p.wheel[1].HallSpeed_m
 326:Src/hallinterrupts.c ****     //      HallData[1].HallTimeDiff);
 327:Src/hallinterrupts.c **** 
 328:Src/hallinterrupts.c ****         for (int i = 0; i < 2; i++){
 996              		.loc 1 328 0
 997 0028 0023     		movs	r3, #0
 998 002a 09E0     		b	.L41
 999              	.LVL63:
 1000              	.L50:
 329:Src/hallinterrupts.c ****             if (local_hall_params[i].zerospeedtimeout <= 0){
 330:Src/hallinterrupts.c ****                 HallData[i].HallSpeed = 0;
 1001              		.loc 1 330 0
 1002 002c D900     		lsls	r1, r3, #3
 1003 002e 1944     		add	r1, r1, r3
 1004 0030 8800     		lsls	r0, r1, #2
 1005 0032 144A     		ldr	r2, .L51+8
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s 			page 26


 1006 0034 0244     		add	r2, r2, r0
 1007 0036 0021     		movs	r1, #0
 1008 0038 5160     		str	r1, [r2, #4]
 331:Src/hallinterrupts.c ****                 HallData[i].HallSpeed_mm_per_s = 0;
 1009              		.loc 1 331 0
 1010 003a 9161     		str	r1, [r2, #24]
 332:Src/hallinterrupts.c ****                 HallData[i].HallTimeDiff = 0;
 1011              		.loc 1 332 0
 1012 003c D161     		str	r1, [r2, #28]
 1013              	.L43:
 328:Src/hallinterrupts.c ****             if (local_hall_params[i].zerospeedtimeout <= 0){
 1014              		.loc 1 328 0 discriminator 2
 1015 003e 0133     		adds	r3, r3, #1
 1016              	.LVL64:
 1017              	.L41:
 328:Src/hallinterrupts.c ****             if (local_hall_params[i].zerospeedtimeout <= 0){
 1018              		.loc 1 328 0 is_stmt 0 discriminator 1
 1019 0040 012B     		cmp	r3, #1
 1020 0042 16DC     		bgt	.L49
 329:Src/hallinterrupts.c ****                 HallData[i].HallSpeed = 0;
 1021              		.loc 1 329 0 is_stmt 1
 1022 0044 C3EBC302 		rsb	r2, r3, r3, lsl #3
 1023 0048 C2EBC201 		rsb	r1, r2, r2, lsl #3
 1024 004c 0E4A     		ldr	r2, .L51+12
 1025 004e 0A44     		add	r2, r2, r1
 1026 0050 2032     		adds	r2, r2, #32
 1027 0052 D2F80120 		ldr	r2, [r2, #1]	@ unaligned
 1028 0056 002A     		cmp	r2, #0
 1029 0058 E8DD     		ble	.L50
 333:Src/hallinterrupts.c ****             } else {
 334:Src/hallinterrupts.c ****                 local_hall_params[i].zerospeedtimeout--;
 1030              		.loc 1 334 0
 1031 005a C3EBC302 		rsb	r2, r3, r3, lsl #3
 1032 005e C2EBC201 		rsb	r1, r2, r2, lsl #3
 1033 0062 094A     		ldr	r2, .L51+12
 1034 0064 0A44     		add	r2, r2, r1
 1035 0066 D2F82110 		ldr	r1, [r2, #33]	@ unaligned
 1036 006a 0139     		subs	r1, r1, #1
 1037 006c C2F82110 		str	r1, [r2, #33]	@ unaligned
 1038 0070 E5E7     		b	.L43
 1039              	.L49:
 1040              	.LBE34:
 335:Src/hallinterrupts.c ****             }
 336:Src/hallinterrupts.c ****         }
 337:Src/hallinterrupts.c ****     }
 338:Src/hallinterrupts.c **** }
 1041              		.loc 1 338 0
 1042 0072 5DF804BB 		ldr	fp, [sp], #4
 1043              	.LCFI11:
 1044              		.cfi_restore 11
 1045              		.cfi_def_cfa_offset 0
 1046 0076 7047     		bx	lr
 1047              	.LVL65:
 1048              	.L46:
 1049 0078 7047     		bx	lr
 1050              	.L52:
 1051 007a 00BF     		.align	2
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s 			page 27


 1052              	.L51:
 1053 007c 00000000 		.word	h_timer_hall
 1054 0080 00000000 		.word	.LANCHOR1
 1055 0084 00000000 		.word	HallData
 1056 0088 00000000 		.word	local_hall_params
 1057              		.cfi_endproc
 1058              	.LFE133:
 1060              		.comm	timeStats,136,8
 1061              		.global	timerwraps
 1062              		.comm	local_hall_params,98,4
 1063              		.comm	h_timer_hall,64,4
 1064              		.global	bldc_count_per_hall
 1065              		.comm	hall_wr,1,1
 1066              		.comm	hall_vr,1,1
 1067              		.comm	hall_ur,1,1
 1068              		.comm	hall_wl,1,1
 1069              		.comm	hall_vl,1,1
 1070              		.comm	hall_ul,1,1
 1071              		.comm	HallData,72,4
 1072              		.section	.bss.bldc_count_per_hall,"aw",%nobits
 1073              		.align	2
 1074              		.set	.LANCHOR3,. + 0
 1077              	bldc_count_per_hall:
 1078 0000 00000000 		.space	8
 1078      00000000 
 1079              		.section	.bss.now_us,"aw",%nobits
 1080              		.align	3
 1081              		.set	.LANCHOR2,. + 0
 1084              	now_us:
 1085 0000 00000000 		.space	8
 1085      00000000 
 1086              		.section	.bss.timerwraps,"aw",%nobits
 1087              		.align	3
 1088              		.set	.LANCHOR1,. + 0
 1091              	timerwraps:
 1092 0000 00000000 		.space	8
 1092      00000000 
 1093              		.section	.data.WheelSize_mm,"aw",%progbits
 1094              		.align	2
 1095              		.set	.LANCHOR0,. + 0
 1098              	WheelSize_mm:
 1099 0000 9A192543 		.word	1126504858
 1100              		.section	.rodata.increments,"a",%progbits
 1101              		.align	2
 1102              		.set	.LANCHOR4,. + 0
 1105              	increments:
 1106 0000 00000000 		.word	0
 1107 0004 00000000 		.word	0
 1108 0008 00000000 		.word	0
 1109 000c 00000000 		.word	0
 1110 0010 00000000 		.word	0
 1111 0014 00000000 		.word	0
 1112 0018 00000000 		.word	0
 1113 001c 00000000 		.word	0
 1114 0020 00000000 		.word	0
 1115 0024 00000000 		.word	0
 1116 0028 FFFFFFFF 		.word	-1
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s 			page 28


 1117 002c 00000000 		.word	0
 1118 0030 01000000 		.word	1
 1119 0034 00000000 		.word	0
 1120 0038 00000000 		.word	0
 1121 003c 00000000 		.word	0
 1122 0040 00000000 		.word	0
 1123 0044 01000000 		.word	1
 1124 0048 00000000 		.word	0
 1125 004c 00000000 		.word	0
 1126 0050 FFFFFFFF 		.word	-1
 1127 0054 00000000 		.word	0
 1128 0058 01000000 		.word	1
 1129 005c FFFFFFFF 		.word	-1
 1130 0060 00000000 		.word	0
 1131 0064 00000000 		.word	0
 1132 0068 00000000 		.word	0
 1133 006c 00000000 		.word	0
 1134 0070 00000000 		.word	0
 1135 0074 00000000 		.word	0
 1136 0078 00000000 		.word	0
 1137 007c 00000000 		.word	0
 1138 0080 00000000 		.word	0
 1139 0084 FFFFFFFF 		.word	-1
 1140 0088 01000000 		.word	1
 1141 008c 00000000 		.word	0
 1142 0090 FFFFFFFF 		.word	-1
 1143 0094 00000000 		.word	0
 1144 0098 00000000 		.word	0
 1145 009c 01000000 		.word	1
 1146 00a0 00000000 		.word	0
 1147 00a4 00000000 		.word	0
 1148 00a8 00000000 		.word	0
 1149 00ac 00000000 		.word	0
 1150 00b0 01000000 		.word	1
 1151 00b4 00000000 		.word	0
 1152 00b8 FFFFFFFF 		.word	-1
 1153 00bc 00000000 		.word	0
 1154 00c0 00000000 		.word	0
 1155              		.text
 1156              	.Letext0:
 1157              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 1158              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 1159              		.file 5 "Drivers/CMSIS/CM4/CoreSupport/core_cm4.h"
 1160              		.file 6 "Inc/system_at32f4xx.h"
 1161              		.file 7 "Drivers/CMSIS/CM4/DeviceSupport/at32f4xx.h"
 1162              		.file 8 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/lock.h"
 1163              		.file 9 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_types.h"
 1164              		.file 10 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.
 1165              		.file 11 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/reent.h"
 1166              		.file 12 "Drivers/Modified_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1167              		.file 13 "Drivers/Modified_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1168              		.file 14 "Drivers/Modified_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 1169              		.file 15 "Inc/control_structures.h"
 1170              		.file 16 "Inc/hallinterrupts.h"
 1171              		.file 17 "Drivers/Modified_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
 1172              		.file 18 "<built-in>"
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s 			page 29


DEFINED SYMBOLS
                            *ABS*:0000000000000000 hallinterrupts.c
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s:21     .text.HallInterruptinit:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s:28     .text.HallInterruptinit:0000000000000000 HallInterruptinit
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s:179    .text.HallInterruptinit:0000000000000100 $d
                            *COM*:0000000000000048 HallData
                            *COM*:0000000000000062 local_hall_params
                            *COM*:0000000000000040 h_timer_hall
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s:192    .text.HallInterruptSetWheelDiameterInches:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s:199    .text.HallInterruptSetWheelDiameterInches:0000000000000000 HallInterruptSetWheelDiameterInches
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s:244    .text.HallInterruptSetWheelDiameterInches:0000000000000040 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s:255    .text.HallInterruptSetWheelDiameterMM:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s:262    .text.HallInterruptSetWheelDiameterMM:0000000000000000 HallInterruptSetWheelDiameterMM
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s:299    .text.HallInterruptSetWheelDiameterMM:0000000000000028 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s:308    .text.HallInterruptReset:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s:315    .text.HallInterruptReset:0000000000000000 HallInterruptReset
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s:421    .text.HallInterruptReset:00000000000000a0 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s:431    .text.HallInterruptReadPosn:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s:438    .text.HallInterruptReadPosn:0000000000000000 HallInterruptReadPosn
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s:549    .text.HallInterruptReadPosn:0000000000000064 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s:554    .text.HallGetuS:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s:561    .text.HallGetuS:0000000000000000 HallGetuS
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s:614    .text.HallGetuS:000000000000004c $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s:622    .text.HallInterruptsInterrupt:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s:629    .text.HallInterruptsInterrupt:0000000000000000 HallInterruptsInterrupt
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s:939    .text.HallInterruptsInterrupt:0000000000000250 $d
                            *COM*:0000000000000001 hall_ul
                            *COM*:0000000000000001 hall_vl
                            *COM*:0000000000000001 hall_wl
                            *COM*:0000000000000001 hall_ur
                            *COM*:0000000000000001 hall_vr
                            *COM*:0000000000000001 hall_wr
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s:960    .text.TMR4_GLOBAL_IRQHandler:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s:967    .text.TMR4_GLOBAL_IRQHandler:0000000000000000 TMR4_GLOBAL_IRQHandler
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s:1053   .text.TMR4_GLOBAL_IRQHandler:000000000000007c $d
                            *COM*:0000000000000088 timeStats
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s:1091   .bss.timerwraps:0000000000000000 timerwraps
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s:1077   .bss.bldc_count_per_hall:0000000000000000 bldc_count_per_hall
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s:1073   .bss.bldc_count_per_hall:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s:1080   .bss.now_us:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s:1084   .bss.now_us:0000000000000000 now_us
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s:1087   .bss.timerwraps:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s:1094   .data.WheelSize_mm:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s:1098   .data.WheelSize_mm:0000000000000000 WheelSize_mm
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s:1101   .rodata.increments:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s:1105   .rodata.increments:0000000000000000 increments

UNDEFINED SYMBOLS
__aeabi_f2d
__aeabi_dmul
__aeabi_ddiv
__aeabi_d2f
memset
HAL_TIM_Base_Init
HAL_TIM_Base_Start
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//cccXRFUk.s 			page 30


HAL_NVIC_DisableIRQ
__aeabi_d2iz
bldc_count_per_hall_counter
