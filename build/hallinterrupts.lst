ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"hallinterrupts.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.global	__aeabi_f2d
  17              		.global	__aeabi_dmul
  18              		.global	__aeabi_ddiv
  19              		.global	__aeabi_d2f
  20              		.section	.text.HallInterruptinit,"ax",%progbits
  21              		.align	1
  22              		.global	HallInterruptinit
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  26              		.fpu fpv4-sp-d16
  28              	HallInterruptinit:
  29              	.LFB126:
  30              		.file 1 "Src/hallinterrupts.c"
   1:Src/hallinterrupts.c **** /*
   2:Src/hallinterrupts.c **** * This file is part of the hoverboard-firmware-hack project.
   3:Src/hallinterrupts.c **** *
   4:Src/hallinterrupts.c **** * Copyright (C) 2018 Simon Hailes <btsimonh@googlemail.com>
   5:Src/hallinterrupts.c **** *
   6:Src/hallinterrupts.c **** * This program is free software: you can redistribute it and/or modify
   7:Src/hallinterrupts.c **** * it under the terms of the GNU General Public License as published by
   8:Src/hallinterrupts.c **** * the Free Software Foundation, either version 3 of the License, or
   9:Src/hallinterrupts.c **** * (at your option) any later version.
  10:Src/hallinterrupts.c **** *
  11:Src/hallinterrupts.c **** * This program is distributed in the hope that it will be useful,
  12:Src/hallinterrupts.c **** * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:Src/hallinterrupts.c **** * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:Src/hallinterrupts.c **** * GNU General Public License for more details.
  15:Src/hallinterrupts.c **** *
  16:Src/hallinterrupts.c **** * You should have received a copy of the GNU General Public License
  17:Src/hallinterrupts.c **** * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:Src/hallinterrupts.c **** */
  19:Src/hallinterrupts.c **** 
  20:Src/hallinterrupts.c **** #include "stm32f1xx_hal.h"
  21:Src/hallinterrupts.c **** #include "defines.h"
  22:Src/hallinterrupts.c **** #include "config.h"
  23:Src/hallinterrupts.c **** #include "hallinterrupts.h"
  24:Src/hallinterrupts.c **** #include <string.h>
  25:Src/hallinterrupts.c **** #include "control_structures.h"
  26:Src/hallinterrupts.c **** 
  27:Src/hallinterrupts.c **** #ifdef HALL_INTERRUPTS
  28:Src/hallinterrupts.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s 			page 2


  29:Src/hallinterrupts.c **** //////////////////////////////////////////////////////////////
  30:Src/hallinterrupts.c **** // file reads Hall sensors, and gets Distance and Speed.
  31:Src/hallinterrupts.c **** // Uses:
  32:Src/hallinterrupts.c **** // EXTI15_10_IRQHandler
  33:Src/hallinterrupts.c **** // EXTI9_5_IRQHandler
  34:Src/hallinterrupts.c **** // TIM4 running at 100khz, reloading 0xFFFF
  35:Src/hallinterrupts.c **** // TIM4_IRQHandler
  36:Src/hallinterrupts.c **** //////////////////////////////////////////////////////////////
  37:Src/hallinterrupts.c **** // Usage: just start with HallInterruptinit(void) and
  38:Src/hallinterrupts.c **** // read results from HALL_DATA_STRUCT HallData[2];
  39:Src/hallinterrupts.c **** //////////////////////////////////////////////////////////////
  40:Src/hallinterrupts.c **** // Notes:
  41:Src/hallinterrupts.c **** // for distance measurement and speed calculations, it defaults to 6.5" wheels.
  42:Src/hallinterrupts.c **** // this may be changed by calling:
  43:Src/hallinterrupts.c **** // void HallInterruptSetWheelDiameterInches(float inches);
  44:Src/hallinterrupts.c **** // or
  45:Src/hallinterrupts.c **** // void HallInterruptSetWheelDiameterMM(float mm);
  46:Src/hallinterrupts.c **** //
  47:Src/hallinterrupts.c **** // if you wish to reset the values in the structure completely, use:
  48:Src/hallinterrupts.c **** // void HallInterruptReset();
  49:Src/hallinterrupts.c **** // if you wish to read distance and spped, and optionally reset distance to zero,
  50:Src/hallinterrupts.c **** // then use:
  51:Src/hallinterrupts.c **** // void HallInterruptReadPosn( HALL_POSN *p, int Reset );
  52:Src/hallinterrupts.c **** //
  53:Src/hallinterrupts.c **** // NOTE: if the hall pins are reconfigured to NOT be in the set 5-9, 10-15
  54:Src/hallinterrupts.c **** // then mods will need to be made.
  55:Src/hallinterrupts.c **** //////////////////////////////////////////////////////////////
  56:Src/hallinterrupts.c **** 
  57:Src/hallinterrupts.c **** 
  58:Src/hallinterrupts.c **** 
  59:Src/hallinterrupts.c **** //////////////////////////////////////////////////////////////
  60:Src/hallinterrupts.c **** // this is the Hall data we gather, and can be read directly elsewhere
  61:Src/hallinterrupts.c **** // it CAN be read with interrupts disabled using
  62:Src/hallinterrupts.c **** // void HallInterruptReadPosn( HALL_POSN *p, int Reset )
  63:Src/hallinterrupts.c **** volatile HALL_DATA_STRUCT HallData[2];
  64:Src/hallinterrupts.c **** 
  65:Src/hallinterrupts.c **** volatile uint8_t hall_ul;
  66:Src/hallinterrupts.c **** volatile uint8_t hall_vl;
  67:Src/hallinterrupts.c **** volatile uint8_t hall_wl;
  68:Src/hallinterrupts.c **** 
  69:Src/hallinterrupts.c **** volatile uint8_t hall_ur;
  70:Src/hallinterrupts.c **** volatile uint8_t hall_vr;
  71:Src/hallinterrupts.c **** volatile uint8_t hall_wr;
  72:Src/hallinterrupts.c **** 
  73:Src/hallinterrupts.c **** volatile unsigned  bldc_count_per_hall[2] = {0, 0};
  74:Src/hallinterrupts.c **** extern volatile unsigned  bldc_count_per_hall_counter[2];
  75:Src/hallinterrupts.c **** 
  76:Src/hallinterrupts.c **** //////////////////////////////////////////////////////////////
  77:Src/hallinterrupts.c **** // local data
  78:Src/hallinterrupts.c **** TIM_HandleTypeDef h_timer_hall;
  79:Src/hallinterrupts.c **** volatile HALL_PARAMS local_hall_params[2];
  80:Src/hallinterrupts.c **** 
  81:Src/hallinterrupts.c **** volatile long long timerwraps = 0;
  82:Src/hallinterrupts.c **** 
  83:Src/hallinterrupts.c **** static float WheelSize_mm = (DEFAULT_WHEEL_SIZE_INCHES * 25.4);
  84:Src/hallinterrupts.c **** 
  85:Src/hallinterrupts.c **** 
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s 			page 3


  86:Src/hallinterrupts.c **** 
  87:Src/hallinterrupts.c **** //////////////////////////////////////////////////////////////
  88:Src/hallinterrupts.c **** // intialisation for interrupts from hall sensor edges
  89:Src/hallinterrupts.c **** void HallInterruptinit(void){
  31              		.loc 1 89 0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 8
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35 0000 70B5     		push	{r4, r5, r6, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 16
  38              		.cfi_offset 4, -16
  39              		.cfi_offset 5, -12
  40              		.cfi_offset 6, -8
  41              		.cfi_offset 14, -4
  42 0002 82B0     		sub	sp, sp, #8
  43              	.LCFI1:
  44              		.cfi_def_cfa_offset 24
  90:Src/hallinterrupts.c ****     memset((void *)&HallData, 0, sizeof(HallData));
  45              		.loc 1 90 0
  46 0004 404E     		ldr	r6, .L3+8
  47 0006 4822     		movs	r2, #72
  48 0008 0021     		movs	r1, #0
  49 000a 3046     		mov	r0, r6
  50 000c FFF7FEFF 		bl	memset
  51              	.LVL0:
  91:Src/hallinterrupts.c ****     memset((void *)&local_hall_params, 0, sizeof(local_hall_params));
  52              		.loc 1 91 0
  53 0010 3E4C     		ldr	r4, .L3+12
  54 0012 6222     		movs	r2, #98
  55 0014 0021     		movs	r1, #0
  56 0016 2046     		mov	r0, r4
  57 0018 FFF7FEFF 		bl	memset
  58              	.LVL1:
  92:Src/hallinterrupts.c ****     local_hall_params[0].direction = -1;
  59              		.loc 1 92 0
  60 001c 94F82530 		ldrb	r3, [r4, #37]	@ zero_extendqisi2
  61 0020 4FF0FF33 		mov	r3, #-1
  62 0024 84F82530 		strb	r3, [r4, #37]
  63 0028 94F82620 		ldrb	r2, [r4, #38]	@ zero_extendqisi2
  64 002c 84F82630 		strb	r3, [r4, #38]
  65 0030 94F82720 		ldrb	r2, [r4, #39]	@ zero_extendqisi2
  66 0034 84F82730 		strb	r3, [r4, #39]
  67 0038 94F82820 		ldrb	r2, [r4, #40]	@ zero_extendqisi2
  68 003c 84F82830 		strb	r3, [r4, #40]
  93:Src/hallinterrupts.c ****     local_hall_params[1].direction = 1;
  69              		.loc 1 93 0
  70 0040 94F85630 		ldrb	r3, [r4, #86]	@ zero_extendqisi2
  71 0044 0025     		movs	r5, #0
  72 0046 0123     		movs	r3, #1
  73 0048 84F85630 		strb	r3, [r4, #86]
  74 004c 94F85730 		ldrb	r3, [r4, #87]	@ zero_extendqisi2
  75 0050 84F85750 		strb	r5, [r4, #87]
  76 0054 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
  77 0058 84F85850 		strb	r5, [r4, #88]
  78 005c 94F85930 		ldrb	r3, [r4, #89]	@ zero_extendqisi2
  79 0060 84F85950 		strb	r5, [r4, #89]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s 			page 4


  94:Src/hallinterrupts.c **** 
  95:Src/hallinterrupts.c ****     // overrides local fle default
  96:Src/hallinterrupts.c ****     #ifdef WHEEL_SIZE_INCHES
  97:Src/hallinterrupts.c ****     WheelSize_mm = (WHEEL_SIZE_INCHES * 25.4);
  98:Src/hallinterrupts.c ****     #endif
  99:Src/hallinterrupts.c **** 
 100:Src/hallinterrupts.c ****     HallData[0].HallPosnMultiplier = (float)((WheelSize_mm*3.14159265359)/(float)HALL_POSN_PER_REV)
  80              		.loc 1 100 0
  81 0064 2A4B     		ldr	r3, .L3+16
  82 0066 1868     		ldr	r0, [r3]	@ float
  83 0068 FFF7FEFF 		bl	__aeabi_f2d
  84              	.LVL2:
  85 006c 24A3     		adr	r3, .L3
  86 006e D3E90023 		ldrd	r2, [r3]
  87 0072 FFF7FEFF 		bl	__aeabi_dmul
  88              	.LVL3:
  89 0076 0022     		movs	r2, #0
  90 0078 264B     		ldr	r3, .L3+20
  91 007a FFF7FEFF 		bl	__aeabi_ddiv
  92              	.LVL4:
  93 007e FFF7FEFF 		bl	__aeabi_d2f
  94              	.LVL5:
  95 0082 B060     		str	r0, [r6, #8]	@ float
 101:Src/hallinterrupts.c ****     HallData[1].HallPosnMultiplier = (float)((WheelSize_mm*3.14159265359)/(float)HALL_POSN_PER_REV)
  96              		.loc 1 101 0
  97 0084 F062     		str	r0, [r6, #44]	@ float
  98              	.LBB17:
 102:Src/hallinterrupts.c **** 
 103:Src/hallinterrupts.c ****     // setup TIM4:
 104:Src/hallinterrupts.c ****     __HAL_RCC_TIM4_CLK_ENABLE();
  99              		.loc 1 104 0
 100 0086 244B     		ldr	r3, .L3+24
 101 0088 DA69     		ldr	r2, [r3, #28]
 102 008a 42F00402 		orr	r2, r2, #4
 103 008e DA61     		str	r2, [r3, #28]
 104 0090 DB69     		ldr	r3, [r3, #28]
 105 0092 03F00403 		and	r3, r3, #4
 106 0096 0193     		str	r3, [sp, #4]
 107 0098 019B     		ldr	r3, [sp, #4]
 108              	.LBE17:
 105:Src/hallinterrupts.c ****     h_timer_hall.Instance = TIM4;
 109              		.loc 1 105 0
 110 009a 204C     		ldr	r4, .L3+28
 111 009c 204B     		ldr	r3, .L3+32
 112 009e 2360     		str	r3, [r4]
 106:Src/hallinterrupts.c ****     h_timer_hall.Init.Prescaler         = 64000000 / 2 / HALL_INTERRUPT_TIMER_FREQ;
 113              		.loc 1 106 0
 114 00a0 4FF4A073 		mov	r3, #320
 115 00a4 6360     		str	r3, [r4, #4]
 107:Src/hallinterrupts.c ****     h_timer_hall.Init.CounterMode       = TIM_COUNTERMODE_UP;
 116              		.loc 1 107 0
 117 00a6 A560     		str	r5, [r4, #8]
 108:Src/hallinterrupts.c ****     h_timer_hall.Init.Period            = 0xFFFF; // we just want the timer to wrap
 118              		.loc 1 108 0
 119 00a8 4FF6FF73 		movw	r3, #65535
 120 00ac E360     		str	r3, [r4, #12]
 109:Src/hallinterrupts.c ****     h_timer_hall.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s 			page 5


 121              		.loc 1 109 0
 122 00ae 2561     		str	r5, [r4, #16]
 110:Src/hallinterrupts.c ****     h_timer_hall.Init.RepetitionCounter = 0;
 123              		.loc 1 110 0
 124 00b0 6561     		str	r5, [r4, #20]
 111:Src/hallinterrupts.c ****     h_timer_hall.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 125              		.loc 1 111 0
 126 00b2 A561     		str	r5, [r4, #24]
 112:Src/hallinterrupts.c ****     HAL_TIM_Base_Init(&h_timer_hall);
 127              		.loc 1 112 0
 128 00b4 2046     		mov	r0, r4
 129 00b6 FFF7FEFF 		bl	HAL_TIM_Base_Init
 130              	.LVL6:
 113:Src/hallinterrupts.c ****     HAL_TIM_Base_Start(&h_timer_hall);
 131              		.loc 1 113 0
 132 00ba 2046     		mov	r0, r4
 133 00bc FFF7FEFF 		bl	HAL_TIM_Base_Start
 134              	.LVL7:
 114:Src/hallinterrupts.c **** 
 115:Src/hallinterrupts.c ****     // generate an interrupt every time the timer wraps it's 16 bit limit.
 116:Src/hallinterrupts.c ****     __HAL_TIM_ENABLE_IT(&h_timer_hall, TIM_IT_UPDATE);
 135              		.loc 1 116 0
 136 00c0 2268     		ldr	r2, [r4]
 137 00c2 D368     		ldr	r3, [r2, #12]
 138 00c4 43F00103 		orr	r3, r3, #1
 139 00c8 D360     		str	r3, [r2, #12]
 117:Src/hallinterrupts.c ****     HAL_NVIC_SetPriority(TMR4_GLOBAL_IRQn, 1, 0);
 140              		.loc 1 117 0
 141 00ca 2A46     		mov	r2, r5
 142 00cc 0121     		movs	r1, #1
 143 00ce 1E20     		movs	r0, #30
 144 00d0 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 145              	.LVL8:
 118:Src/hallinterrupts.c ****     HAL_NVIC_EnableIRQ(TMR4_GLOBAL_IRQn);
 146              		.loc 1 118 0
 147 00d4 1E20     		movs	r0, #30
 148 00d6 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 149              	.LVL9:
 119:Src/hallinterrupts.c **** 
 120:Src/hallinterrupts.c ****     // enable IRQs for type hall effect sensor GPIOs.
 121:Src/hallinterrupts.c ****     HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 150              		.loc 1 121 0
 151 00da 2A46     		mov	r2, r5
 152 00dc 0321     		movs	r1, #3
 153 00de 1720     		movs	r0, #23
 154 00e0 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 155              	.LVL10:
 122:Src/hallinterrupts.c ****     HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 156              		.loc 1 122 0
 157 00e4 1720     		movs	r0, #23
 158 00e6 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 159              	.LVL11:
 123:Src/hallinterrupts.c ****     HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 160              		.loc 1 123 0
 161 00ea 2A46     		mov	r2, r5
 162 00ec 0321     		movs	r1, #3
 163 00ee 2820     		movs	r0, #40
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s 			page 6


 164 00f0 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 165              	.LVL12:
 124:Src/hallinterrupts.c ****     HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 166              		.loc 1 124 0
 167 00f4 2820     		movs	r0, #40
 168 00f6 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 169              	.LVL13:
 125:Src/hallinterrupts.c **** }
 170              		.loc 1 125 0
 171 00fa 02B0     		add	sp, sp, #8
 172              	.LCFI2:
 173              		.cfi_def_cfa_offset 16
 174              		@ sp needed
 175 00fc 70BD     		pop	{r4, r5, r6, pc}
 176              	.L4:
 177 00fe 00BF     		.align	3
 178              	.L3:
 179 0100 EA2E4454 		.word	1413754602
 180 0104 FB210940 		.word	1074340347
 181 0108 00000000 		.word	HallData
 182 010c 00000000 		.word	local_hall_params
 183 0110 00000000 		.word	.LANCHOR0
 184 0114 00805640 		.word	1079410688
 185 0118 00100240 		.word	1073876992
 186 011c 00000000 		.word	h_timer_hall
 187 0120 00080040 		.word	1073743872
 188              		.cfi_endproc
 189              	.LFE126:
 191              		.section	.text.HallInterruptSetWheelDiameterInches,"ax",%progbits
 192              		.align	1
 193              		.global	HallInterruptSetWheelDiameterInches
 194              		.syntax unified
 195              		.thumb
 196              		.thumb_func
 197              		.fpu fpv4-sp-d16
 199              	HallInterruptSetWheelDiameterInches:
 200              	.LFB127:
 126:Src/hallinterrupts.c **** 
 127:Src/hallinterrupts.c **** 
 128:Src/hallinterrupts.c **** //////////////////////////////////////////////////////////////
 129:Src/hallinterrupts.c **** // optionaly change the wheel diameter fromt he default of 6.5" using inches
 130:Src/hallinterrupts.c **** void HallInterruptSetWheelDiameterInches(float inches){
 201              		.loc 1 130 0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 0
 204              		@ frame_needed = 0, uses_anonymous_args = 0
 205              	.LVL14:
 206 0000 08B5     		push	{r3, lr}
 207              	.LCFI3:
 208              		.cfi_def_cfa_offset 8
 209              		.cfi_offset 3, -8
 210              		.cfi_offset 14, -4
 131:Src/hallinterrupts.c ****     WheelSize_mm = inches * 25.4;
 211              		.loc 1 131 0
 212 0002 FFF7FEFF 		bl	__aeabi_f2d
 213              	.LVL15:
 214 0006 13A3     		adr	r3, .L7+20
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s 			page 7


 215 0008 D3E90023 		ldrd	r2, [r3]
 216 000c FFF7FEFF 		bl	__aeabi_dmul
 217              	.LVL16:
 218 0010 FFF7FEFF 		bl	__aeabi_d2f
 219              	.LVL17:
 220 0014 0C4B     		ldr	r3, .L7+8
 221 0016 1860     		str	r0, [r3]	@ float
 132:Src/hallinterrupts.c ****     HallData[0].HallPosnMultiplier = (float)((WheelSize_mm*3.14159265359)/(float)HALL_POSN_PER_REV)
 222              		.loc 1 132 0
 223 0018 FFF7FEFF 		bl	__aeabi_f2d
 224              	.LVL18:
 225 001c 08A3     		adr	r3, .L7
 226 001e D3E90023 		ldrd	r2, [r3]
 227 0022 FFF7FEFF 		bl	__aeabi_dmul
 228              	.LVL19:
 229 0026 0022     		movs	r2, #0
 230 0028 084B     		ldr	r3, .L7+12
 231 002a FFF7FEFF 		bl	__aeabi_ddiv
 232              	.LVL20:
 233 002e FFF7FEFF 		bl	__aeabi_d2f
 234              	.LVL21:
 235 0032 074B     		ldr	r3, .L7+16
 236 0034 9860     		str	r0, [r3, #8]	@ float
 133:Src/hallinterrupts.c ****     HallData[1].HallPosnMultiplier = (float)((WheelSize_mm*3.14159265359)/(float)HALL_POSN_PER_REV)
 237              		.loc 1 133 0
 238 0036 D862     		str	r0, [r3, #44]	@ float
 134:Src/hallinterrupts.c **** }
 239              		.loc 1 134 0
 240 0038 08BD     		pop	{r3, pc}
 241              	.L8:
 242 003a 00BFAFF3 		.align	3
 242      0080
 243              	.L7:
 244 0040 EA2E4454 		.word	1413754602
 245 0044 FB210940 		.word	1074340347
 246 0048 00000000 		.word	.LANCHOR0
 247 004c 00805640 		.word	1079410688
 248 0050 00000000 		.word	HallData
 249 0054 66666666 		.word	1717986918
 250 0058 66663940 		.word	1077503590
 251              		.cfi_endproc
 252              	.LFE127:
 254              		.section	.text.HallInterruptSetWheelDiameterMM,"ax",%progbits
 255              		.align	1
 256              		.global	HallInterruptSetWheelDiameterMM
 257              		.syntax unified
 258              		.thumb
 259              		.thumb_func
 260              		.fpu fpv4-sp-d16
 262              	HallInterruptSetWheelDiameterMM:
 263              	.LFB128:
 135:Src/hallinterrupts.c **** //////////////////////////////////////////////////////////////
 136:Src/hallinterrupts.c **** // optionaly change the wheel diameter fromt he default of 6.5" using mm
 137:Src/hallinterrupts.c **** void HallInterruptSetWheelDiameterMM(float mm){
 264              		.loc 1 137 0
 265              		.cfi_startproc
 266              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s 			page 8


 267              		@ frame_needed = 0, uses_anonymous_args = 0
 268              	.LVL22:
 269 0000 08B5     		push	{r3, lr}
 270              	.LCFI4:
 271              		.cfi_def_cfa_offset 8
 272              		.cfi_offset 3, -8
 273              		.cfi_offset 14, -4
 138:Src/hallinterrupts.c ****     WheelSize_mm = mm;
 274              		.loc 1 138 0
 275 0002 0B4B     		ldr	r3, .L11+8
 276 0004 1860     		str	r0, [r3]	@ float
 139:Src/hallinterrupts.c ****     HallData[0].HallPosnMultiplier = (float)((WheelSize_mm*3.14159265359)/(float)HALL_POSN_PER_REV)
 277              		.loc 1 139 0
 278 0006 FFF7FEFF 		bl	__aeabi_f2d
 279              	.LVL23:
 280 000a 07A3     		adr	r3, .L11
 281 000c D3E90023 		ldrd	r2, [r3]
 282 0010 FFF7FEFF 		bl	__aeabi_dmul
 283              	.LVL24:
 284 0014 0022     		movs	r2, #0
 285 0016 074B     		ldr	r3, .L11+12
 286 0018 FFF7FEFF 		bl	__aeabi_ddiv
 287              	.LVL25:
 288 001c FFF7FEFF 		bl	__aeabi_d2f
 289              	.LVL26:
 290 0020 054B     		ldr	r3, .L11+16
 291 0022 9860     		str	r0, [r3, #8]	@ float
 140:Src/hallinterrupts.c ****     HallData[1].HallPosnMultiplier = (float)((WheelSize_mm*3.14159265359)/(float)HALL_POSN_PER_REV)
 292              		.loc 1 140 0
 293 0024 D862     		str	r0, [r3, #44]	@ float
 141:Src/hallinterrupts.c **** }
 294              		.loc 1 141 0
 295 0026 08BD     		pop	{r3, pc}
 296              	.L12:
 297              		.align	3
 298              	.L11:
 299 0028 EA2E4454 		.word	1413754602
 300 002c FB210940 		.word	1074340347
 301 0030 00000000 		.word	.LANCHOR0
 302 0034 00805640 		.word	1079410688
 303 0038 00000000 		.word	HallData
 304              		.cfi_endproc
 305              	.LFE128:
 307              		.section	.text.HallInterruptReset,"ax",%progbits
 308              		.align	1
 309              		.global	HallInterruptReset
 310              		.syntax unified
 311              		.thumb
 312              		.thumb_func
 313              		.fpu fpv4-sp-d16
 315              	HallInterruptReset:
 316              	.LFB129:
 142:Src/hallinterrupts.c **** 
 143:Src/hallinterrupts.c **** //////////////////////////////////////////////////////////////
 144:Src/hallinterrupts.c **** // reset the whole structure.
 145:Src/hallinterrupts.c **** // note that this will then miss the first transition, as it will have no
 146:Src/hallinterrupts.c **** // 'last' information.
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s 			page 9


 147:Src/hallinterrupts.c **** void HallInterruptReset(){
 317              		.loc 1 147 0
 318              		.cfi_startproc
 319              		@ args = 0, pretend = 0, frame = 0
 320              		@ frame_needed = 0, uses_anonymous_args = 0
 321 0000 38B5     		push	{r3, r4, r5, lr}
 322              	.LCFI5:
 323              		.cfi_def_cfa_offset 16
 324              		.cfi_offset 3, -16
 325              		.cfi_offset 4, -12
 326              		.cfi_offset 5, -8
 327              		.cfi_offset 14, -4
 328              	.LBB18:
 329              	.LBB19:
 330              		.file 2 "Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h"
   1:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** 
   9:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** 
  34:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** 
  35:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** 
  38:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s 			page 10


  43:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** 
  46:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** 
  47:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** 
  53:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** {
  60:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** }
  62:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** 
  63:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** 
  64:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** {
  71:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 331              		.loc 2 71 0
 332              		.syntax unified
 333              	@ 71 "Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h" 1
 334 0002 72B6     		cpsid i
 335              	@ 0 "" 2
 336              		.thumb
 337              		.syntax unified
 338              	.LBE19:
 339              	.LBE18:
 148:Src/hallinterrupts.c ****     __disable_irq(); // but we want both values at the same time, without interferance
 149:Src/hallinterrupts.c ****     HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 340              		.loc 1 149 0
 341 0004 1720     		movs	r0, #23
 342 0006 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 343              	.LVL27:
 344              	.LBB20:
 345              	.LBB21:
  60:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** }
 346              		.loc 2 60 0
 347              		.syntax unified
 348              	@ 60 "Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h" 1
 349 000a 62B6     		cpsie i
 350              	@ 0 "" 2
 351              		.thumb
 352              		.syntax unified
 353              	.LBE21:
 354              	.LBE20:
 150:Src/hallinterrupts.c ****     //HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s 			page 11


 151:Src/hallinterrupts.c ****     __enable_irq();
 152:Src/hallinterrupts.c ****     memset((void *)&HallData, 0, sizeof(HallData));
 355              		.loc 1 152 0
 356 000c 244D     		ldr	r5, .L15+8
 357 000e 4822     		movs	r2, #72
 358 0010 0021     		movs	r1, #0
 359 0012 2846     		mov	r0, r5
 360 0014 FFF7FEFF 		bl	memset
 361              	.LVL28:
 153:Src/hallinterrupts.c ****     memset((void *)&local_hall_params, 0, sizeof(local_hall_params));
 362              		.loc 1 153 0
 363 0018 224C     		ldr	r4, .L15+12
 364 001a 6222     		movs	r2, #98
 365 001c 0021     		movs	r1, #0
 366 001e 2046     		mov	r0, r4
 367 0020 FFF7FEFF 		bl	memset
 368              	.LVL29:
 154:Src/hallinterrupts.c ****     local_hall_params[0].direction = -1;
 369              		.loc 1 154 0
 370 0024 94F82530 		ldrb	r3, [r4, #37]	@ zero_extendqisi2
 371 0028 4FF0FF33 		mov	r3, #-1
 372 002c 84F82530 		strb	r3, [r4, #37]
 373 0030 94F82620 		ldrb	r2, [r4, #38]	@ zero_extendqisi2
 374 0034 84F82630 		strb	r3, [r4, #38]
 375 0038 94F82720 		ldrb	r2, [r4, #39]	@ zero_extendqisi2
 376 003c 84F82730 		strb	r3, [r4, #39]
 377 0040 94F82820 		ldrb	r2, [r4, #40]	@ zero_extendqisi2
 378 0044 84F82830 		strb	r3, [r4, #40]
 155:Src/hallinterrupts.c ****     local_hall_params[1].direction = 1;
 379              		.loc 1 155 0
 380 0048 94F85630 		ldrb	r3, [r4, #86]	@ zero_extendqisi2
 381 004c 0023     		movs	r3, #0
 382 004e 0122     		movs	r2, #1
 383 0050 84F85620 		strb	r2, [r4, #86]
 384 0054 94F85720 		ldrb	r2, [r4, #87]	@ zero_extendqisi2
 385 0058 84F85730 		strb	r3, [r4, #87]
 386 005c 94F85820 		ldrb	r2, [r4, #88]	@ zero_extendqisi2
 387 0060 84F85830 		strb	r3, [r4, #88]
 388 0064 94F85920 		ldrb	r2, [r4, #89]	@ zero_extendqisi2
 389 0068 84F85930 		strb	r3, [r4, #89]
 156:Src/hallinterrupts.c **** 
 157:Src/hallinterrupts.c ****     HallData[0].HallPosnMultiplier = (float)((WheelSize_mm*3.14159265359)/(float)HALL_POSN_PER_REV)
 390              		.loc 1 157 0
 391 006c 0E4B     		ldr	r3, .L15+16
 392 006e 1868     		ldr	r0, [r3]	@ float
 393 0070 FFF7FEFF 		bl	__aeabi_f2d
 394              	.LVL30:
 395 0074 08A3     		adr	r3, .L15
 396 0076 D3E90023 		ldrd	r2, [r3]
 397 007a FFF7FEFF 		bl	__aeabi_dmul
 398              	.LVL31:
 399 007e 0022     		movs	r2, #0
 400 0080 0A4B     		ldr	r3, .L15+20
 401 0082 FFF7FEFF 		bl	__aeabi_ddiv
 402              	.LVL32:
 403 0086 FFF7FEFF 		bl	__aeabi_d2f
 404              	.LVL33:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s 			page 12


 405 008a A860     		str	r0, [r5, #8]	@ float
 158:Src/hallinterrupts.c ****     HallData[1].HallPosnMultiplier = (float)((WheelSize_mm*3.14159265359)/(float)HALL_POSN_PER_REV)
 406              		.loc 1 158 0
 407 008c E862     		str	r0, [r5, #44]	@ float
 159:Src/hallinterrupts.c ****     HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 408              		.loc 1 159 0
 409 008e 1720     		movs	r0, #23
 410 0090 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 411              	.LVL34:
 160:Src/hallinterrupts.c ****     //HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 161:Src/hallinterrupts.c **** }
 412              		.loc 1 161 0
 413 0094 38BD     		pop	{r3, r4, r5, pc}
 414              	.L16:
 415 0096 00BF     		.align	3
 416              	.L15:
 417 0098 EA2E4454 		.word	1413754602
 418 009c FB210940 		.word	1074340347
 419 00a0 00000000 		.word	HallData
 420 00a4 00000000 		.word	local_hall_params
 421 00a8 00000000 		.word	.LANCHOR0
 422 00ac 00805640 		.word	1079410688
 423              		.cfi_endproc
 424              	.LFE129:
 426              		.section	.text.HallInterruptReadPosn,"ax",%progbits
 427              		.align	1
 428              		.global	HallInterruptReadPosn
 429              		.syntax unified
 430              		.thumb
 431              		.thumb_func
 432              		.fpu fpv4-sp-d16
 434              	HallInterruptReadPosn:
 435              	.LFB130:
 162:Src/hallinterrupts.c **** 
 163:Src/hallinterrupts.c **** 
 164:Src/hallinterrupts.c **** //////////////////////////////////////////////////////////////
 165:Src/hallinterrupts.c **** // read values with interupts disabled
 166:Src/hallinterrupts.c **** // optionally reset posn to zero.
 167:Src/hallinterrupts.c **** //
 168:Src/hallinterrupts.c **** void HallInterruptReadPosn( HALL_POSN *p, int Reset ){
 436              		.loc 1 168 0
 437              		.cfi_startproc
 438              		@ args = 0, pretend = 0, frame = 0
 439              		@ frame_needed = 0, uses_anonymous_args = 0
 440              	.LVL35:
 441 0000 70B5     		push	{r4, r5, r6, lr}
 442              	.LCFI6:
 443              		.cfi_def_cfa_offset 16
 444              		.cfi_offset 4, -16
 445              		.cfi_offset 5, -12
 446              		.cfi_offset 6, -8
 447              		.cfi_offset 14, -4
 448 0002 0446     		mov	r4, r0
 449 0004 0D46     		mov	r5, r1
 450              	.LBB22:
 451              	.LBB23:
 452              		.loc 2 71 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s 			page 13


 453              		.syntax unified
 454              	@ 71 "Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h" 1
 455 0006 72B6     		cpsid i
 456              	@ 0 "" 2
 457              		.thumb
 458              		.syntax unified
 459              	.LBE23:
 460              	.LBE22:
 169:Src/hallinterrupts.c ****     __disable_irq(); // but we want both values at the same time, without interferance
 170:Src/hallinterrupts.c ****     HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 461              		.loc 1 170 0
 462 0008 1720     		movs	r0, #23
 463              	.LVL36:
 464 000a FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 465              	.LVL37:
 466              	.LBB24:
 467              	.LBB25:
  60:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** }
 468              		.loc 2 60 0
 469              		.syntax unified
 470              	@ 60 "Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h" 1
 471 000e 62B6     		cpsie i
 472              	@ 0 "" 2
 473              	.LVL38:
 474              		.thumb
 475              		.syntax unified
 476              	.LBE25:
 477              	.LBE24:
 478              	.LBB26:
 171:Src/hallinterrupts.c ****     //HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 172:Src/hallinterrupts.c ****     __enable_irq();
 173:Src/hallinterrupts.c ****     for (int i = 0; i < 2; i++){
 479              		.loc 1 173 0
 480 0010 0023     		movs	r3, #0
 481 0012 00E0     		b	.L18
 482              	.LVL39:
 483              	.L19:
 484              		.loc 1 173 0 is_stmt 0 discriminator 2
 485 0014 0133     		adds	r3, r3, #1
 486              	.LVL40:
 487              	.L18:
 488              		.loc 1 173 0 discriminator 1
 489 0016 012B     		cmp	r3, #1
 490 0018 1DDC     		bgt	.L22
 174:Src/hallinterrupts.c ****         p->wheel[i].HallPosn = HallData[i].HallPosn;
 491              		.loc 1 174 0 is_stmt 1
 492 001a 114E     		ldr	r6, .L23
 493 001c DA00     		lsls	r2, r3, #3
 494 001e 1A44     		add	r2, r2, r3
 495 0020 9000     		lsls	r0, r2, #2
 496 0022 3118     		adds	r1, r6, r0
 497 0024 3658     		ldr	r6, [r6, r0]
 498 0026 9A00     		lsls	r2, r3, #2
 499 0028 1A44     		add	r2, r2, r3
 500 002a 9000     		lsls	r0, r2, #2
 501 002c 2218     		adds	r2, r4, r0
 502 002e 2650     		str	r6, [r4, r0]
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s 			page 14


 175:Src/hallinterrupts.c ****         p->wheel[i].HallPosn_mm = HallData[i].HallPosn_mm;
 503              		.loc 1 175 0
 504 0030 0869     		ldr	r0, [r1, #16]
 505 0032 9060     		str	r0, [r2, #8]
 176:Src/hallinterrupts.c ****         p->wheel[i].HallSpeed = HallData[i].HallSpeed;
 506              		.loc 1 176 0
 507 0034 4868     		ldr	r0, [r1, #4]
 508 0036 5060     		str	r0, [r2, #4]
 177:Src/hallinterrupts.c ****         p->wheel[i].HallSpeed_mm_per_s = HallData[i].HallSpeed_mm_per_s;
 509              		.loc 1 177 0
 510 0038 8869     		ldr	r0, [r1, #24]
 511 003a D060     		str	r0, [r2, #12]
 178:Src/hallinterrupts.c ****         p->wheel[i].HallSkipped = HallData[i].HallSkipped;
 512              		.loc 1 178 0
 513 003c 096A     		ldr	r1, [r1, #32]
 514 003e 1161     		str	r1, [r2, #16]
 179:Src/hallinterrupts.c **** 
 180:Src/hallinterrupts.c ****         if (Reset){
 515              		.loc 1 180 0
 516 0040 002D     		cmp	r5, #0
 517 0042 E7D0     		beq	.L19
 181:Src/hallinterrupts.c ****             HallData[i].HallPosn = 0;
 518              		.loc 1 181 0
 519 0044 0648     		ldr	r0, .L23
 520 0046 DA00     		lsls	r2, r3, #3
 521 0048 1A44     		add	r2, r2, r3
 522 004a 9100     		lsls	r1, r2, #2
 523 004c 4618     		adds	r6, r0, r1
 524 004e 0022     		movs	r2, #0
 525 0050 4250     		str	r2, [r0, r1]
 182:Src/hallinterrupts.c ****             HallData[i].HallPosn_mm = 0;
 526              		.loc 1 182 0
 527 0052 3261     		str	r2, [r6, #16]
 528 0054 DEE7     		b	.L19
 529              	.L22:
 530              	.LBE26:
 183:Src/hallinterrupts.c ****         }
 184:Src/hallinterrupts.c ****     }
 185:Src/hallinterrupts.c ****     HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 531              		.loc 1 185 0
 532 0056 1720     		movs	r0, #23
 533 0058 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 534              	.LVL41:
 186:Src/hallinterrupts.c ****     //HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 187:Src/hallinterrupts.c **** }
 535              		.loc 1 187 0
 536 005c 70BD     		pop	{r4, r5, r6, pc}
 537              	.LVL42:
 538              	.L24:
 539 005e 00BF     		.align	2
 540              	.L23:
 541 0060 00000000 		.word	HallData
 542              		.cfi_endproc
 543              	.LFE130:
 545              		.section	.text.HallGetuS,"ax",%progbits
 546              		.align	1
 547              		.global	HallGetuS
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s 			page 15


 548              		.syntax unified
 549              		.thumb
 550              		.thumb_func
 551              		.fpu fpv4-sp-d16
 553              	HallGetuS:
 554              	.LFB131:
 188:Src/hallinterrupts.c **** 
 189:Src/hallinterrupts.c **** 
 190:Src/hallinterrupts.c **** 
 191:Src/hallinterrupts.c **** //////////////////////////////////////////////////////////////
 192:Src/hallinterrupts.c **** // the hall sensors change 1 bit at a time.
 193:Src/hallinterrupts.c **** // the transtion tells us the direction of movement.
 194:Src/hallinterrupts.c **** // this table is [last hall value][new hall value], and gives the
 195:Src/hallinterrupts.c **** // direction of movement.
 196:Src/hallinterrupts.c **** // table values of 0 represent 'illegal' transitions -
 197:Src/hallinterrupts.c **** // i.e. if we see a 0 out, then we missed an interrupt
 198:Src/hallinterrupts.c **** // (never seen in practice yet)
 199:Src/hallinterrupts.c **** static const int increments[7][7] =
 200:Src/hallinterrupts.c **** {
 201:Src/hallinterrupts.c ****     {  0,  0,  0,  0,  0,  0,  0 },
 202:Src/hallinterrupts.c ****     {  0,  0,  0, -1,  0,  1,  0 },
 203:Src/hallinterrupts.c ****     {  0,  0,  0,  1,  0,  0, -1 },
 204:Src/hallinterrupts.c ****     {  0,  1, -1,  0,  0,  0,  0 },
 205:Src/hallinterrupts.c ****     {  0,  0,  0,  0,  0, -1,  1 },
 206:Src/hallinterrupts.c ****     {  0, -1,  0,  0,  1,  0,  0 },
 207:Src/hallinterrupts.c ****     {  0,  0,  1,  0, -1,  0,  0 },
 208:Src/hallinterrupts.c **** };
 209:Src/hallinterrupts.c **** 
 210:Src/hallinterrupts.c **** 
 211:Src/hallinterrupts.c **** TIME_STATS timeStats;
 212:Src/hallinterrupts.c **** 
 213:Src/hallinterrupts.c **** static volatile long long now_us = 0;
 214:Src/hallinterrupts.c **** 
 215:Src/hallinterrupts.c **** long long HallGetuS(){
 555              		.loc 1 215 0
 556              		.cfi_startproc
 557              		@ args = 0, pretend = 0, frame = 0
 558              		@ frame_needed = 0, uses_anonymous_args = 0
 559              		@ link register save eliminated.
 560 0000 2DE93008 		push	{r4, r5, fp}
 561              	.LCFI7:
 562              		.cfi_def_cfa_offset 12
 563              		.cfi_offset 4, -12
 564              		.cfi_offset 5, -8
 565              		.cfi_offset 11, -4
 216:Src/hallinterrupts.c ****     unsigned short time = h_timer_hall.Instance->CNT;
 566              		.loc 1 216 0
 567 0004 114B     		ldr	r3, .L27
 568 0006 1B68     		ldr	r3, [r3]
 569 0008 5A6A     		ldr	r2, [r3, #36]
 570              	.LVL43:
 217:Src/hallinterrupts.c ****     long long timerwraps_copy = timerwraps;
 571              		.loc 1 217 0
 572 000a 114B     		ldr	r3, .L27+4
 573 000c D3E90045 		ldrd	r4, [r3]
 574              	.LVL44:
 218:Src/hallinterrupts.c ****     now_us = ((timerwraps_copy<<16) + time) * 10;
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s 			page 16


 575              		.loc 1 218 0
 576 0010 4FEA054C 		lsl	ip, r5, #16
 577 0014 4CEA144C 		orr	ip, ip, r4, lsr #16
 578 0018 4FEA044B 		lsl	fp, r4, #16
 579 001c 92B2     		uxth	r2, r2
 580 001e 0023     		movs	r3, #0
 581 0020 1BEB0200 		adds	r0, fp, r2
 582 0024 4CEB0301 		adc	r1, ip, r3
 583 0028 8C00     		lsls	r4, r1, #2
 584              	.LVL45:
 585 002a 8200     		lsls	r2, r0, #2
 586              	.LVL46:
 587 002c 44EA9073 		orr	r3, r4, r0, lsr #30
 588 0030 1418     		adds	r4, r2, r0
 589 0032 43EB0105 		adc	r5, r3, r1
 590 0036 2219     		adds	r2, r4, r4
 591 0038 45EB0503 		adc	r3, r5, r5
 592 003c 0549     		ldr	r1, .L27+8
 593 003e C1E90023 		strd	r2, [r1]
 219:Src/hallinterrupts.c ****     return now_us;
 220:Src/hallinterrupts.c **** }
 594              		.loc 1 220 0
 595 0042 D1E90001 		ldrd	r0, [r1]
 596 0046 BDE83008 		pop	{r4, r5, fp}
 597              	.LCFI8:
 598              		.cfi_restore 11
 599              		.cfi_restore 5
 600              		.cfi_restore 4
 601              		.cfi_def_cfa_offset 0
 602 004a 7047     		bx	lr
 603              	.L28:
 604              		.align	2
 605              	.L27:
 606 004c 00000000 		.word	h_timer_hall
 607 0050 00000000 		.word	.LANCHOR1
 608 0054 00000000 		.word	.LANCHOR2
 609              		.cfi_endproc
 610              	.LFE131:
 612              		.global	__aeabi_d2iz
 613              		.section	.text.HallInterruptsInterrupt,"ax",%progbits
 614              		.align	1
 615              		.global	HallInterruptsInterrupt
 616              		.syntax unified
 617              		.thumb
 618              		.thumb_func
 619              		.fpu fpv4-sp-d16
 621              	HallInterruptsInterrupt:
 622              	.LFB132:
 221:Src/hallinterrupts.c **** 
 222:Src/hallinterrupts.c **** /////////////////////////////////////////////////////////////////////
 223:Src/hallinterrupts.c **** // called from rising and falling edge interrupts off hall GPIO pins.
 224:Src/hallinterrupts.c **** // reads all hall sensors, and calculates posn & speed.
 225:Src/hallinterrupts.c **** void HallInterruptsInterrupt(void){
 623              		.loc 1 225 0
 624              		.cfi_startproc
 625              		@ args = 0, pretend = 0, frame = 0
 626              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s 			page 17


 627 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 628              	.LCFI9:
 629              		.cfi_def_cfa_offset 32
 630              		.cfi_offset 4, -32
 631              		.cfi_offset 5, -28
 632              		.cfi_offset 6, -24
 633              		.cfi_offset 7, -20
 634              		.cfi_offset 8, -16
 635              		.cfi_offset 9, -12
 636              		.cfi_offset 10, -8
 637              		.cfi_offset 14, -4
 638              	.LBB27:
 639              	.LBB28:
 640              		.loc 2 71 0
 641              		.syntax unified
 642              	@ 71 "Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h" 1
 643 0004 72B6     		cpsid i
 644              	@ 0 "" 2
 645              		.thumb
 646              		.syntax unified
 647              	.LBE28:
 648              	.LBE27:
 226:Src/hallinterrupts.c ****     // we only want the count from this 100khz clock
 227:Src/hallinterrupts.c ****     __disable_irq(); // but we want both values at the same time, without interferance
 228:Src/hallinterrupts.c ****     unsigned long time = h_timer_hall.Instance->CNT;
 649              		.loc 1 228 0
 650 0006 8E4B     		ldr	r3, .L37
 651 0008 1B68     		ldr	r3, [r3]
 652 000a D3F824A0 		ldr	r10, [r3, #36]
 653              	.LVL47:
 229:Src/hallinterrupts.c ****     long long timerwraps_copy = timerwraps;
 654              		.loc 1 229 0
 655 000e 8D4B     		ldr	r3, .L37+4
 656 0010 D3E90067 		ldrd	r6, [r3]
 657              	.LVL48:
 230:Src/hallinterrupts.c ****     local_hall_params[0].hall = (~(LEFT_HALL_U_PORT->IDR & (LEFT_HALL_U_PIN | LEFT_HALL_V_PIN | LEF
 658              		.loc 1 230 0
 659 0014 8C4A     		ldr	r2, .L37+8
 660 0016 9368     		ldr	r3, [r2, #8]
 661 0018 03F0E003 		and	r3, r3, #224
 662 001c DB43     		mvns	r3, r3
 663 001e C3F34213 		ubfx	r3, r3, #5, #3
 664 0022 8A49     		ldr	r1, .L37+12
 665 0024 CB70     		strb	r3, [r1, #3]
 231:Src/hallinterrupts.c ****     //local_hall_params[1].hall = (~(RIGHT_HALL_U_PORT->IDR & (RIGHT_HALL_U_PIN | RIGHT_HALL_V_PIN 
 232:Src/hallinterrupts.c **** 
 233:Src/hallinterrupts.c ****     unsigned short Left = LEFT_HALL_U_PORT->IDR;
 666              		.loc 1 233 0
 667 0026 9268     		ldr	r2, [r2, #8]
 668              	.LVL49:
 234:Src/hallinterrupts.c ****     unsigned short Right = RIGHT_HALL_U_PORT->IDR;
 669              		.loc 1 234 0
 670 0028 894B     		ldr	r3, .L37+16
 671 002a 9B68     		ldr	r3, [r3, #8]
 672              	.LVL50:
 235:Src/hallinterrupts.c **** 
 236:Src/hallinterrupts.c ****     // Get hall sensors values
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s 			page 18


 237:Src/hallinterrupts.c ****     hall_ul = !(Left & LEFT_HALL_U_PIN);
 673              		.loc 1 237 0
 674 002c 92B2     		uxth	r2, r2
 675 002e 12F0200F 		tst	r2, #32
 676 0032 0CBF     		ite	eq
 677 0034 0120     		moveq	r0, #1
 678 0036 0020     		movne	r0, #0
 679 0038 8649     		ldr	r1, .L37+20
 680 003a 0870     		strb	r0, [r1]
 238:Src/hallinterrupts.c ****     hall_vl = !(Left & LEFT_HALL_V_PIN);
 681              		.loc 1 238 0
 682 003c 12F0400F 		tst	r2, #64
 683 0040 0CBF     		ite	eq
 684 0042 0120     		moveq	r0, #1
 685 0044 0020     		movne	r0, #0
 686 0046 8449     		ldr	r1, .L37+24
 687 0048 0870     		strb	r0, [r1]
 239:Src/hallinterrupts.c ****     hall_wl = !(Left & LEFT_HALL_W_PIN);
 688              		.loc 1 239 0
 689 004a 12F0800F 		tst	r2, #128
 690 004e 0CBF     		ite	eq
 691 0050 0121     		moveq	r1, #1
 692 0052 0021     		movne	r1, #0
 693 0054 814A     		ldr	r2, .L37+28
 694              	.LVL51:
 695 0056 1170     		strb	r1, [r2]
 240:Src/hallinterrupts.c **** 
 241:Src/hallinterrupts.c ****     hall_ur = !(Right & RIGHT_HALL_U_PIN);
 696              		.loc 1 241 0
 697 0058 9BB2     		uxth	r3, r3
 698 005a 13F4806F 		tst	r3, #1024
 699 005e 0CBF     		ite	eq
 700 0060 0121     		moveq	r1, #1
 701 0062 0021     		movne	r1, #0
 702 0064 7E4A     		ldr	r2, .L37+32
 703 0066 1170     		strb	r1, [r2]
 242:Src/hallinterrupts.c ****     hall_vr = !(Right & RIGHT_HALL_V_PIN);
 704              		.loc 1 242 0
 705 0068 13F4006F 		tst	r3, #2048
 706 006c 0CBF     		ite	eq
 707 006e 0121     		moveq	r1, #1
 708 0070 0021     		movne	r1, #0
 709 0072 7C4A     		ldr	r2, .L37+36
 710 0074 1170     		strb	r1, [r2]
 243:Src/hallinterrupts.c ****     hall_wr = !(Right & RIGHT_HALL_W_PIN);
 711              		.loc 1 243 0
 712 0076 13F4805F 		tst	r3, #4096
 713 007a 0CBF     		ite	eq
 714 007c 0122     		moveq	r2, #1
 715 007e 0022     		movne	r2, #0
 716 0080 794B     		ldr	r3, .L37+40
 717              	.LVL52:
 718 0082 1A70     		strb	r2, [r3]
 719              	.LBB29:
 720              	.LBB30:
  60:Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h **** }
 721              		.loc 2 60 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s 			page 19


 722              		.syntax unified
 723              	@ 60 "Drivers/CMSIS/CM4/CoreSupport/cmsis_gcc.h" 1
 724 0084 62B6     		cpsie i
 725              	@ 0 "" 2
 726              	.LVL53:
 727              		.thumb
 728              		.syntax unified
 729              	.LBE30:
 730              	.LBE29:
 731              	.LBB31:
 244:Src/hallinterrupts.c ****     __enable_irq();
 245:Src/hallinterrupts.c **** 
 246:Src/hallinterrupts.c ****     for (int i = 0; i < 2; i++){
 732              		.loc 1 246 0
 733 0086 0024     		movs	r4, #0
 734 0088 19E0     		b	.L30
 735              	.LVL54:
 736              	.L33:
 737              	.LBB32:
 247:Src/hallinterrupts.c ****         // if this wheel change hall input
 248:Src/hallinterrupts.c ****         if (local_hall_params[i].last_hall != local_hall_params[i].hall){
 249:Src/hallinterrupts.c ****             if (local_hall_params[i].last_hall == 0){
 250:Src/hallinterrupts.c ****                 // valid startup condition
 251:Src/hallinterrupts.c ****             } else {
 252:Src/hallinterrupts.c ****                 bldc_count_per_hall[i] = bldc_count_per_hall_counter[i];
 253:Src/hallinterrupts.c ****                 bldc_count_per_hall_counter[i] = 0;
 254:Src/hallinterrupts.c **** 
 255:Src/hallinterrupts.c ****                 local_hall_params[i].zerospeedtimeout = 5; // number of timer wraps to after which 
 256:Src/hallinterrupts.c ****                 local_hall_params[i].hall_time = (timerwraps_copy << 16) | time;
 257:Src/hallinterrupts.c ****                 long long dt = local_hall_params[i].hall_time - local_hall_params[i].last_hall_time
 258:Src/hallinterrupts.c **** 
 259:Src/hallinterrupts.c ****                 // note correction of direction for left wheel
 260:Src/hallinterrupts.c ****                 local_hall_params[i].incr =
 261:Src/hallinterrupts.c ****                     increments[local_hall_params[i].last_hall][local_hall_params[i].hall] *
 262:Src/hallinterrupts.c ****                     local_hall_params[i].direction;
 263:Src/hallinterrupts.c **** 
 264:Src/hallinterrupts.c ****                 HallData[i].HallPosn = HallData[i].HallPosn + local_hall_params[i].incr;
 265:Src/hallinterrupts.c ****                 HallData[i].HallPosn_mm = (int)((float)HallData[i].HallPosn)*HallData[i].HallPosnMu
 266:Src/hallinterrupts.c ****                 HallData[i].HallTimeDiff = (unsigned long)dt;
 267:Src/hallinterrupts.c **** 
 268:Src/hallinterrupts.c ****                 if (local_hall_params[i].incr != 0){
 269:Src/hallinterrupts.c ****                     // speed = distance/time
 270:Src/hallinterrupts.c ****                     // in this case, distance is always 1.
 271:Src/hallinterrupts.c ****                     // and time is between 10 and 65535
 272:Src/hallinterrupts.c ****                     HallData[i].HallSpeed = (int)
 273:Src/hallinterrupts.c ****                         (HALL_SPEED_CALIBRATION/(float)HallData[i].HallTimeDiff) *
 274:Src/hallinterrupts.c ****                         local_hall_params[i].incr;
 275:Src/hallinterrupts.c **** 
 276:Src/hallinterrupts.c ****                     HallData[i].HallSpeed_mm_per_s = (int)
 277:Src/hallinterrupts.c ****                         ((float)(HallData[i].HallPosnMultiplier/(float)HallData[i].HallTimeDiff) *
 278:Src/hallinterrupts.c ****                         (float)local_hall_params[i].incr *
 279:Src/hallinterrupts.c ****                         (float)HALL_INTERRUPT_TIMER_FREQ);
 280:Src/hallinterrupts.c ****                 } else {
 281:Src/hallinterrupts.c ****                     // we missed a transition?
 282:Src/hallinterrupts.c ****                     HallData[i].HallSkipped ++;
 738              		.loc 1 282 0
 739 008a E200     		lsls	r2, r4, #3
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s 			page 20


 740 008c 2244     		add	r2, r2, r4
 741 008e 9100     		lsls	r1, r2, #2
 742 0090 764B     		ldr	r3, .L37+44
 743 0092 0B44     		add	r3, r3, r1
 744 0094 1A6A     		ldr	r2, [r3, #32]
 745 0096 0132     		adds	r2, r2, #1
 746 0098 1A62     		str	r2, [r3, #32]
 747              	.L32:
 748              	.LBE32:
 283:Src/hallinterrupts.c ****                 }
 284:Src/hallinterrupts.c ****             }
 285:Src/hallinterrupts.c **** 
 286:Src/hallinterrupts.c ****             // remember for next round
 287:Src/hallinterrupts.c ****             local_hall_params[i].last_hall = local_hall_params[i].hall;
 749              		.loc 1 287 0
 750 009a C4EBC403 		rsb	r3, r4, r4, lsl #3
 751 009e C3EBC302 		rsb	r2, r3, r3, lsl #3
 752 00a2 6A4B     		ldr	r3, .L37+12
 753 00a4 1344     		add	r3, r3, r2
 754 00a6 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 755 00a8 D2B2     		uxtb	r2, r2
 756 00aa 1A71     		strb	r2, [r3, #4]
 288:Src/hallinterrupts.c ****             local_hall_params[i].last_hall_time = local_hall_params[i].hall_time;
 757              		.loc 1 288 0
 758 00ac D3F80500 		ldr	r0, [r3, #5]	@ unaligned
 759 00b0 D3F80910 		ldr	r1, [r3, #9]	@ unaligned
 760 00b4 C3F80D00 		str	r0, [r3, #13]	@ unaligned
 761 00b8 C3F81110 		str	r1, [r3, #17]	@ unaligned
 762              	.L31:
 246:Src/hallinterrupts.c ****         // if this wheel change hall input
 763              		.loc 1 246 0 discriminator 2
 764 00bc 0134     		adds	r4, r4, #1
 765              	.LVL55:
 766              	.L30:
 246:Src/hallinterrupts.c ****         // if this wheel change hall input
 767              		.loc 1 246 0 is_stmt 0 discriminator 1
 768 00be 012C     		cmp	r4, #1
 769 00c0 00F3BB80 		bgt	.L36
 248:Src/hallinterrupts.c ****             if (local_hall_params[i].last_hall == 0){
 770              		.loc 1 248 0 is_stmt 1
 771 00c4 C4EBC403 		rsb	r3, r4, r4, lsl #3
 772 00c8 C3EBC302 		rsb	r2, r3, r3, lsl #3
 773 00cc 5F4B     		ldr	r3, .L37+12
 774 00ce 1344     		add	r3, r3, r2
 775 00d0 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 776 00d2 D2B2     		uxtb	r2, r2
 777 00d4 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 778 00d6 DBB2     		uxtb	r3, r3
 779 00d8 9A42     		cmp	r2, r3
 780 00da EFD0     		beq	.L31
 249:Src/hallinterrupts.c ****                 // valid startup condition
 781              		.loc 1 249 0
 782 00dc C4EBC403 		rsb	r3, r4, r4, lsl #3
 783 00e0 C3EBC303 		rsb	r3, r3, r3, lsl #3
 784 00e4 594A     		ldr	r2, .L37+12
 785 00e6 1344     		add	r3, r3, r2
 786 00e8 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s 			page 21


 787 00ea 002B     		cmp	r3, #0
 788 00ec D5D0     		beq	.L32
 789              	.LBB33:
 252:Src/hallinterrupts.c ****                 bldc_count_per_hall_counter[i] = 0;
 790              		.loc 1 252 0
 791 00ee 604B     		ldr	r3, .L37+48
 792 00f0 53F82410 		ldr	r1, [r3, r4, lsl #2]
 793 00f4 5F4A     		ldr	r2, .L37+52
 794 00f6 42F82410 		str	r1, [r2, r4, lsl #2]
 253:Src/hallinterrupts.c **** 
 795              		.loc 1 253 0
 796 00fa 0021     		movs	r1, #0
 797 00fc 43F82410 		str	r1, [r3, r4, lsl #2]
 255:Src/hallinterrupts.c ****                 local_hall_params[i].hall_time = (timerwraps_copy << 16) | time;
 798              		.loc 1 255 0
 799 0100 E500     		lsls	r5, r4, #3
 800 0102 2B1B     		subs	r3, r5, r4
 801 0104 C3EBC303 		rsb	r3, r3, r3, lsl #3
 802 0108 504A     		ldr	r2, .L37+12
 803 010a 1344     		add	r3, r3, r2
 804 010c 93F82100 		ldrb	r0, [r3, #33]	@ zero_extendqisi2
 805 0110 0520     		movs	r0, #5
 806 0112 83F82100 		strb	r0, [r3, #33]
 807 0116 93F82200 		ldrb	r0, [r3, #34]	@ zero_extendqisi2
 808 011a 83F82210 		strb	r1, [r3, #34]
 809 011e 93F82300 		ldrb	r0, [r3, #35]	@ zero_extendqisi2
 810 0122 83F82310 		strb	r1, [r3, #35]
 811 0126 93F82400 		ldrb	r0, [r3, #36]	@ zero_extendqisi2
 812 012a 83F82410 		strb	r1, [r3, #36]
 256:Src/hallinterrupts.c ****                 long long dt = local_hall_params[i].hall_time - local_hall_params[i].last_hall_time
 813              		.loc 1 256 0
 814 012e 4FEA0749 		lsl	r9, r7, #16
 815 0132 49EA1649 		orr	r9, r9, r6, lsr #16
 816 0136 4FEA0648 		lsl	r8, r6, #16
 817 013a 48EA0A00 		orr	r0, r8, r10
 818 013e C3F80500 		str	r0, [r3, #5]	@ unaligned
 819 0142 C3F80990 		str	r9, [r3, #9]	@ unaligned
 257:Src/hallinterrupts.c **** 
 820              		.loc 1 257 0
 821 0146 D3F80580 		ldr	r8, [r3, #5]	@ unaligned
 822 014a D3F80990 		ldr	r9, [r3, #9]	@ unaligned
 823 014e D3F80D00 		ldr	r0, [r3, #13]	@ unaligned
 824 0152 D3F81110 		ldr	r1, [r3, #17]	@ unaligned
 825 0156 B8EB0008 		subs	r8, r8, r0
 261:Src/hallinterrupts.c ****                     local_hall_params[i].direction;
 826              		.loc 1 261 0
 827 015a 1979     		ldrb	r1, [r3, #4]	@ zero_extendqisi2
 828 015c 93F803C0 		ldrb	ip, [r3, #3]	@ zero_extendqisi2
 829 0160 C1EBC101 		rsb	r1, r1, r1, lsl #3
 830 0164 6144     		add	r1, r1, ip
 831 0166 DFF818C1 		ldr	ip, .L37+64
 832 016a 5CF82110 		ldr	r1, [ip, r1, lsl #2]
 262:Src/hallinterrupts.c **** 
 833              		.loc 1 262 0
 834 016e D3F82520 		ldr	r2, [r3, #37]	@ unaligned
 261:Src/hallinterrupts.c ****                     local_hall_params[i].direction;
 835              		.loc 1 261 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s 			page 22


 836 0172 02FB01F2 		mul	r2, r2, r1
 260:Src/hallinterrupts.c ****                     increments[local_hall_params[i].last_hall][local_hall_params[i].hall] *
 837              		.loc 1 260 0
 838 0176 C3F81D20 		str	r2, [r3, #29]	@ unaligned
 264:Src/hallinterrupts.c ****                 HallData[i].HallPosn_mm = (int)((float)HallData[i].HallPosn)*HallData[i].HallPosnMu
 839              		.loc 1 264 0
 840 017a 3C49     		ldr	r1, .L37+44
 841 017c 2544     		add	r5, r5, r4
 842 017e AA00     		lsls	r2, r5, #2
 843 0180 8D18     		adds	r5, r1, r2
 844 0182 51F802C0 		ldr	ip, [r1, r2]
 845 0186 D3F81DE0 		ldr	lr, [r3, #29]	@ unaligned
 260:Src/hallinterrupts.c ****                     increments[local_hall_params[i].last_hall][local_hall_params[i].hall] *
 846              		.loc 1 260 0
 847 018a 1833     		adds	r3, r3, #24
 264:Src/hallinterrupts.c ****                 HallData[i].HallPosn_mm = (int)((float)HallData[i].HallPosn)*HallData[i].HallPosnMu
 848              		.loc 1 264 0
 849 018c F444     		add	ip, ip, lr
 850 018e 41F802C0 		str	ip, [r1, r2]
 265:Src/hallinterrupts.c ****                 HallData[i].HallTimeDiff = (unsigned long)dt;
 851              		.loc 1 265 0
 852 0192 8A58     		ldr	r2, [r1, r2]
 853 0194 07EE902A 		vmov	s15, r2	@ int
 854 0198 F8EEE77A 		vcvt.f32.s32	s15, s15
 855 019c FDEEE77A 		vcvt.s32.f32	s15, s15
 856 01a0 95ED027A 		vldr.32	s14, [r5, #8]
 857 01a4 F8EEE77A 		vcvt.f32.s32	s15, s15
 858 01a8 67EE877A 		vmul.f32	s15, s15, s14
 859 01ac FDEEE77A 		vcvt.s32.f32	s15, s15
 860 01b0 C5ED047A 		vstr.32	s15, [r5, #16]	@ int
 266:Src/hallinterrupts.c **** 
 861              		.loc 1 266 0
 862 01b4 C5F81C80 		str	r8, [r5, #28]
 268:Src/hallinterrupts.c ****                     // speed = distance/time
 863              		.loc 1 268 0
 864 01b8 D3F80530 		ldr	r3, [r3, #5]	@ unaligned
 865 01bc 002B     		cmp	r3, #0
 866 01be 3FF464AF 		beq	.L33
 273:Src/hallinterrupts.c ****                         local_hall_params[i].incr;
 867              		.loc 1 273 0
 868 01c2 4FEAC408 		lsl	r8, r4, #3
 869 01c6 08EB0402 		add	r2, r8, r4
 870 01ca 9300     		lsls	r3, r2, #2
 871 01cc 0D46     		mov	r5, r1
 872 01ce 1D44     		add	r5, r5, r3
 873 01d0 E869     		ldr	r0, [r5, #28]
 874 01d2 07EE900A 		vmov	s15, r0	@ int
 875 01d6 F8EE677A 		vcvt.f32.u32	s15, s15
 876 01da 17EE900A 		vmov	r0, s15
 877 01de FFF7FEFF 		bl	__aeabi_f2d
 878              	.LVL56:
 879 01e2 0246     		mov	r2, r0
 880 01e4 0B46     		mov	r3, r1
 881 01e6 0020     		movs	r0, #0
 882 01e8 2349     		ldr	r1, .L37+56
 883 01ea FFF7FEFF 		bl	__aeabi_ddiv
 884              	.LVL57:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s 			page 23


 272:Src/hallinterrupts.c ****                         (HALL_SPEED_CALIBRATION/(float)HallData[i].HallTimeDiff) *
 885              		.loc 1 272 0
 886 01ee FFF7FEFF 		bl	__aeabi_d2iz
 887              	.LVL58:
 274:Src/hallinterrupts.c **** 
 888              		.loc 1 274 0
 889 01f2 A8EB0408 		sub	r8, r8, r4
 890 01f6 C8EBC808 		rsb	r8, r8, r8, lsl #3
 891 01fa 144B     		ldr	r3, .L37+12
 892 01fc 9844     		add	r8, r8, r3
 893 01fe D8F81D30 		ldr	r3, [r8, #29]	@ unaligned
 273:Src/hallinterrupts.c ****                         local_hall_params[i].incr;
 894              		.loc 1 273 0
 895 0202 03FB00F0 		mul	r0, r3, r0
 272:Src/hallinterrupts.c ****                         (HALL_SPEED_CALIBRATION/(float)HallData[i].HallTimeDiff) *
 896              		.loc 1 272 0
 897 0206 6860     		str	r0, [r5, #4]
 277:Src/hallinterrupts.c ****                         (float)local_hall_params[i].incr *
 898              		.loc 1 277 0
 899 0208 D5ED026A 		vldr.32	s13, [r5, #8]
 900 020c D5ED077A 		vldr.32	s15, [r5, #28]	@ int
 901 0210 F8EE677A 		vcvt.f32.u32	s15, s15
 902 0214 86EEA77A 		vdiv.f32	s14, s13, s15
 278:Src/hallinterrupts.c ****                         (float)HALL_INTERRUPT_TIMER_FREQ);
 903              		.loc 1 278 0
 904 0218 D8F81D30 		ldr	r3, [r8, #29]	@ unaligned
 905 021c 07EE903A 		vmov	s15, r3	@ int
 906 0220 F8EEE77A 		vcvt.f32.s32	s15, s15
 277:Src/hallinterrupts.c ****                         (float)local_hall_params[i].incr *
 907              		.loc 1 277 0
 908 0224 67EE277A 		vmul.f32	s15, s14, s15
 278:Src/hallinterrupts.c ****                         (float)HALL_INTERRUPT_TIMER_FREQ);
 909              		.loc 1 278 0
 910 0228 9FED147A 		vldr.32	s14, .L37+60
 911 022c 67EE877A 		vmul.f32	s15, s15, s14
 276:Src/hallinterrupts.c ****                         ((float)(HallData[i].HallPosnMultiplier/(float)HallData[i].HallTimeDiff) *
 912              		.loc 1 276 0
 913 0230 FDEEE77A 		vcvt.s32.f32	s15, s15
 914 0234 C5ED067A 		vstr.32	s15, [r5, #24]	@ int
 915 0238 2FE7     		b	.L32
 916              	.L36:
 917              	.LBE33:
 918              	.LBE31:
 289:Src/hallinterrupts.c ****         }
 290:Src/hallinterrupts.c ****     }
 291:Src/hallinterrupts.c **** }
 919              		.loc 1 291 0
 920 023a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 921              	.LVL59:
 922              	.L38:
 923 023e 00BF     		.align	2
 924              	.L37:
 925 0240 00000000 		.word	h_timer_hall
 926 0244 00000000 		.word	.LANCHOR1
 927 0248 000C0140 		.word	1073810432
 928 024c 00000000 		.word	local_hall_params
 929 0250 00100140 		.word	1073811456
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s 			page 24


 930 0254 00000000 		.word	hall_ul
 931 0258 00000000 		.word	hall_vl
 932 025c 00000000 		.word	hall_wl
 933 0260 00000000 		.word	hall_ur
 934 0264 00000000 		.word	hall_vr
 935 0268 00000000 		.word	hall_wr
 936 026c 00000000 		.word	HallData
 937 0270 00000000 		.word	bldc_count_per_hall_counter
 938 0274 00000000 		.word	.LANCHOR3
 939 0278 00400F41 		.word	1091518464
 940 027c 0050C347 		.word	1203982336
 941 0280 00000000 		.word	.LANCHOR4
 942              		.cfi_endproc
 943              	.LFE132:
 945              		.section	.text.TMR4_GLOBAL_IRQHandler,"ax",%progbits
 946              		.align	1
 947              		.global	TMR4_GLOBAL_IRQHandler
 948              		.syntax unified
 949              		.thumb
 950              		.thumb_func
 951              		.fpu fpv4-sp-d16
 953              	TMR4_GLOBAL_IRQHandler:
 954              	.LFB133:
 292:Src/hallinterrupts.c **** 
 293:Src/hallinterrupts.c **** 
 294:Src/hallinterrupts.c **** /////////////////////////////////////////////////////////////////////
 295:Src/hallinterrupts.c **** // we keep track of timer wraps for accurate speed measurement.
 296:Src/hallinterrupts.c **** // and also look for 'stopped'
 297:Src/hallinterrupts.c **** void TMR4_GLOBAL_IRQHandler(void){
 955              		.loc 1 297 0
 956              		.cfi_startproc
 957              		@ args = 0, pretend = 0, frame = 0
 958              		@ frame_needed = 0, uses_anonymous_args = 0
 959              		@ link register save eliminated.
 298:Src/hallinterrupts.c ****     if (__HAL_TIM_GET_FLAG(&h_timer_hall, TIM_IT_UPDATE) != RESET){
 960              		.loc 1 298 0
 961 0000 1E4B     		ldr	r3, .L51
 962 0002 1B68     		ldr	r3, [r3]
 963 0004 1A69     		ldr	r2, [r3, #16]
 964 0006 12F0010F 		tst	r2, #1
 965 000a 35D0     		beq	.L46
 297:Src/hallinterrupts.c ****     if (__HAL_TIM_GET_FLAG(&h_timer_hall, TIM_IT_UPDATE) != RESET){
 966              		.loc 1 297 0
 967 000c 4DF804BD 		push	{fp}
 968              	.LCFI10:
 969              		.cfi_def_cfa_offset 4
 970              		.cfi_offset 11, -4
 299:Src/hallinterrupts.c ****         __HAL_TIM_CLEAR_FLAG(&h_timer_hall, TIM_IT_UPDATE);
 971              		.loc 1 299 0
 972 0010 6FF00102 		mvn	r2, #1
 973 0014 1A61     		str	r2, [r3, #16]
 300:Src/hallinterrupts.c ****         timerwraps++;
 974              		.loc 1 300 0
 975 0016 1A49     		ldr	r1, .L51+4
 976 0018 D1E900BC 		ldrd	fp, [r1]
 977 001c 1BF10102 		adds	r2, fp, #1
 978 0020 4CF10003 		adc	r3, ip, #0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s 			page 25


 979 0024 C1E90023 		strd	r2, [r1]
 980              	.LVL60:
 981              	.LBB34:
 301:Src/hallinterrupts.c **** 
 302:Src/hallinterrupts.c ****         for (int i = 0; i < 2; i++){
 982              		.loc 1 302 0
 983 0028 0023     		movs	r3, #0
 984 002a 09E0     		b	.L41
 985              	.LVL61:
 986              	.L50:
 303:Src/hallinterrupts.c ****             if (local_hall_params[i].zerospeedtimeout <= 0){
 304:Src/hallinterrupts.c ****                 HallData[i].HallSpeed = 0;
 987              		.loc 1 304 0
 988 002c D900     		lsls	r1, r3, #3
 989 002e 1944     		add	r1, r1, r3
 990 0030 8800     		lsls	r0, r1, #2
 991 0032 144A     		ldr	r2, .L51+8
 992 0034 0244     		add	r2, r2, r0
 993 0036 0021     		movs	r1, #0
 994 0038 5160     		str	r1, [r2, #4]
 305:Src/hallinterrupts.c ****                 HallData[i].HallSpeed_mm_per_s = 0;
 995              		.loc 1 305 0
 996 003a 9161     		str	r1, [r2, #24]
 306:Src/hallinterrupts.c ****                 HallData[i].HallTimeDiff = 0;
 997              		.loc 1 306 0
 998 003c D161     		str	r1, [r2, #28]
 999              	.L43:
 302:Src/hallinterrupts.c ****             if (local_hall_params[i].zerospeedtimeout <= 0){
 1000              		.loc 1 302 0 discriminator 2
 1001 003e 0133     		adds	r3, r3, #1
 1002              	.LVL62:
 1003              	.L41:
 302:Src/hallinterrupts.c ****             if (local_hall_params[i].zerospeedtimeout <= 0){
 1004              		.loc 1 302 0 is_stmt 0 discriminator 1
 1005 0040 012B     		cmp	r3, #1
 1006 0042 16DC     		bgt	.L49
 303:Src/hallinterrupts.c ****                 HallData[i].HallSpeed = 0;
 1007              		.loc 1 303 0 is_stmt 1
 1008 0044 C3EBC302 		rsb	r2, r3, r3, lsl #3
 1009 0048 C2EBC201 		rsb	r1, r2, r2, lsl #3
 1010 004c 0E4A     		ldr	r2, .L51+12
 1011 004e 0A44     		add	r2, r2, r1
 1012 0050 2032     		adds	r2, r2, #32
 1013 0052 D2F80120 		ldr	r2, [r2, #1]	@ unaligned
 1014 0056 002A     		cmp	r2, #0
 1015 0058 E8DD     		ble	.L50
 307:Src/hallinterrupts.c ****             } else {
 308:Src/hallinterrupts.c ****                 local_hall_params[i].zerospeedtimeout--;
 1016              		.loc 1 308 0
 1017 005a C3EBC302 		rsb	r2, r3, r3, lsl #3
 1018 005e C2EBC201 		rsb	r1, r2, r2, lsl #3
 1019 0062 094A     		ldr	r2, .L51+12
 1020 0064 0A44     		add	r2, r2, r1
 1021 0066 D2F82110 		ldr	r1, [r2, #33]	@ unaligned
 1022 006a 0139     		subs	r1, r1, #1
 1023 006c C2F82110 		str	r1, [r2, #33]	@ unaligned
 1024 0070 E5E7     		b	.L43
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s 			page 26


 1025              	.L49:
 1026              	.LBE34:
 309:Src/hallinterrupts.c ****             }
 310:Src/hallinterrupts.c ****         }
 311:Src/hallinterrupts.c ****     }
 312:Src/hallinterrupts.c **** }
 1027              		.loc 1 312 0
 1028 0072 5DF804BB 		ldr	fp, [sp], #4
 1029              	.LCFI11:
 1030              		.cfi_restore 11
 1031              		.cfi_def_cfa_offset 0
 1032 0076 7047     		bx	lr
 1033              	.LVL63:
 1034              	.L46:
 1035 0078 7047     		bx	lr
 1036              	.L52:
 1037 007a 00BF     		.align	2
 1038              	.L51:
 1039 007c 00000000 		.word	h_timer_hall
 1040 0080 00000000 		.word	.LANCHOR1
 1041 0084 00000000 		.word	HallData
 1042 0088 00000000 		.word	local_hall_params
 1043              		.cfi_endproc
 1044              	.LFE133:
 1046              		.comm	timeStats,136,8
 1047              		.global	timerwraps
 1048              		.comm	local_hall_params,98,4
 1049              		.comm	h_timer_hall,64,4
 1050              		.global	bldc_count_per_hall
 1051              		.comm	hall_wr,1,1
 1052              		.comm	hall_vr,1,1
 1053              		.comm	hall_ur,1,1
 1054              		.comm	hall_wl,1,1
 1055              		.comm	hall_vl,1,1
 1056              		.comm	hall_ul,1,1
 1057              		.comm	HallData,72,4
 1058              		.section	.bss.bldc_count_per_hall,"aw",%nobits
 1059              		.align	2
 1060              		.set	.LANCHOR3,. + 0
 1063              	bldc_count_per_hall:
 1064 0000 00000000 		.space	8
 1064      00000000 
 1065              		.section	.bss.now_us,"aw",%nobits
 1066              		.align	3
 1067              		.set	.LANCHOR2,. + 0
 1070              	now_us:
 1071 0000 00000000 		.space	8
 1071      00000000 
 1072              		.section	.bss.timerwraps,"aw",%nobits
 1073              		.align	3
 1074              		.set	.LANCHOR1,. + 0
 1077              	timerwraps:
 1078 0000 00000000 		.space	8
 1078      00000000 
 1079              		.section	.data.WheelSize_mm,"aw",%progbits
 1080              		.align	2
 1081              		.set	.LANCHOR0,. + 0
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s 			page 27


 1084              	WheelSize_mm:
 1085 0000 9A192543 		.word	1126504858
 1086              		.section	.rodata.increments,"a",%progbits
 1087              		.align	2
 1088              		.set	.LANCHOR4,. + 0
 1091              	increments:
 1092 0000 00000000 		.word	0
 1093 0004 00000000 		.word	0
 1094 0008 00000000 		.word	0
 1095 000c 00000000 		.word	0
 1096 0010 00000000 		.word	0
 1097 0014 00000000 		.word	0
 1098 0018 00000000 		.word	0
 1099 001c 00000000 		.word	0
 1100 0020 00000000 		.word	0
 1101 0024 00000000 		.word	0
 1102 0028 FFFFFFFF 		.word	-1
 1103 002c 00000000 		.word	0
 1104 0030 01000000 		.word	1
 1105 0034 00000000 		.word	0
 1106 0038 00000000 		.word	0
 1107 003c 00000000 		.word	0
 1108 0040 00000000 		.word	0
 1109 0044 01000000 		.word	1
 1110 0048 00000000 		.word	0
 1111 004c 00000000 		.word	0
 1112 0050 FFFFFFFF 		.word	-1
 1113 0054 00000000 		.word	0
 1114 0058 01000000 		.word	1
 1115 005c FFFFFFFF 		.word	-1
 1116 0060 00000000 		.word	0
 1117 0064 00000000 		.word	0
 1118 0068 00000000 		.word	0
 1119 006c 00000000 		.word	0
 1120 0070 00000000 		.word	0
 1121 0074 00000000 		.word	0
 1122 0078 00000000 		.word	0
 1123 007c 00000000 		.word	0
 1124 0080 00000000 		.word	0
 1125 0084 FFFFFFFF 		.word	-1
 1126 0088 01000000 		.word	1
 1127 008c 00000000 		.word	0
 1128 0090 FFFFFFFF 		.word	-1
 1129 0094 00000000 		.word	0
 1130 0098 00000000 		.word	0
 1131 009c 01000000 		.word	1
 1132 00a0 00000000 		.word	0
 1133 00a4 00000000 		.word	0
 1134 00a8 00000000 		.word	0
 1135 00ac 00000000 		.word	0
 1136 00b0 01000000 		.word	1
 1137 00b4 00000000 		.word	0
 1138 00b8 FFFFFFFF 		.word	-1
 1139 00bc 00000000 		.word	0
 1140 00c0 00000000 		.word	0
 1141              		.text
 1142              	.Letext0:
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s 			page 28


 1143              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 1144              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 1145              		.file 5 "Drivers/CMSIS/CM4/CoreSupport/core_cm4.h"
 1146              		.file 6 "Inc/system_at32f4xx.h"
 1147              		.file 7 "Drivers/CMSIS/CM4/DeviceSupport/at32f4xx.h"
 1148              		.file 8 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/lock.h"
 1149              		.file 9 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_types.h"
 1150              		.file 10 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.
 1151              		.file 11 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/reent.h"
 1152              		.file 12 "Drivers/Modified_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1153              		.file 13 "Drivers/Modified_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1154              		.file 14 "Drivers/Modified_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 1155              		.file 15 "Inc/control_structures.h"
 1156              		.file 16 "Inc/hallinterrupts.h"
 1157              		.file 17 "Drivers/Modified_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
 1158              		.file 18 "<built-in>"
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s 			page 29


DEFINED SYMBOLS
                            *ABS*:0000000000000000 hallinterrupts.c
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s:21     .text.HallInterruptinit:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s:28     .text.HallInterruptinit:0000000000000000 HallInterruptinit
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s:179    .text.HallInterruptinit:0000000000000100 $d
                            *COM*:0000000000000048 HallData
                            *COM*:0000000000000062 local_hall_params
                            *COM*:0000000000000040 h_timer_hall
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s:192    .text.HallInterruptSetWheelDiameterInches:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s:199    .text.HallInterruptSetWheelDiameterInches:0000000000000000 HallInterruptSetWheelDiameterInches
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s:244    .text.HallInterruptSetWheelDiameterInches:0000000000000040 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s:255    .text.HallInterruptSetWheelDiameterMM:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s:262    .text.HallInterruptSetWheelDiameterMM:0000000000000000 HallInterruptSetWheelDiameterMM
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s:299    .text.HallInterruptSetWheelDiameterMM:0000000000000028 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s:308    .text.HallInterruptReset:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s:315    .text.HallInterruptReset:0000000000000000 HallInterruptReset
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s:417    .text.HallInterruptReset:0000000000000098 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s:427    .text.HallInterruptReadPosn:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s:434    .text.HallInterruptReadPosn:0000000000000000 HallInterruptReadPosn
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s:541    .text.HallInterruptReadPosn:0000000000000060 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s:546    .text.HallGetuS:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s:553    .text.HallGetuS:0000000000000000 HallGetuS
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s:606    .text.HallGetuS:000000000000004c $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s:614    .text.HallInterruptsInterrupt:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s:621    .text.HallInterruptsInterrupt:0000000000000000 HallInterruptsInterrupt
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s:925    .text.HallInterruptsInterrupt:0000000000000240 $d
                            *COM*:0000000000000001 hall_ul
                            *COM*:0000000000000001 hall_vl
                            *COM*:0000000000000001 hall_wl
                            *COM*:0000000000000001 hall_ur
                            *COM*:0000000000000001 hall_vr
                            *COM*:0000000000000001 hall_wr
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s:946    .text.TMR4_GLOBAL_IRQHandler:0000000000000000 $t
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s:953    .text.TMR4_GLOBAL_IRQHandler:0000000000000000 TMR4_GLOBAL_IRQHandler
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s:1039   .text.TMR4_GLOBAL_IRQHandler:000000000000007c $d
                            *COM*:0000000000000088 timeStats
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s:1077   .bss.timerwraps:0000000000000000 timerwraps
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s:1063   .bss.bldc_count_per_hall:0000000000000000 bldc_count_per_hall
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s:1059   .bss.bldc_count_per_hall:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s:1066   .bss.now_us:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s:1070   .bss.now_us:0000000000000000 now_us
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s:1073   .bss.timerwraps:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s:1080   .data.WheelSize_mm:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s:1084   .data.WheelSize_mm:0000000000000000 WheelSize_mm
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s:1087   .rodata.increments:0000000000000000 $d
/var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s:1091   .rodata.increments:0000000000000000 increments

UNDEFINED SYMBOLS
__aeabi_f2d
__aeabi_dmul
__aeabi_ddiv
__aeabi_d2f
memset
HAL_TIM_Base_Init
HAL_TIM_Base_Start
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
ARM GAS  /var/folders/l3/4y5292px21b4835bsnjwqc7w009kq1/T//ccWt534z.s 			page 30


HAL_NVIC_DisableIRQ
__aeabi_d2iz
bldc_count_per_hall_counter
